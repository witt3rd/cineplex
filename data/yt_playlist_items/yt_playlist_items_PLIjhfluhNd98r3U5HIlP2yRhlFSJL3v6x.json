{
  "_id": "PLIjhfluhNd98r3U5HIlP2yRhlFSJL3v6x",
  "as_of": "2021-12-09 08:15:48.111840",
  "items": [
    {
      "kind": "youtube#playlistItem",
      "etag": "cxNYXfoG00PGSeadfadF2EW5JKI",
      "id": "UExJamhmbHVoTmQ5OHIzVTVISWxQMnlSaGxGU0pMM3Y2eC5DQUNERDQ2NkIzRUQxNTY1",
      "snippet": {
        "publishedAt": "2021-11-26T21:30:55Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "Legend of Satoshi Nakamoto | Jill Carlson",
        "description": "Jill Carlson is a cofounder of the Open Money Initiative, a non-profit that researches how money gets used in economically repressed societies. She is also an investor in early stage startups at Slow Ventures. Previously, Jill traded debt and derivatives at Goldman Sachs. She holds a MSc from Magdalen College, Oxford, where she researched financial market implications of bitcoin, and an AB from Harvard, where she studied Classics.\n\nFold App https://use.foldapp.com/r/BITCOINIS\nLibertyX https://libertyx.com/\nOpendime https://www.bitcoinis.com/store\n\nFounded by Russell Okung and George Mekhail. We\u2019re here answering questions for #Bitcoin rookies. Watch #MondayNightBitcoin on 5/18. Get 30k sats when you download Fold use.foldapp.com/r/BITCOINIS",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/0SYTrWNMVJw/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/0SYTrWNMVJw/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/0SYTrWNMVJw/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/0SYTrWNMVJw/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/0SYTrWNMVJw/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98r3U5HIlP2yRhlFSJL3v6x",
        "position": 0,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "0SYTrWNMVJw"
        },
        "videoOwnerChannelTitle": "Bitcoinis_",
        "videoOwnerChannelId": "UCRTvFBdsOQ6WGPonvB7PzTw"
      },
      "contentDetails": {
        "videoId": "0SYTrWNMVJw",
        "videoPublishedAt": "2019-10-31T07:03:10Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "TI41Jfs2ccKDOu7zQkF6StZGzXY",
      "id": "UExJamhmbHVoTmQ5OHIzVTVISWxQMnlSaGxGU0pMM3Y2eC41MjE1MkI0OTQ2QzJGNzNG",
      "snippet": {
        "publishedAt": "2021-11-25T16:38:52Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "[CVPR20 Tutorial] Billion-scale Approximate Nearest Neighbor Search",
        "description": "[CVPR20 Tutotrial] Image Retrieval in the Wild\nhttps://matsui528.github.io/cvpr2020_tutorial_retrieval/\n\nBillion-scale Approximate Nearest Neighbor Search\nYusuke Matsui\n\nslide: https://speakerdeck.com/matsui_528/cvpr20-tutorial-billion-scale-approximate-nearest-neighbor-search",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/SKrHs03i08Q/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/SKrHs03i08Q/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/SKrHs03i08Q/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/SKrHs03i08Q/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/SKrHs03i08Q/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98r3U5HIlP2yRhlFSJL3v6x",
        "position": 1,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "SKrHs03i08Q"
        },
        "videoOwnerChannelTitle": "Yusuke Matsui",
        "videoOwnerChannelId": "UCvS7vZO-_DahzbL0uSrb-5g"
      },
      "contentDetails": {
        "videoId": "SKrHs03i08Q",
        "videoPublishedAt": "2020-06-19T19:19:22Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "3gxBxMMD9Q8bbjbR_qjkpd8N48M",
      "id": "UExJamhmbHVoTmQ5OHIzVTVISWxQMnlSaGxGU0pMM3Y2eC4yODlGNEE0NkRGMEEzMEQy",
      "snippet": {
        "publishedAt": "2021-11-25T16:38:52Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "Milvus Community Conf 2020_Facebook AI Research: An Introduction to Faiss and Similarity Search",
        "description": "In this video, Matthijs Douze and Jeff Johnson from Facebook AI Research present their work on similarity search. They discuss the metrics of this task, and what families of techniques are appropriate to strike several tradeoffs in the space of those metrics. Then they present several recent improvements in this domain, with a particular focus on a machine learning technique that improves the conditioning of the problem. They also introduce the Faiss library that bundles together many of those techniques.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/Un1Q92lfhPM/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/Un1Q92lfhPM/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/Un1Q92lfhPM/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/Un1Q92lfhPM/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/Un1Q92lfhPM/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98r3U5HIlP2yRhlFSJL3v6x",
        "position": 2,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "Un1Q92lfhPM"
        },
        "videoOwnerChannelTitle": "Zilliz Channel",
        "videoOwnerChannelId": "UCMCo_F7pKjMHBlfyxwOPw-g"
      },
      "contentDetails": {
        "videoId": "Un1Q92lfhPM",
        "videoPublishedAt": "2020-11-02T09:12:07Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "yJkspKdPmqO8I8wBgykdx3lLWDU",
      "id": "UExJamhmbHVoTmQ5OHIzVTVISWxQMnlSaGxGU0pMM3Y2eC41MzJCQjBCNDIyRkJDN0VD",
      "snippet": {
        "publishedAt": "2021-11-26T14:52:25Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "Introduction to ipywidgets | Jupyter Widgets Introduction | What is ipywidgets with an example",
        "description": "In this tutorial video, we'll learn about ipywidgets, a Python library for building interactive HTML widgets for your Jupyter browser.  We begin by answering, \"What is ipywidgets?\"  Also called Jupyter Widgets or Widgets for short, ipywidgets help students with interactive learning and help researchers understand their model parameters.  We then talk about how you can install ipywidgets and get started importing the library and building a basic integer slider (IntSlider).  I show you how to display the widget and various properties of the IntSlider.  Next we move on to an example from my YouTube channel: a KDE bandwidth widget.  I show you how to link up your seaborn or matplotlib figures with ipywidgets to explore various parameters with a Jupyter Widgets interactive plot.  We end by talking about other widgets you can make, such as check boxes, drop downs, date pickers, animations, and more.\n\n0:00 Introduction\n0:22 What is ipywidgets?\n0:50 Installing ipywidgets\n1:09 ipywidgets IntSlider Basics\n3:17 KDE Widget Example\n7:36 Other Widgets\n\nGitHub CODE:\nhttps://github.com/kimfetti/Videos/blob/master/ipywidgets/01_ipywidgets_intro.ipynb\n\nipywidgets DOCUMENTATION:\nhttps://ipywidgets.readthedocs.io/en/latest/\n\nRelated VIDEOS:\nSeaborn KDEplot - https://youtu.be/DCgPRaIDYXA\nMatplotlib change axes LIMITS - https://youtu.be/tPUqnGjhwEg\n\n#dataviz #ipywidgets",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/wb6k_T4rKBQ/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/wb6k_T4rKBQ/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/wb6k_T4rKBQ/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/wb6k_T4rKBQ/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/wb6k_T4rKBQ/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98r3U5HIlP2yRhlFSJL3v6x",
        "position": 3,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "wb6k_T4rKBQ"
        },
        "videoOwnerChannelTitle": "Kimberly Fessel",
        "videoOwnerChannelId": "UCirb0k3PnuQnRjh8tTJHJuA"
      },
      "contentDetails": {
        "videoId": "wb6k_T4rKBQ",
        "videoPublishedAt": "2021-05-03T13:00:18Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "ZdaTZEMr1JpYDQc3ANNPc2UiNII",
      "id": "UExJamhmbHVoTmQ5OHIzVTVISWxQMnlSaGxGU0pMM3Y2eC41NkI0NEY2RDEwNTU3Q0M2",
      "snippet": {
        "publishedAt": "2021-11-25T16:38:52Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "Faiss - Introduction to Similarity Search",
        "description": "Full Similarity Search Playlist:\nhttps://www.youtube.com/watch?v=AY62z7HrghY&list=PLIUOU7oqGTLhlWpTz4NnuT3FekouIVlqc&index=1\n\nFacebook AI Similarity Search (FAISS) is one of the most popular implementations of efficient similarity search, but what is it\u200a-\u200aand how can we use it?\n\nWhat is it that makes FAISS special? How do we make the best use of this incredible tool?\n\nFortunately, it's a brilliantly simple process to get started with. And in this video, we'll explore some of the options FAISS provides, how they work, and\u200a-\u200amost importantly\u200a-\u200ahow FAISS can make our semantic search faster.\n\n\ud83c\udf32 Pinecone Article:\nhttps://www.pinecone.io/learn/faiss-tutorial/\n\n\ud83d\udcca Data:\nhttps://github.com/jamescalam/data/tree/main/sentence_embeddings_15K\n\nNotebook:\nhttps://gist.github.com/jamescalam/7117aa92235a7f52141ad0654795aa48\n\n\ud83e\udd16 70% Discount on the NLP With Transformers in Python course:\nhttps://bit.ly/3DFvvY5\n\n\ud83c\udf89 Sign-up For New Articles Every Week on Medium!\nhttps://medium.com/@jamescalam/membership\n\n\ud83d\udc7e Discord\nhttps://discord.gg/c5QtDB9RAP\n\nMining Massive Datasets Book (Similarity Search):\n\ud83d\udcda https://amzn.to/3CC0zrc (3rd ed)\n\ud83d\udcda https://amzn.to/3AtHSnV (1st ed, cheaper)\n\n\ud83d\udd79\ufe0f Free AI-Powered Code Refactoring with Sourcery: \nhttps://sourcery.ai/?utm_source=YouTub&utm_campaign=JBriggs&utm_medium=aff",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/sKyvsdEv6rk/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/sKyvsdEv6rk/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/sKyvsdEv6rk/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/sKyvsdEv6rk/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/sKyvsdEv6rk/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98r3U5HIlP2yRhlFSJL3v6x",
        "position": 4,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "sKyvsdEv6rk"
        },
        "videoOwnerChannelTitle": "James Briggs",
        "videoOwnerChannelId": "UCv83tO5cePwHMt1952IVVHw"
      },
      "contentDetails": {
        "videoId": "sKyvsdEv6rk",
        "videoPublishedAt": "2021-07-13T15:00:19Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "8nOqmcE1O-FeXnHTFRlA92FPECM",
      "id": "UExJamhmbHVoTmQ5OHIzVTVISWxQMnlSaGxGU0pMM3Y2eC4wOTA3OTZBNzVEMTUzOTMy",
      "snippet": {
        "publishedAt": "2021-11-25T16:38:52Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "Choosing Indexes for Similarity Search (Faiss in Python)",
        "description": "Facebook AI Similarity Search (Faiss) is a game-changer in the world of search. It allows us to efficiently search a huge range of media, from GIFs to articles\u200a-\u200awith incredible accuracy in sub-second timescales for billion+ size datasets.\n\nThe success in Faiss is due to many reasons. One of those, in particular, is its flexibility. Faiss recognizes that there is no 'one-size-fits-all' in similarity search.\n\nInstead, Faiss comes with a wide range of search indexes\u200a-\u200awhich we can mix and match to our choosing.\n\nHowever, this great flexibility produces a question\u200a-\u200ahow do we know which size fits our use case?\n\nWhich index do we choose? Should we use multiple indexes, or is one enough?\n\nThis video will explore the pros and cons of some of the most important indexes\u200a-\u200aFlat, LSH, HNSW, and IVF. We will learn how we decide which to use and the impact of parameters in each index to build some of the best indexes for semantic search.\n\n\ud83c\udf32 Pinecone Article:\nhttps://www.pinecone.io/learn/vector-indexes/\n\n\ud83c\udf89 Sign-up For New Articles Every Week on Medium!\nhttps://medium.com/@jamescalam/membership\n\nDownload script for Sift1M dataset:\nhttps://gist.github.com/jamescalam/a09a16c17b677f2cf9c019114711f3bf\n\nSimilarity Search Series:\nhttps://www.youtube.com/playlist?list=PLIUOU7oqGTLhlWpTz4NnuT3FekouIVlqc\n\n\ud83e\udd16 70% Discount on the NLP With Transformers in Python course:\nhttps://bit.ly/3DFvvY5\n\n\ud83d\udc7e Discord\nhttps://discord.gg/c5QtDB9RAP\n\nMining Massive Datasets Book (Similarity Search):\n\ud83d\udcda https://amzn.to/3CC0zrc (3rd ed)\n\ud83d\udcda https://amzn.to/3AtHSnV (1st ed, cheaper)\n\n\ud83d\udd79\ufe0f Free AI-Powered Code Refactoring with Sourcery: \nhttps://sourcery.ai/?utm_source=YouTub&utm_campaign=JBriggs&utm_medium=aff",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/B7wmo_NImgM/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/B7wmo_NImgM/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/B7wmo_NImgM/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/B7wmo_NImgM/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/B7wmo_NImgM/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98r3U5HIlP2yRhlFSJL3v6x",
        "position": 5,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "B7wmo_NImgM"
        },
        "videoOwnerChannelTitle": "James Briggs",
        "videoOwnerChannelId": "UCv83tO5cePwHMt1952IVVHw"
      },
      "contentDetails": {
        "videoId": "B7wmo_NImgM",
        "videoPublishedAt": "2021-08-09T15:04:10Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "gSGyV2fClbrr3l3a-iEXb4mkLCA",
      "id": "UExJamhmbHVoTmQ5OHIzVTVISWxQMnlSaGxGU0pMM3Y2eC4xMkVGQjNCMUM1N0RFNEUx",
      "snippet": {
        "publishedAt": "2021-11-25T16:38:52Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "Faiss - Vector Compression with PQ and IVFPQ (in Python)",
        "description": "So far we\u2019ve worked through the logic behind a simple, readable implementation of product quantization (PQ) in Python for semantic search. Realistically we wouldn\u2019t use this because it is not optimized and we already have excellent implementations elsewhere. Instead, we would use a library like Faiss (Facebook AI Similarity Search) \u2014 or a production-ready service like Pinecone.\n\nWe\u2019ll take a look at how we can build a PQ index in Faiss, and we\u2019ll even take a look at combining PQ with an Inverted File (IVF) step to improve search speed.\n\nBefore we start, we need to get data. We will be using the Sift1M dataset. It can be downloaded and opened using this script:\nhttps://gist.github.com/jamescalam/928a374b85daffa49a565f3dc18d059c#file-get_sift1m-ipynb\n\n\ud83c\udf32 Pinecone article:\nhttps://www.pinecone.io/learn/product-quantization/\n\n\ud83e\udd16 70% Discount on the NLP With Transformers in Python course:\nhttps://bit.ly/3DFvvY5\n\n\ud83c\udf89 Sign-up For New Articles Every Week on Medium!\nhttps://medium.com/@jamescalam/membership\n\n\ud83d\udc7e Discord:\nhttps://discord.gg/c5QtDB9RAP\n\n\ud83d\udd79\ufe0f Free AI-Powered Code Refactoring with Sourcery: \nhttps://sourcery.ai/?utm_source=YouTub&utm_campaign=JBriggs&utm_medium=aff",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/BMYBwbkbVec/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/BMYBwbkbVec/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/BMYBwbkbVec/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/BMYBwbkbVec/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/BMYBwbkbVec/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98r3U5HIlP2yRhlFSJL3v6x",
        "position": 6,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "BMYBwbkbVec"
        },
        "videoOwnerChannelTitle": "James Briggs",
        "videoOwnerChannelId": "UCv83tO5cePwHMt1952IVVHw"
      },
      "contentDetails": {
        "videoId": "BMYBwbkbVec",
        "videoPublishedAt": "2021-08-30T15:30:04Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "vH0KA1NZAAvbDa_kBP63Js6KZCE",
      "id": "UExJamhmbHVoTmQ5OHIzVTVISWxQMnlSaGxGU0pMM3Y2eC4wMTcyMDhGQUE4NTIzM0Y5",
      "snippet": {
        "publishedAt": "2021-11-25T16:38:52Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "HNSW for Vector Search Explained and Implemented with Faiss (Python)",
        "description": "Hierarchical Navigable Small World (HNSW) graphs are among the top-performing indexes for vector similarity search. HNSW is a hugely popular technology that time and time again produces state-of-the-art performance with super-fast search speeds and flawless recall \u2014 HNSW is not to be missed.\n\nDespite being a popular and robust algorithm for approximate nearest neighbors (ANN) searches, understanding how it works is far from easy.\n\nThis video helps demystify HNSW and explains this intelligent algorithm in an easy-to-understand way. Towards the end of the video, we'll look at how to implement HNSW using Faiss and which parameter settings give us the performance we need.\n\n\ud83c\udf32 Pinecone article:\nhttps://www.pinecone.io/learn/hnsw/\n\n\ud83e\udd16 70% Discount on the NLP With Transformers in Python course:\nhttps://bit.ly/3DFvvY5\n\n\ud83c\udf89 Sign-up For New Articles Every Week on Medium!\nhttps://jamescalam.medium.com/subscribe (it's free!)\nhttps://medium.com/@jamescalam/membership\n\n\ud83d\udc7e Discord:\nhttps://discord.gg/c5QtDB9RAP\n\n00:00 Intro\n00:41 Foundations of HNSW\n08:41 How HNSW Works\n16:38 The Basics of HNSW in Faiss\n21:40 How Faiss Builds an HNSW Graph\n26.49 Building the Best HNSW Index\n33:33 Fine-tuning HNSW\n34:30 Outro",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/QvKMwLjdK-s/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/QvKMwLjdK-s/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/QvKMwLjdK-s/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/QvKMwLjdK-s/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/QvKMwLjdK-s/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98r3U5HIlP2yRhlFSJL3v6x",
        "position": 7,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "QvKMwLjdK-s"
        },
        "videoOwnerChannelTitle": "James Briggs",
        "videoOwnerChannelId": "UCv83tO5cePwHMt1952IVVHw"
      },
      "contentDetails": {
        "videoId": "QvKMwLjdK-s",
        "videoPublishedAt": "2021-10-05T13:00:23Z"
      }
    }
  ]
}