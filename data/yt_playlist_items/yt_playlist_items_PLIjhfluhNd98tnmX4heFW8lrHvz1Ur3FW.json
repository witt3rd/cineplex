{
  "_id": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
  "as_of": "2021-12-10 00:21:51.612649",
  "items": [
    {
      "kind": "youtube#playlistItem",
      "etag": "yuopVIDkXWhWTM5Ux9RYEIC9OTk",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy5EREU0QjZERDMzRDBGNTMz",
      "snippet": {
        "publishedAt": "2021-11-26T11:38:24Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "Jeff Garland - C++23 Standard Library Preview - Meeting C++ 2021",
        "description": "Jeff Garland - C++23 Standard Library Preview - Meeting C++ 2021\nSlides: https://slides.meetingcpp.com\nSurvey: https://survey.meetingcpp.com\n\nDespite the pandemic the C++ committee is continuing to work towards C++23. This survey presentation provides students with a broad overview of the changes and new facilities in the C++23 standard library.\n\nThe changes include a major expansion of ranges - including new view types like ~zip~ and algorithms like ~fold~ and ~starts_with~. For i/o there's a number of extensions to ~std::format~ facilities as well as a new i/o stream type, ~span_stream~ that allows for user supplied buffers in for i/o. In containers, we see the addition of ~flat_map~ and ~flat_set~. ~std::stacktrace~ provides a badly needed debugging capability. More ~constexpr~ library facilities include ~type_info~, ~std::variant~ and ~std::optional~. For interfaces with C there are changes for atomics and ~out_ptr~ to help with resource management. For functional programming monadic interfaces on ~optional~ are provided.\n\nFast paced, and chock full of example codes, this tutorial will focus on practical application of the new c++23 standard library facilities. Some of these topics will be covered very briefly, but with pointers in the slides for further study. The tutorial is up to date with the latest working draft will include pointers to current implementations as well as the state of compiler support.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/rTVQe7zVQUw/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/rTVQe7zVQUw/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/rTVQe7zVQUw/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/rTVQe7zVQUw/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/rTVQe7zVQUw/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 0,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "rTVQe7zVQUw"
        },
        "videoOwnerChannelTitle": "Meeting Cpp",
        "videoOwnerChannelId": "UCJpMLydEYA08vusDkq3FmjQ"
      },
      "contentDetails": {
        "videoId": "rTVQe7zVQUw",
        "videoPublishedAt": "2021-11-23T13:38:50Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "sWyRsGsUEQArtabXW9T4S452fcU",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy5CNEFEOUNDRUMzMjVGMjc2",
      "snippet": {
        "publishedAt": "2021-11-24T07:47:43Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "LEARN OPENCV C++ in 4 HOURS | Including 3x Projects | Computer Vision",
        "description": "This is OpenCV C++ course that will teach you everything you need to know to get started. This course is based on my previous OpenCV Python course that now has more than a million views and 98.8% positive feedback. Like before we are going to learn the basics that include Processing images videos webcams and finding shapes colors, humans, and vehicle number plates. We will also have 3 example projects that will cover all the basics we have learned. C++ is an excellent language for implementation and creating real-world products. so having this advanced computer vision skill on your CV will really make it stand out from the competition. And Don't worry if you are a beginner we will go step by step right from the installation up to creating exciting projects, And our main focus will be practical implementation so we will skip all the boring theory stuff.\n\nCourse Link - Code + Files:  \nhttps://www.computervision.zone/courses/opencv-cv/\n\nPremium Courses: \n\u2714\ufe0f Advanced Drone Programming Course:\nhttps://www.computervision.zone/adv-drone-pro-lp/ \n\u2714\ufe0f Learn to Build Computer Vision Mobile Apps:\nhttps://www.computervision.zone/cv-mobile-app-lp/\n\u2714\ufe0f Jetson Nano Premium Course:\nhttps://www.computervision.zone/cv-jetson-nano-lp/\n\nShirts for Coders:\nhttps://bit.ly/3CEipcD\n\nFollow Me:\nDiscord: https://discord.gg/bFVMkzf  \nFacebook: https://www.facebook.com/murtazasworkshop\nInstagram : https://www.instagram.com/murtazasworkshop/\nWebsite: https://www.computervision.zone/\nGithub: https://github.com/murtazahassan\nThingiverse: https://www.thingiverse.com/Murtaza_Hassan/\n\nProduct Links:\nJetson Nano: https://amzn.to/3eY3AWN \nCheap Drone for OpenCV: https://amzn.to/2TZpsJy\nDC Motors + Wheels + Chassis: https://amzn.to/2SCZon3\nDC Motors + Wheels: https://amzn.to/2QeEusw\nArduino UNO: https://amzn.to/2QdKthB\nMotor Driver: https://amzn.to/35grl6x\nBattery: https://amzn.to/2Fadc0c\nRecommend Webcam for Computer Vision: https://amzn.to/2MNtVKZ\nBudget Webcam: https://amzn.to/2ZP47Ug\nRaspberry Pi 4 Best Starter Kit:  https://amzn.to/2YVCEkL\nRaspberry Pi Recommended Battery: https://amzn.to/2C0I9pl\n\n#ComputerVision\n#OpenCV\n#Python\n\nTime Stamps:\n00:00 Intro\n1:24 Introduction to Images\n3:48  Installation - Windows\n11:51 Installation - Mac\n22:05 Chapter 1 - Read Images Videos and Webcams \n35:23 Chapter 2 - Basic Functions\n50:21 Chapter 3 - Resize and Crop \n58:31 Chapter 4 - Drawing Shapes and Text\n01:11:07 Chapter 5 - Warp Perspective \n01:22:40 Chapter 6 - Color Detection\n01:37:17 Chapter 7 - Shapes/Contour Detection\n02:14:52 Chapter8 - Face Detection\n02:22:21 Project 1 - Virtual Painter\n03:02:52 Project 2 - Document Scanner\n03:46:14 Project 3 - License Plate Detector",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/2FYm3GOonhk/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/2FYm3GOonhk/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/2FYm3GOonhk/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/2FYm3GOonhk/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/2FYm3GOonhk/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 1,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "2FYm3GOonhk"
        },
        "videoOwnerChannelTitle": "Murtaza's Workshop - Robotics and AI",
        "videoOwnerChannelId": "UCYUjYU5FveRAscQ8V21w81A"
      },
      "contentDetails": {
        "videoId": "2FYm3GOonhk",
        "videoPublishedAt": "2020-12-13T12:40:28Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "TRnB9zMzM7aDJ5orWLeeLpmYYKM",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy45NDIzMEVBNjk5NTFGRDZC",
      "snippet": {
        "publishedAt": "2021-11-10T07:51:29Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "Build your first multithreaded application - Introduction to multithreading in modern C++",
        "description": "\ud83d\udcb0 If you want a good web hosting, use this link to get 100$ of free credit and try out Linode: https://bit.ly/LinodeFreeCredit\n\nThis video is an introduction to multithreading in modern C++. You will learn what is multi-threading, why is it important, what kind of problems can we solve with multithreading. I'll also explain the difference between multithreading and multitasking, and give you a real-life example of multithreading use.\nThis video contains everything you need to know to learn and start working with threads in modern C++, even if you are a complete beginner.\nIt is a step-by-step tutorial that starts with basic multithreading concepts, but it also encompasses some of the more advanced concepts as well.\n\n\ud83d\udcda Download a free e-Book about modern C++ and Lambda Expressions: https://bit.ly/freeCppE-Book\n\n\u2615 I recently created the option for you to buy me a coffee, so if you enjoy my content and find it useful consider that small gesture of gratitude for all the hard work that I put into these videos. That would mean a lot to me! \u2764\ufe0f\u2764\ufe0f\u2764\ufe0f\nhttps://bit.ly/CodeBeauty_BuyMeACoffee\nOf course, don't feel pressured if you can't, I will continue posting free educational content for you nevertheless. \ud83d\ude07\n\nContents:\n00:00 - What will you learn in this course?\n01:45- Claim your $100 credit gift on Linode\n03:58 - History of multithreading in C++\n04:22 - What is multithreading\n04:37 - Multitasking vs multithreading\n06:47 - Singlethreaded vs Multithreaded application \n11:42 - How to pass a parameter to a thread function\n13:08 - Build your first multithreaded application\n24:02 - Problem with multithreading\n\nFollow me on other platforms:\nInstagram \ud83d\udcf8 - https://www.instagram.com/TrueCodeBeauty\nTwitter \ud83d\udc26- https://twitter.com/TrueCodeBeauty",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/xPqnoB2hjjA/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/xPqnoB2hjjA/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/xPqnoB2hjjA/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/xPqnoB2hjjA/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/xPqnoB2hjjA/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 2,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "xPqnoB2hjjA"
        },
        "videoOwnerChannelTitle": "CodeBeauty",
        "videoOwnerChannelId": "UCl5-BV9aRaeDVohpE4sqJiQ"
      },
      "contentDetails": {
        "videoId": "xPqnoB2hjjA",
        "videoPublishedAt": "2021-10-27T16:20:11Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "-MJKE5e7EA7v7Clan1mWzX1JkFI",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy5CODNEOTFERDNCQjU2ODhE",
      "snippet": {
        "publishedAt": "2021-10-23T07:00:39Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "Meeting C++ online - Andreas Reischuck - Using C++20 coroutines for asynchronous parsers",
        "description": "Meeting C++ online - Andreas Reischuck - Using C++20 coroutines for asynchronous parsers\nhttps://github.com/arBmind/co_parser_livecoding\nJoin Meeting C++ online: https://www.meetup.com/Meeting-Cpp-online",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/u41EhjrqdGc/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/u41EhjrqdGc/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/u41EhjrqdGc/hqdefault.jpg",
            "width": 480,
            "height": 360
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 3,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "u41EhjrqdGc"
        },
        "videoOwnerChannelTitle": "Meeting Cpp",
        "videoOwnerChannelId": "UCJpMLydEYA08vusDkq3FmjQ"
      },
      "contentDetails": {
        "videoId": "u41EhjrqdGc",
        "videoPublishedAt": "2021-10-22T16:30:33Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "v7OMTEljuErXzla96bK-XC_BJpk",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy40QTY5NjQzQkQzMjgwNjhD",
      "snippet": {
        "publishedAt": "2021-10-15T08:18:16Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "Functional Patterns in C++, 3. Async API, Monoid, Monad",
        "description": "The encapsulation of asynchronous API that doesn't lead to inversion of control and spaghetti code. Very natural example of a Monad Pattern. Slides are available at http://fpcomplete.com/wp-content/uploads/2012/09/Functional-Patterns.pdf .",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/ozN6XxsAF84/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/ozN6XxsAF84/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/ozN6XxsAF84/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/ozN6XxsAF84/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/ozN6XxsAF84/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 4,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "ozN6XxsAF84"
        },
        "videoOwnerChannelTitle": "Bartosz Milewski",
        "videoOwnerChannelId": "UC8BtBl8PNgd3vWKtm2yJ7aA"
      },
      "contentDetails": {
        "videoId": "ozN6XxsAF84",
        "videoPublishedAt": "2012-09-24T05:07:38Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "7lHznd9mDbG_nBh6ddTEZgaaEE0",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy5DNTU3ODQ4ODAzMjFERTI1",
      "snippet": {
        "publishedAt": "2021-10-15T08:18:10Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "Functional Patterns in C++, 2. Currying, Applicative",
        "description": "Towards understanding asynchronous interfaces. A little digression to Haskell and the Maybe functor and the explanation of currying. Then I'll show you the Applicative Functor pattern. This is, of course, in preparation for for the asynchronous applicative functor pattern. Slides are available at http://fpcomplete.com/wp-content/uploads/2012/09/Functional-Patterns.pdf .",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/Hx9jojeBj6w/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/Hx9jojeBj6w/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/Hx9jojeBj6w/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/Hx9jojeBj6w/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/Hx9jojeBj6w/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 5,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "Hx9jojeBj6w"
        },
        "videoOwnerChannelTitle": "Bartosz Milewski",
        "videoOwnerChannelId": "UC8BtBl8PNgd3vWKtm2yJ7aA"
      },
      "contentDetails": {
        "videoId": "Hx9jojeBj6w",
        "videoPublishedAt": "2012-09-23T01:38:34Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "LC1alFEVzERXF7x1hjckRuA9Vh8",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy4wMTIyMTBBMTA3RDUxNjlD",
      "snippet": {
        "publishedAt": "2021-10-15T08:18:05Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "Functional Patterns in C++, 1. Functors",
        "description": "Towards understanding asynchronous interfaces. First the introduction to some common functional patterns like Functor, which, surprisingly pops up everywhere. I'll show the example of a uninque_ptr and a vector as Functors. Of course, this is only in preparation for asynchronous functors. Slides are available at http://fpcomplete.com/wp-content/uploads/2012/09/Functional-Patterns.pdf .",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/ph7qt0pkPkc/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/ph7qt0pkPkc/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/ph7qt0pkPkc/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/ph7qt0pkPkc/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/ph7qt0pkPkc/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 6,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "ph7qt0pkPkc"
        },
        "videoOwnerChannelTitle": "Bartosz Milewski",
        "videoOwnerChannelId": "UC8BtBl8PNgd3vWKtm2yJ7aA"
      },
      "contentDetails": {
        "videoId": "ph7qt0pkPkc",
        "videoPublishedAt": "2012-09-21T22:24:55Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "Q9IbRkZalCG_M-EbC7CKQhkF9wE",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy40Q0JERDMxNzcwNTk1M0Y0",
      "snippet": {
        "publishedAt": "2021-10-14T10:33:53Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "Practical constexpr - Jason Turner - Meeting C++ 2017",
        "description": "constexpr has come a long way since C++11. And we know that it is now possible to implement entire constexpr parsers allowing for compile-time parsing of things like JSON values. But what does this mean for every day code? Is it practical to apply constexpr throughout your code base? What cost does this incur or advantage does it provide? We will look at specific examples of applying constexpr throughout the ChaiScript codebase and what impact it had on compile time, runtime and compile size.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/xtf9qkDTrZE/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/xtf9qkDTrZE/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/xtf9qkDTrZE/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/xtf9qkDTrZE/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/xtf9qkDTrZE/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 7,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "xtf9qkDTrZE"
        },
        "videoOwnerChannelTitle": "Meeting Cpp",
        "videoOwnerChannelId": "UCJpMLydEYA08vusDkq3FmjQ"
      },
      "contentDetails": {
        "videoId": "xtf9qkDTrZE",
        "videoPublishedAt": "2018-02-18T14:27:30Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "pjlp5oilL3nmhhlS99Y4XI3dPag",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy40NTBGRDE5MDg2Q0NEODI4",
      "snippet": {
        "publishedAt": "2021-10-14T10:33:43Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "CppCon 2015: Scott Schurr \u201cconstexpr: Introduction\u201d",
        "description": "http://www.Cppcon.org\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015\n\u2014\nI'm excited about constexpr. It's probably my favorite C++11 feature and it's gotten even better with C++14. This talk will introduce constexpr to the uninitiated. We'll start with C++11 and continue into the improvements introduced with C++14. We'll look into useful ways to think about constexpr code. We'll also cover some tips and tricks with writing constexpr code.\n\u2014 \nIf you ask his children, they will tell you that Scott has been writing software since dinosaurs roamed the earth. In 1996 Scott learned C++ by working through the exercises in Stroustrup's TC++PL 2nd edition and he has never looked back. Scott is currently working at Ripple Labs developing open source crypto-financial software. When he's not writing code Scott plays the Chapman Stick, sings rock and roll, and spends time with his lovely wife.\n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/fZjYCQ8dzTc/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/fZjYCQ8dzTc/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/fZjYCQ8dzTc/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/fZjYCQ8dzTc/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/fZjYCQ8dzTc/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 8,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "fZjYCQ8dzTc"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "fZjYCQ8dzTc",
        "videoPublishedAt": "2015-10-09T15:48:37Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "yUj5e4Dx0PtEEKCUEUes9xKzBts",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy42NjBGMkRFNDcwMjM2NzYx",
      "snippet": {
        "publishedAt": "2021-10-14T10:32:15Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "CppCon 2017: Ben Deane & Jason Turner \u201cconstexpr ALL the Things!\u201d",
        "description": "http://CppCon.org\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2017\n\u2014\nconstexpr: in C++11, a curiosity; in C++14, viable for more uses; now with added power, in C++17 will it become an important tool in the programmer's toolkit? \n\nIn this talk we will examine the possibilities and power of constexpr and explore what can (and what should) be done at compile-time with C++17. We'll present techniques for building constexpr data structures and algorithms, and look at what the standard provides and where it can improve. We'll also explore constexpr use of user defined literals for expressive compile-time abstractions. \n\nCompile-time computation offers perhaps the ultimate zero-cost abstraction, and this talk attempts to gauge the power available with C++17 constexpr. \n\u2014 \nBen Deane: Principal Software Engineer, Blizzard Entertainment\n\nBen has been writing games for almost 20 years, and in C++ for most of that. He is currently a Principal Engineer at Blizzard Entertainment where he works on the Battle.net team. He's always looking for useful new techniques in C++, and he likes functional programming.\n\nJason Turner: Developer, Trainer, Speaker\n\nHost of C++Weekly https://www.youtube.com/c/JasonTurner-lefticus, Co-host of CppCast http://cppcast.com, Co-creator and maintainer of the embedded scripting language for C++, ChaiScript http://chaiscript.com, and author and curator of the forkable coding standards document http://cppbestpractices.com. \n\nI'm available for contracting and onsite training.\n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/PJwd4JLYJJY/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/PJwd4JLYJJY/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/PJwd4JLYJJY/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/PJwd4JLYJJY/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/PJwd4JLYJJY/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 9,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "PJwd4JLYJJY"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "PJwd4JLYJJY",
        "videoPublishedAt": "2017-10-05T16:12:11Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "UPRpW_91FcybcxWIJq5_J-KThZc",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy5BNTRGQTE1QjY2NUE5NTAz",
      "snippet": {
        "publishedAt": "2021-10-14T02:11:50Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "C++20 Coroutines - Complete Guide",
        "description": "A complete guide for C++20 coroutines. From a simple coroutine to writing custom awaitable types. Coroutines allow you to write asynchronous code in a very natural way that mimics normal functions.\n\nIf you prefer reading, this video is also available as an article: https://itnext.io/c-20-coroutines-complete-guide-7c3fc08db89d\n\nGitHub repository with the examples: https://github.com/HappyCerberus/article-cpp20-coroutines",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/w-dmOHhBX9o/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/w-dmOHhBX9o/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/w-dmOHhBX9o/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/w-dmOHhBX9o/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/w-dmOHhBX9o/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 10,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "w-dmOHhBX9o"
        },
        "videoOwnerChannelTitle": "\u0160imon T\u00f3th",
        "videoOwnerChannelId": "UCpSqMoRM5sewrjtI1RkDKxg"
      },
      "contentDetails": {
        "videoId": "w-dmOHhBX9o",
        "videoPublishedAt": "2021-10-13T11:49:21Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "IwnDPp70pkQT-4c6mQLBo4kk1Ws",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy5FOTE3RTBFMjNFMDNEM0Yz",
      "snippet": {
        "publishedAt": "2021-10-10T20:11:27Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "CppCast Episode 319: Joedb with Remi Coulom",
        "description": "Rob and Jason are joined by Remi Coulom from Kayufu. They first discuss another blog posts about the ongoing ABI problems in C++ and another on common mistakes with comparison functions. Then they talk to Remi about Joedb, the Journal-Only Embedded Database.\n\n\nFull show notes available at: https://cppcast.com/joedb/",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/WorpJykhr1Q/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/WorpJykhr1Q/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/WorpJykhr1Q/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/WorpJykhr1Q/sddefault.jpg",
            "width": 640,
            "height": 480
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 11,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "WorpJykhr1Q"
        },
        "videoOwnerChannelTitle": "CppCast",
        "videoOwnerChannelId": "UCuCjADS4u3uJDTqUaG0H9dA"
      },
      "contentDetails": {
        "videoId": "WorpJykhr1Q",
        "videoPublishedAt": "2021-10-10T15:49:45Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "AYDViuWcygEB-Qa6cuumR-FcyYE",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy5FMjFERkYxMjI2NjkyMjg5",
      "snippet": {
        "publishedAt": "2021-10-10T20:11:15Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "Core C++ 2021 :: Ownership model in C++ and beyond",
        "description": "By Inbal Levi, presented at Core C++ 2021 conference.\n\nIn this talk we will explore the design of memory management in modern C++, and beyond.\n\nWe will overview the dynamic memory management model in other languages, and scan what are the possible approaches.\n\nUnderstanding the alternatives, we will overview the tools for managing dynamic memory in modern C++.\n\nAt the end of the talk - you'll have a complete comprehension of dynamic memory management in software applications in general, and the toolbox for using it correctly in C++.\n\n=====\n\nInbal Levi is a software engineer who cares about performance and optimizations as well as great design and abstraction, which makes her a C++ enthusiast. She's a director at the Isocpp Foundation, a co-chair of Library Evolution Work Group, the chair of SG9 (Ranges Group), and the head of the ISO C++ Israeli NB. She's also one of the organizers of CoreCpp meetup & Conference.\n\nIn addition to C++, she's also enthusiastic about mathematics, science, and airplanes.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/MU8X9mqjKFE/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/MU8X9mqjKFE/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/MU8X9mqjKFE/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/MU8X9mqjKFE/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/MU8X9mqjKFE/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 12,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "MU8X9mqjKFE"
        },
        "videoOwnerChannelTitle": "CoreCppIL",
        "videoOwnerChannelId": "UCE14XYFaK1fDTnOTqlOFrrQ"
      },
      "contentDetails": {
        "videoId": "MU8X9mqjKFE",
        "videoPublishedAt": "2021-09-22T20:40:31Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "b2o2BD5NoOzXV-cGMjk9t7TPOp8",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy4zMkY2MjA3RDJERTkxNjkz",
      "snippet": {
        "publishedAt": "2021-10-09T15:33:09Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "How to write a parser in C++ (Part 1)",
        "description": "Writing a tokenizer and start of actual parsing. Source code: https://github.com/uliwitness/simpleparser Apologies, I only realized that the facecam covers the program output when it is run after I had already recorded two episodes.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/Ql4sG1Aem-I/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/Ql4sG1Aem-I/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/Ql4sG1Aem-I/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/Ql4sG1Aem-I/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/Ql4sG1Aem-I/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 13,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "Ql4sG1Aem-I"
        },
        "videoOwnerChannelTitle": "uliwitness",
        "videoOwnerChannelId": "UCt2y57v8uULftzKJlW0XrRQ"
      },
      "contentDetails": {
        "videoId": "Ql4sG1Aem-I",
        "videoPublishedAt": "2020-10-31T11:23:58Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "F3UFmvHisUPoyGxWBupN13k7a0E",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy5DNUEzOUFFNkIyOUUzOTRC",
      "snippet": {
        "publishedAt": "2021-10-09T15:33:00Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "How to write a parser in C++ (Part 3)",
        "description": "We delve into expression parsing and end this series with a rambling outlook over what you would have to do once you have a parser. Source code: https://github.com/uliwitness/simpleparser",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/bc5D6igPbuU/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/bc5D6igPbuU/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/bc5D6igPbuU/hqdefault.jpg",
            "width": 480,
            "height": 360
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 14,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "bc5D6igPbuU"
        },
        "videoOwnerChannelTitle": "uliwitness",
        "videoOwnerChannelId": "UCt2y57v8uULftzKJlW0XrRQ"
      },
      "contentDetails": {
        "videoId": "bc5D6igPbuU",
        "videoPublishedAt": "2020-11-03T17:06:40Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "P35vuQbhnbR1XkrrPzT9kYfn2gs",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy4xRjE1NzQ4MjRCMUNFRDdB",
      "snippet": {
        "publishedAt": "2021-10-09T15:32:50Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "How to write a parser in C++ (Part 2)",
        "description": "Now we actually get to parsing argument lists and the statements themselves. Source code: https://github.com/uliwitness/simpleparser Apologies, I only just realized that the facecam covers the program output when it is run.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/cCUGM6j4S4o/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/cCUGM6j4S4o/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/cCUGM6j4S4o/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/cCUGM6j4S4o/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/cCUGM6j4S4o/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 15,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "cCUGM6j4S4o"
        },
        "videoOwnerChannelTitle": "uliwitness",
        "videoOwnerChannelId": "UCt2y57v8uULftzKJlW0XrRQ"
      },
      "contentDetails": {
        "videoId": "cCUGM6j4S4o",
        "videoPublishedAt": "2020-10-31T13:45:39Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "NOUoIZVF-aHvEE02LPnqOxITOAc",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy5EQTdFNDU3M0Y3MTM1QjlG",
      "snippet": {
        "publishedAt": "2021-10-08T11:03:05Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "CppCon 2018: Titus Winters \u201cModern C++ Design (part 2 of 2)\u201d",
        "description": "http://CppCon.org\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2018\n\u2014\nThe old rules for C++API design are due for an update - we have made ad hoc changes to design principles in the standard library, but haven\u2019t really written down the new ideas. Parameter passing and API design for free functions/member functions is due for a general update, particularly as a result of rvalue-references and reference qualification. How do we pass non-owning references? How do we sink a T? How do we express \u201cmaybe move\u201d APIs? When do we want reference-qualified overload sets? What does an rvalue-reference qualified non-overloaded method mean? How do we express call once semantics? \n\nFor types, our consistency in producing Regular types has weakened in recent C++ releases with types like unique_ptr (move-only) and string_view (reference semantics). These classes of design that have shown themselves to be valuable, but certainly surprising at first. As we should not continue to extend the set of type designs arbitrarily, this is a good time to look at type design in the modern C++ era and narrow down the set of designs that are generally favored. This talk will focus on modern C++ design from small (choice of passing by value or reference) to large (Regular types, reference types, move-only types, etc). We will also introduce a taxonomy of type properties as a means to discuss known-good type design families. \n\nWe will also dive into the discussion of whether Regular design covers all good design, or whether there is more to the story.\n\u2014 \nTitus Winters, Google\nC++ Codebase Cultivator\n\nTitus Winters has spent the past 6 years working on Google's core C++ libraries. He's particularly interested in issues of large scale software engineer and codebase maintenance: how do we keep a codebase of over 100M lines of code consistent and flexible for the next decade? Along the way he has helped Google teams pioneer techniques to perform automated code transformations on a massive scale, and helps maintain the Google C++ Style Guide.\n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com *-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/tn7oVNrPM8I/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/tn7oVNrPM8I/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/tn7oVNrPM8I/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/tn7oVNrPM8I/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/tn7oVNrPM8I/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 16,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "tn7oVNrPM8I"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "tn7oVNrPM8I",
        "videoPublishedAt": "2018-10-23T02:17:36Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "V_Qah2XPxrgbB77eJLlcozbJYVc",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy4wNjIzRDA1OTQ2M0UyODEw",
      "snippet": {
        "publishedAt": "2021-10-08T09:02:39Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "CppCon 2014: Walter E. Brown \"Modern Template Metaprogramming: A Compendium, Part II\"",
        "description": "http://www.cppcon.org\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2014\n--\nTemplate metaprogramming has become an important part of a C++ programmer's toolkit. This talk will demonstrate state-of-the-art metaprogramming techniques, applying each to obtain representative implementations of selected standard library facilities.\n\nAlong the way, we will look at void_t, a recently-proposed, extremely simple new  type_traits  candidate whose use has been described by one expert as \"highly advanced (and elegant), and surprising even to experienced template metaprogrammers.\"\n--\nWith broad experience in industry, academia, consulting, and research, Dr. Walter E. Brown has been a C++ programmer for over thirty years, joining the C++ standards effort in 2000. Among numerous other contributions, he is responsible for introducing such now-standard C++ library features as cbegin/cend and common_type as well as headers  random  and  ratio  , and has significantly impacted such core language features as alias templates, contextual conversions, and variable templates. He conceived and served as project editor for the International Standard on Special Mathematical Functions in C++.\n\nWhen not playing with his grandchildren, Dr. Brown is an Emeritus participant in the C++ standards process, with several more core and library proposals under consideration. He was recently appointed an associate project editor for the C++ standard itself.\n--\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/a0FliKwcwXE/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/a0FliKwcwXE/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/a0FliKwcwXE/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/a0FliKwcwXE/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/a0FliKwcwXE/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 17,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "a0FliKwcwXE"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "a0FliKwcwXE",
        "videoPublishedAt": "2014-10-18T22:08:20Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "9sKKwBxqj_JQ8yXKtCOeAgNZdv8",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy4wQjA4QkVEQ0RFREIzMjFC",
      "snippet": {
        "publishedAt": "2021-10-08T09:02:04Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "CppCon 2018: Titus Winters \u201cModern C++ Design (part 1 of 2)\u201d",
        "description": "http://CppCon.org\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2018\n\u2014\nThe old rules for C++API design are due for an update - we have made ad hoc changes to design principles in the standard library, but haven\u2019t really written down the new ideas. Parameter passing and API design for free functions/member functions is due for a general update, particularly as a result of rvalue-references and reference qualification. How do we pass non-owning references? How do we sink a T? How do we express \u201cmaybe move\u201d APIs? When do we want reference-qualified overload sets? What does an rvalue-reference qualified non-overloaded method mean? How do we express call once semantics? \n\nFor types, our consistency in producing Regular types has weakened in recent C++ releases with types like unique_ptr (move-only) and string_view (reference semantics). These classes of design that have shown themselves to be valuable, but certainly surprising at first. As we should not continue to extend the set of type designs arbitrarily, this is a good time to look at type design in the modern C++ era and narrow down the set of designs that are generally favored. This talk will focus on modern C++ design from small (choice of passing by value or reference) to large (Regular types, reference types, move-only types, etc). We will also introduce a taxonomy of type properties as a means to discuss known-good type design families. \n\nWe will also dive into the discussion of whether Regular design covers all good design, or whether there is more to the story.\n\u2014 \nTitus Winters, Google\nC++ Codebase Cultivator\n\nTitus Winters has spent the past 6 years working on Google's core C++ libraries. He's particularly interested in issues of large scale software engineer and codebase maintenance: how do we keep a codebase of over 100M lines of code consistent and flexible for the next decade? Along the way he has helped Google teams pioneer techniques to perform automated code transformations on a massive scale, and helps maintain the Google C++ Style Guide.\n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/xTdeZ4MxbKo/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/xTdeZ4MxbKo/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/xTdeZ4MxbKo/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/xTdeZ4MxbKo/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/xTdeZ4MxbKo/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 18,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "xTdeZ4MxbKo"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "xTdeZ4MxbKo",
        "videoPublishedAt": "2018-10-22T07:00:03Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "bby-wozXYmYe7I7fzJPtFLHREcc",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy41QTQ4QTIyM0Y1RTBGMUNE",
      "snippet": {
        "publishedAt": "2021-10-08T09:01:12Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "CppCon 2014: Walter E. Brown \"Modern Template Metaprogramming: A Compendium, Part I\"",
        "description": "http://www.cppcon.org\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2014\n--\nTemplate metaprogramming has become an important part of a C++ programmer's toolkit. This talk will demonstrate state-of-the-art metaprogramming techniques, applying each to obtain representative implementations of selected standard library facilities.\n\nAlong the way, we will look at void_t, a recently-proposed, extremely simple new new  type_traits  candidate whose use has been described by one expert as \"highly advanced (and elegant), and surprising even to experienced template metaprogrammers.\"\n--\nWith broad experience in industry, academia, consulting, and research, Dr. Walter E. Brown has been a C++ programmer for over thirty years, joining the C++ standards effort in 2000. Among numerous other contributions, he is responsible for introducing such now-standard C++ library features as cbegin/cend and common_type as well as headers  random  and  ratio  , and has significantly impacted such core language features as alias templates, contextual conversions, and variable templates. He conceived and served as project editor for the International Standard on Special Mathematical Functions in C++.\n\nWhen not playing with his grandchildren, Dr. Brown is an Emeritus participant in the C++ standards process, with several more core and library proposals under consideration. He was recently appointed an associate project editor for the C++ standard itself.\n--\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/Am2is2QCvxY/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/Am2is2QCvxY/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/Am2is2QCvxY/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/Am2is2QCvxY/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/Am2is2QCvxY/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 19,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "Am2is2QCvxY"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "Am2is2QCvxY",
        "videoPublishedAt": "2014-10-18T02:03:10Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "YMw-ChLDLtk_176BFJHc80ThkVk",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy5CRjBFOTUzQTE4Mjg3RUJF",
      "snippet": {
        "publishedAt": "2021-10-08T08:58:11Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "Template Metaprogramming: Type Traits (part 1 of 2) - Jody Hagins - CppCon 2020",
        "description": "PART 2: https://youtu.be/dLZcocFOb5Q\n\nhttps://cppcon.org/\nhttps://github.com/CppCon/CppCon2020/blob/main/Presentations/template_metaprogramming_type_traits/template_metaprogramming_type_traits__jody_hagins__cppcon_2020.pdf\n---\nTemplate metaprogramming is a vast subject, but there are a small number of basic fundamental idioms that are used over and over. Mastery of these idioms will help in reading, writing, and using modern C++ code. The type traits that come as part of the standard library are incredibly useful, but at times can be thought of as some form of dark magic.\n\nIn this tutorial, we will explore some of the fundamental idioms of template metaprogramming by implementing a good portion of the type traits from the standard library. In so doing, attendees will come away with a solid understanding of how to apply the fundamental template metaprogramming idioms to solve problems including, but not limited to, standard type traits.\n\n---\nJody Hagins first compiled \"C++\" code in 1984, and wrote a specialized LisP editor using Zortech C++ for senior project in 1988. However, he didn't truly start programming in C++ until 1992, when he read The Greatest C++ Book Ever Written, \"Advanced C++ Programming Styles and Idioms\" by Jim Coplien. That book, combined with cfront, which generated C code from C++ source, gave him the joyful task of writing SVr4 Streams drivers in C++. Ever since, he has been hooked on writing C++ code for kernel modules, large telephony applications, and, since the late 1990s, applications in what is now known as the high frequency trading industry.\n\n---\nStreamed & Edited by Digital Medium Ltd - events.digital-medium.co.uk\nevents@digital-medium.co.uk \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/tiAVWcjIF6o/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/tiAVWcjIF6o/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/tiAVWcjIF6o/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/tiAVWcjIF6o/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/tiAVWcjIF6o/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 20,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "tiAVWcjIF6o"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "tiAVWcjIF6o",
        "videoPublishedAt": "2020-09-23T03:30:10Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "SQYntpUGJnbXAPJMrFSWAWpMS_U",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy5ENUI5OTFCQkYxNDUxQjQ3",
      "snippet": {
        "publishedAt": "2021-10-08T08:58:00Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "Template Metaprogramming: Type Traits (part 2 of 2) - Jody Hagins - CppCon 2020",
        "description": "https://cppcon.org/\nhttps://github.com/CppCon/CppCon2020/blob/main/Presentations/template_metaprogramming_type_traits/template_metaprogramming_type_traits__jody_hagins__cppcon_2020.pdf\n\nWatch Part 1: https://youtu.be/tiAVWcjIF6o\n---\nPART 2/2 - This talk experienced some latency issues, but the slides and audio are mostly unaffected.\n\nTemplate metaprogramming is a vast subject, but there are a small number of basic fundamental idioms that are used over and over. Mastery of these idioms will help in reading, writing, and using modern C++ code. The type traits that come as part of the standard library are incredibly useful, but at times can be thought of as some form of dark magic.\n\nIn this tutorial, we will explore some of the fundamental idioms of template metaprogramming by implementing a good portion of the type traits from the standard library. In so doing, attendees will come away with a solid understanding of how to apply the fundamental template metaprogramming idioms to solve problems including, but not limited to, standard type traits.\n\n---\nJody Hagins first compiled \"C++\" code in 1984, and wrote a specialized LisP editor using Zortech C++ for senior project in 1988. However, he didn't truly start programming in C++ until 1992, when he read The Greatest C++ Book Ever Written, \"Advanced C++ Programming Styles and Idioms\" by Jim Coplien. That book, combined with cfront, which generated C code from C++ source, gave him the joyful task of writing SVr4 Streams drivers in C++. Ever since, he has been hooked on writing C++ code for kernel modules, large telephony applications, and, since the late 1990s, applications in what is now known as the high frequency trading industry.\n\n---\nStreamed & Edited by Digital Medium Ltd - events.digital-medium.co.uk\nevents@digital-medium.co.uk \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/dLZcocFOb5Q/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/dLZcocFOb5Q/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/dLZcocFOb5Q/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/dLZcocFOb5Q/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/dLZcocFOb5Q/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 21,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "dLZcocFOb5Q"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "dLZcocFOb5Q",
        "videoPublishedAt": "2020-09-23T10:00:12Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "0Y9C4Mw28YcnuXvGwhRlF6EIOoE",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy5GN0EwRkMxQTJGMTFCNDc1",
      "snippet": {
        "publishedAt": "2021-10-08T08:53:05Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "A Physical Units Library For the Next C++ - Mateusz Pusz - CppCon 2020",
        "description": "https://cppcon.org/\nhttps://github.com/CppCon/CppCon2020/blob/main/Presentations/a_physical_units_library_for_the_next_cpp/a_physical_units_library_for_the_next_cpp__mateusz_pusz__cppcon_2020.pdf\n---\n\nDuring CppCon 2019 Mateusz provided an overview of current solutions on the market as well as challenges of implementing a modern C++ physical units library. This year's talk will focus on 'mp-units', the library that was developed by Mateusz and contributors, and which is proposed for C++ standardization. During the tutorial, we will get familiar with the building blocks of the library's framework and its most important concepts. Numerous code examples will present how to use and solve real-life problems with the library. The audience will learn how easy it is to extend it with new units, dimensions, or even whole new systems of quantities. Last but not least Mateusz will provide a fair comparison of how well this library performs in comparison to other products on the market.\n\n---\nA software architect, principal engineer, and security champion with more than 15 years of experience in designing, writing, and maintaining C++ code for fun and living. A trainer with 10 years of C++ teaching experience, consultant, conference speaker, and evangelist. His main areas of interest and expertise are Modern C++, code performance, low latency, safety, and maintainability.\n\nMateusz worked at Intel for 13 years, and now he is a Principal Software Engineer and the head of the C++ Competency Center at EPAM Systems. He is also a founder of Train IT that provides dedicated C++ trainings and consultant services to corporations around the world.\n\nMateusz is a contributor and an active voting member of the ISO C++ Committee (WG21) where, together with the best C++ experts in the world, he shapes the future of the C++ language. He is also a co-chair of WG21 Study Group 14 (SG14) responsible for driving performance and low latency subjects in the Committee. Recently also joined MISRA to help make self-driving cars safer.\n\n---\nStreamed & Edited by Digital Medium Ltd - events.digital-medium.co.uk\nevents@digital-medium.co.uk \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/7dExYGSOJzo/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/7dExYGSOJzo/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/7dExYGSOJzo/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/7dExYGSOJzo/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/7dExYGSOJzo/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 22,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "7dExYGSOJzo"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "7dExYGSOJzo",
        "videoPublishedAt": "2020-09-26T03:30:12Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "liZ7KJqWDqHNT_N5CqQqs3Z2jX0",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy43RjdBQTMwNUUwRTA1QkE3",
      "snippet": {
        "publishedAt": "2021-10-08T06:10:45Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "C++20 Modules - A complete guide",
        "description": "In this video, we will go over one of the core features of C++20, C++ Modules.\n\nCompilers and build systems are slowly starting to support C++20 modules. Perfect time for you to read this guide and benefit from the massive compilation speedups. This video reflects the state as of September 2021.\n\n#cplusplus #programming #coding \n\nThis video is also available as an article: https://itnext.io/c-20-modules-complete-guide-ae741ddbae3d",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/WRCwciJ5MTE/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/WRCwciJ5MTE/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/WRCwciJ5MTE/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/WRCwciJ5MTE/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/WRCwciJ5MTE/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 23,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "WRCwciJ5MTE"
        },
        "videoOwnerChannelTitle": "\u0160imon T\u00f3th",
        "videoOwnerChannelId": "UCpSqMoRM5sewrjtI1RkDKxg"
      },
      "contentDetails": {
        "videoId": "WRCwciJ5MTE",
        "videoPublishedAt": "2021-09-07T18:00:17Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "p9_jiu_VTa_m5B9Jb8LSHR51ML4",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy5CMDk1Q0MxREYyOTVEOTZF",
      "snippet": {
        "publishedAt": "2021-10-08T06:10:34Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "C++20 Ranges in Practice - Tristan Brindle - CppCon 2020",
        "description": "https://cppcon.org/\nhttps://github.com/CppCon/CppCon2020\n---\nAmong the many new additions to C++20 are Ranges, a modern revision of the STL offering updated algorithms and new \u201cviews\u201d with lazy evaluation.\n\nIn this example-based talk we\u2019ll work through several practical demonstrations of how the new Ranges functionality may be used to solve everyday problems concisely, elegantly and efficiently. In addition, we\u2019ll offer tips on how to avoid common errors in your Ranges code, and demonstrate a couple of useful utility functions which you can drop into your codebase today.\n\n---\nTristan Brindle\nC++ London Uni\n\n---\nStreamed & Edited by Digital Medium Ltd - events.digital-medium.co.uk\nevents@digital-medium.co.uk \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/d_E-VLyUnzc/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/d_E-VLyUnzc/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/d_E-VLyUnzc/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/d_E-VLyUnzc/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/d_E-VLyUnzc/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 24,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "d_E-VLyUnzc"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "d_E-VLyUnzc",
        "videoPublishedAt": "2020-10-08T09:30:09Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "wYXliCntVsxdCbr1HLUH_EzTga4",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy44NzQ1OTI1OUFFM0NFRTc5",
      "snippet": {
        "publishedAt": "2021-10-07T08:44:57Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "CppCon 2016: John Lakos \u201cAdvanced Levelization Techniques (part 1 of 3)\"",
        "description": "http://CppCon.org\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016\n\u2014\nDeveloping a large-scale software system in C++ requires more than just a sound understanding of the logical design issues covered in most books on C++ programming. To be successful, one also needs a grasp of physical design concepts that, while closely tied to the technical aspects of development, include a dimension with which even expert software developers may have little or no experience. In this talk we begin by briefly reviewing the basics of physical design. We then present a variety of levelization and Insulation techniques, and apply them in present-day, real-word examples to avoid cyclic, excessive, or otherwise inappropriate dependencies. Along the way, we comment on how to make the best use of what the C++ language has to offer.\n\u2014 \nJohn Lakos\nBloomberg LP\nSoftware Infrastructure Manager\nJohn Lakos, author of \"Large Scale C++ Software Design.\", serves at Bloomberg LP in New York City as a senior architect and mentor for C++ Software Development world-wide. He is also an active voting member of the C++ Standards Committee, Library Working Group. Previously, Dr. Lakos directed the design and development of infrastructure libraries for proprietary analytic financial applications at Bear Stearns. For 12 years prior, Dr. Lakos developed large frameworks and advanced ICCAD applications at Mentor Graphics, for which he holds multiple software patents. His academic credentials include a Ph.D. in Computer Science ('97) and an Sc.D. in Electrical Engineering ('89) from Columbia University. Dr. Lakos received his undergraduate degrees from MIT in Mathematics ('82) and Computer Science ('81). His next book, entitled \"Large-Scale C++, Volume I: Process and Architecture\", is anticipated in 2014.\n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/QjFpKJ8Xx78/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/QjFpKJ8Xx78/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/QjFpKJ8Xx78/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/QjFpKJ8Xx78/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/QjFpKJ8Xx78/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 25,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "QjFpKJ8Xx78"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "QjFpKJ8Xx78",
        "videoPublishedAt": "2016-10-08T00:28:39Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "EZ_UwDxMIKTSRQVUptu2Wkb67QA",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy5DODY2Qzc5Mzc1QkZEQ0NF",
      "snippet": {
        "publishedAt": "2021-10-07T08:44:47Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "CppCon 2015: John Lakos \u201cValue Semantics: It ain't about the syntax!, Part II\"",
        "description": "http://www.Cppcon.org\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015\n\u2014\nWhen people talk about a type as having *value* *semantics*, they are often thinking about its ability to be passed to (or returned from) a function by value. In order to do that, the C++ language requires that the type implement a copy constructor, and so people routinely implement copy constructors on their classes, which begs the question, \"Should an object of that type be copyable at all?\" If so, what should be true about the copy? Should it have the same state as the original object? Same behavior? What does copying an object mean?! By *value* *type*, most people assume that the type is specifically intended to represent a member of some set (of values). A *value-semantic* *type*, however, is one that strives to approximate an abstract *mathematical* type (e.g., integer, character set, complex-number sequence), which comprises operations as well as values. When we copy an object of a value-semantic type, the new object might not have the same state, or even the same behavior as the original object; for proper value-semantic types, however, the new object will have the same *value*. In this talk, we begin by gaining an intuitive feel for what we mean by *value* by identifying *salient* *attributes*, i.e., those that contribute to value, and by contrasting types whose objects naturally represent values with those that don't. After quickly reviewing the syntactic properties common to typical value types, we dive into the much deeper issues that *value* *semantics* entail. In particular, we explore the subtle *Essential* *Property* *of* *Value*, which applies to every *salient* mutating operation on a value-semantic object, and then profitably apply this property to realize a correct design for each of a variety of increasingly interesting (value-semantic) classes.\n\u2014 \nJohn Lakos, author of \"Large Scale C++ Software Design.\", serves at Bloomberg LP in New York City as a senior architect and mentor for C++ Software Development world-wide. He is also an active voting member of the C++ Standards Committee, Library Working Group. Previously, Dr. Lakos directed the design and development of infrastructure libraries for proprietary analytic financial applications at Bear Stearns. For 12 years prior, Dr. Lakos developed large frameworks and advanced ICCAD applications at Mentor Graphics, for which he holds multiple software patents. His academic credentials include a Ph.D. in Computer Science ('97) and an Sc.D. in Electrical Engineering ('89) from Columbia University. Dr. Lakos received his undergraduate degrees from MIT in Mathematics ('82) and Computer Science ('81). His next book, entitled \"Large-Scale C++, Volume I: Process and Architecture\", is anticipated in 2014.\n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/0EvSxHxFknM/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/0EvSxHxFknM/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/0EvSxHxFknM/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/0EvSxHxFknM/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/0EvSxHxFknM/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 26,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "0EvSxHxFknM"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "0EvSxHxFknM",
        "videoPublishedAt": "2015-10-16T12:48:24Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "5RpLZAB7cQzsJDMZpVb21aLqcvE",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy40MzEwNkU4RUE0MjhBRjg4",
      "snippet": {
        "publishedAt": "2021-10-07T08:44:33Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "CppCon 2015: John Lakos \u201cValue Semantics: It ain't about the syntax!, Part I\"",
        "description": "http://www.Cppcon.org\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015\n\u2014\nWhen people talk about a type as having *value* *semantics*, they are often thinking about its ability to be passed to (or returned from) a function by value. In order to do that, the C++ language requires that the type implement a copy constructor, and so people routinely implement copy constructors on their classes, which begs the question, \"Should an object of that type be copyable at all?\" If so, what should be true about the copy? Should it have the same state as the original object? Same behavior? What does copying an object mean?! By *value* *type*, most people assume that the type is specifically intended to represent a member of some set (of values). A *value-semantic* *type*, however, is one that strives to approximate an abstract *mathematical* type (e.g., integer, character set, complex-number sequence), which comprises operations as well as values. When we copy an object of a value-semantic type, the new object might not have the same state, or even the same behavior as the original object; for proper value-semantic types, however, the new object will have the same *value*. In this talk, we begin by gaining an intuitive feel for what we mean by *value* by identifying *salient* *attributes*, i.e., those that contribute to value, and by contrasting types whose objects naturally represent values with those that don't. After quickly reviewing the syntactic properties common to typical value types, we dive into the much deeper issues that *value* *semantics* entail. In particular, we explore the subtle *Essential* *Property* *of* *Value*, which applies to every *salient* mutating operation on a value-semantic object, and then profitably apply this property to realize a correct design for each of a variety of increasingly interesting (value-semantic) classes.\n\u2014 \nJohn Lakos, author of \"Large Scale C++ Software Design.\", serves at Bloomberg LP in New York City as a senior architect and mentor for C++ Software Development world-wide. He is also an active voting member of the C++ Standards Committee, Library Working Group. Previously, Dr. Lakos directed the design and development of infrastructure libraries for proprietary analytic financial applications at Bear Stearns. For 12 years prior, Dr. Lakos developed large frameworks and advanced ICCAD applications at Mentor Graphics, for which he holds multiple software patents. His academic credentials include a Ph.D. in Computer Science ('97) and an Sc.D. in Electrical Engineering ('89) from Columbia University. Dr. Lakos received his undergraduate degrees from MIT in Mathematics ('82) and Computer Science ('81). His next book, entitled \"Large-Scale C++, Volume I: Process and Architecture\", is anticipated in 2014.\n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/W3xI1HJUy7Q/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/W3xI1HJUy7Q/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/W3xI1HJUy7Q/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/W3xI1HJUy7Q/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/W3xI1HJUy7Q/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 27,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "W3xI1HJUy7Q"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "W3xI1HJUy7Q",
        "videoPublishedAt": "2015-10-16T12:29:04Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "Vb22OoIQyQ7CpPlNlzYY-wpETx0",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy42RDgxQ0M2OUIwREZCNjZF",
      "snippet": {
        "publishedAt": "2021-10-07T08:44:22Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "CppCon 2017: Pablo Halpern \u201cAllocators: The Good Parts\u201d",
        "description": "http://CppCon.org\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2017\n\u2014\nMemory allocators have a bad rap. Sure, they give us control, sometimes vital control, over how and where memory is allocated, but they seem so hard to use correctly. The allocator model that was first standardized in C++98 was put in place to solve a different problem; despite being called \"allocators,\" control over memory allocation was, at best, a secondary consideration. Changes in C++11 and C++17 corrected many of the flaws, at the cost of complexity in the specification. If only there were a user manual and tutorial for allocators, much of that complexity would fall away and could be ignored. This talk strives to be that user manual and tutorial, intended to focus your attention on the important parts of modern allocators, and leaving most of the legacy stuff from 1998 behind. We will look at the easiest way to design a class that uses allocators, and walk through the creation of a real, useful allocator. In the process, I will introduce features in C++17 that can easily be adapted for use with today's C++11 and C++14 standard libraries. My goal is to make allocators approachable, so that you can use them appropriately in your own work.\n\u2014 \nPablo Halpern: Intel\n\nPablo Halpern has been programming in C++ since 1989 and has been a member of the C++ Standards Committee since 2007. His work with allocators began at Bloomberg LP, where he developed an appreciation for the simple and powerful allocator model in use there. In 2005, he started writing standards proposals to add the benefits of the Bloomberg Allocator model into the C++ allocator model. After Bloomberg, Pablo worked on C++ extensions for parallelism at Cilk Arts, Inc., and continued that work at Intel Corp after Intel acquired Cilk Arts in 2009. His currently work at Intel is on compiler technology for new processor architectures and he continues to focus on exploiting hardware parallelism through compiler technology, language extensions, and libraries. In the standards committees, he promotes adoption of parallel and vector constructs into the C++ and C standards, as well as continued improvements to the allocators. He lives with his family in southern New Hampshire, USA. When not working on compilers and parallel programming, he enjoys studying the viola, skiing, snowboarding, and watching opera.\n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/v3dz-AKOVL8/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/v3dz-AKOVL8/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/v3dz-AKOVL8/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/v3dz-AKOVL8/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/v3dz-AKOVL8/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 28,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "v3dz-AKOVL8"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "v3dz-AKOVL8",
        "videoPublishedAt": "2017-10-31T00:11:35Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "ZhcyRhjqXSZZm_dwBCZkiQ4AZOM",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy40ODU2MTBGM0M5MkIwQzU0",
      "snippet": {
        "publishedAt": "2021-10-07T08:44:12Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "CppCon 2018: John Lakos \u201cC++ Modules and Large-Scale Development\u201d",
        "description": "http://CppCon.org\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2018\n\u2014\nMuch has been said about how the upcoming module feature in C++ will improve compilation speeds and reduce reliance on the C++ preprocessor. However, program architecture will see the biggest impact. This talk explains how modules will change how you develop, organize, and deploy your code. We will also cover the stable migration of a large code base to be consumable both as modules and as normal headers.\n\u2014 \nJohn Lakos, Bloomberg LP\nSoftware Engineer\nJohn Lakos, author of Large-Scale C++ Software Design, serves at Bloomberg LP in New York City as a senior architect and mentor for C++ Software Development world-wide.  He is also an active voting member of the C++ Standards Committee\u2019s Evolution Working Group. Previously, Dr. Lakos directed the design and development of infrastructure libraries for proprietary analytic financial applications at Bear Stearns. For 12 years prior, Dr. Lakos developed large frameworks and advanced ICCAD applications at Mentor Graphics, for which he holds multiple software patents. His academic credentials include a Ph.D. in Computer Science ('97) and an Sc.D. in Electrical Engineering ('89) from Columbia University. Dr. Lakos received his undergraduate degrees from MIT in Mathematics ('82) and Computer Science ('81). His next book, entitled Large-Scale C++\u2014Volume I: Process and Architecture, is anticipated in 2018.\n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com *-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/K_fTl_hIEGY/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/K_fTl_hIEGY/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/K_fTl_hIEGY/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/K_fTl_hIEGY/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/K_fTl_hIEGY/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 29,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "K_fTl_hIEGY"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "K_fTl_hIEGY",
        "videoPublishedAt": "2018-11-15T08:00:00Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "etQMAebZELzSIdfoNhr53yk0zGQ",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy44REI4QUZDRDI5MDc4Q0NF",
      "snippet": {
        "publishedAt": "2021-10-07T08:44:05Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "CppCon 2017: John Lakos \u201cLocal ('Arena') Memory Allocators (part 2 of 2)\u201d",
        "description": "http://CppCon.org\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2017\n\u2014\nAre allocators worth the trouble? What situations merit their use? How are they applied effectually? What\u2019s the performance impact? This practical talk by large scale C++ expert Dr. John Lakos demonstrates that having allocators in your tool box may lead to orders of magnitude speed improvements. \n\nThe runtime implications of the physical location of allocated memory is often overlooked, even in the most performance critical code. In this talk, we will examine how the performance of systems can degrade when using `new`/`delete` and `std::allocator` . We will contrast these global allocators, which allocate memory globally for a system, with local allocators that each allocate memory for a proper subset of objects in the system. We will also demonstrate how local allocators can reduce or entirely prevent the degradation seen in systems that rely on the global allocator. Six dimensions \u2013 fragmentability, allocation density, variation, locality, utilization, and contention \u2013 will be introduced to depict the potential for performance penalties and aid the listener in determining which local allocator will offer the best performance in their subsystems. Evidence will be presented that identifying these dimensions, and selecting a local allocator based upon them, can lead to *order-of-magnitude* reductions in run time compared to systems using a global allocator. \n\u2014 \nJohn Lakos: Bloomberg, Software Engineering Manager\n\nJohn Lakos, author of Large-Scale C++ Software Design, serves at Bloomberg LP in New York City as a senior architect and mentor for C++ Software Development world-wide.  He is also an active voting member of the C++ Standards Committee\u2019s Evolution Working Group. Previously, Dr. Lakos directed the design and development of infrastructure libraries for proprietary analytic financial applications at Bear Stearns. For 12 years prior, Dr. Lakos developed large frameworks and advanced ICCAD applications at Mentor Graphics, for which he holds multiple software patents. His academic credentials include a Ph.D. in Computer Science ('97) and an Sc.D. in Electrical Engineering ('89) from Columbia University. Dr. Lakos received his undergraduate degrees from MIT in Mathematics ('82) and Computer Science ('81). His next book, entitled Large-Scale C++\u2014Volume I: Process and Architecture, is anticipated in 2017.\n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/CFzuFNSpycI/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/CFzuFNSpycI/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/CFzuFNSpycI/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/CFzuFNSpycI/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/CFzuFNSpycI/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 30,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "CFzuFNSpycI"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "CFzuFNSpycI",
        "videoPublishedAt": "2017-10-14T18:17:58Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "2O3t4UaMU9Jt0Pfeiulh6a-d5Tc",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy5FQjcyRDZBMEMyNTY3OTdE",
      "snippet": {
        "publishedAt": "2021-10-07T08:43:53Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "CppCon 2017: John Lakos \u201cLocal ('Arena') Memory Allocators (part 1 of 2)\u201d",
        "description": "http://CppCon.org\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2017\n\u2014\nAre allocators worth the trouble? What situations merit their use? How are they applied effectually? What\u2019s the performance impact? This practical talk by large scale C++ expert Dr. John Lakos demonstrates that having allocators in your tool box may lead to orders of magnitude speed improvements. \n\nThe runtime implications of the physical location of allocated memory is often overlooked, even in the most performance critical code. In this talk, we will examine how the performance of systems can degrade when using `new`/`delete` and `std::allocator` . We will contrast these global allocators, which allocate memory globally for a system, with local allocators that each allocate memory for a proper subset of objects in the system. We will also demonstrate how local allocators can reduce or entirely prevent the degradation seen in systems that rely on the global allocator. Six dimensions \u2013 fragmentability, allocation density, variation, locality, utilization, and contention \u2013 will be introduced to depict the potential for performance penalties and aid the listener in determining which local allocator will offer the best performance in their subsystems. Evidence will be presented that identifying these dimensions, and selecting a local allocator based upon them, can lead to *order-of-magnitude* reductions in run time compared to systems using a global allocator. \n\u2014 \nJohn Lakos: Bloomberg, Software Engineering Manager\n\nJohn Lakos, author of Large-Scale C++ Software Design, serves at Bloomberg LP in New York City as a senior architect and mentor for C++ Software Development world-wide.  He is also an active voting member of the C++ Standards Committee\u2019s Evolution Working Group. Previously, Dr. Lakos directed the design and development of infrastructure libraries for proprietary analytic financial applications at Bear Stearns. For 12 years prior, Dr. Lakos developed large frameworks and advanced ICCAD applications at Mentor Graphics, for which he holds multiple software patents. His academic credentials include a Ph.D. in Computer Science ('97) and an Sc.D. in Electrical Engineering ('89) from Columbia University. Dr. Lakos received his undergraduate degrees from MIT in Mathematics ('82) and Computer Science ('81). His next book, entitled Large-Scale C++\u2014Volume I: Process and Architecture, is anticipated in 2017.\n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/nZNd5FjSquk/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/nZNd5FjSquk/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/nZNd5FjSquk/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/nZNd5FjSquk/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/nZNd5FjSquk/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 31,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "nZNd5FjSquk"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "nZNd5FjSquk",
        "videoPublishedAt": "2017-10-14T18:17:08Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "T-2Bij7uKNY-MmCF-8jWHUNQsf0",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy4wMEMyQTBBOTUwNTM0OUFG",
      "snippet": {
        "publishedAt": "2021-10-07T08:43:48Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "CppCon 2017: Bob Steagall \u201cHow to Write a Custom Allocator\u201d",
        "description": "http://CppCon.org\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2017\n\u2014\nYou'd like to improve the performance of your application with regard to memory management, and you believe this can be accomplished by writing a custom allocator. But where do you start? Modern C++ brings many improvements to the standard allocator model, but with those improvements come several issues that must be addressed when designing a new allocator. \n\nThis talk will provide guidance on how to write custom allocators for the C++14/C++17 standard containers. It will cover the requirements specified by the standard, and will describe the facilities provided by the standard to support the new allocator model and allocator-aware containers. We'll look at the issues of allocator identity and propagation, and examine their implications for standard library users, standard library implementers, and custom allocator implementers. We'll see how a container uses its allocator, including when and how a container's allocator instance propagates. This will give us the necessary background to describe allocators that implement unusual semantics, such as a stateful allocator type whose instances compare non-equal. Finally, the talk will provide some guidelines for how to specify a custom allocator's public interface based on the semantics it provides.\n\u2014 \nBob Steagall: KEWB Computing, CppCon 2017 Poster Chair\n\nI've been working in C++ for the last 25 years. The majority of my career has been spent in medical imaging, where I led teams building applications for functional MRI and CT-based cardiac visualization. After a brief journey through the world of DNS and analytics, I'm now working in the area of stream processing.\n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/kSWfushlvB8/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/kSWfushlvB8/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/kSWfushlvB8/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/kSWfushlvB8/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/kSWfushlvB8/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 32,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "kSWfushlvB8"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "kSWfushlvB8",
        "videoPublishedAt": "2017-10-24T18:39:08Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "R_Lb3ORvoJx6pmv4M-Dhx9ZX-dI",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy44M0Q5MzQ0QTcwQzFDMjc5",
      "snippet": {
        "publishedAt": "2021-10-06T23:23:12Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "CppCon 2016: Marshall Clow \u201cSTL Algorithms - why you should use them, and how to write your own\"",
        "description": "http://CppCon.org\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016\n\u2014\nOne of the most powerful features of the C++ standard library is the collection of basic algorithms. Everyone knows about sort and copy, but there are is a lot of powerful capabilities in the other algorithms as well. In this talk, I will explore some of the algorithms in the library, and give a rationale for writing your own, along with examples. \n\nThe motivation for writing your own algorithms is that you can create generic building blocks that can be used over and over again in your library or application, and which will allow your to program at a higher level of abstraction. Instead of thinking, \"how do I sort this vector\", you just call std::sort. The same should apply to the algorithms that are specific to your domain - once you write them. \n\u2014 \nMarshall Clow\nPrincipal Engineer, Qualcomm, Inc.\nMarshall is a long-time LLVM and Boost participant. He is a principal engineer at Qualcomm, Inc. in San Diego, and the code owner for libc++, the LLVM standard library implementation. He is the author of the Boost.Algorithm library and maintains several other Boost libraries.\n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/h4Jl1fk3MkQ/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/h4Jl1fk3MkQ/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/h4Jl1fk3MkQ/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/h4Jl1fk3MkQ/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/h4Jl1fk3MkQ/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 33,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "h4Jl1fk3MkQ"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "h4Jl1fk3MkQ",
        "videoPublishedAt": "2016-10-06T18:24:56Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "68ZF6S17rsJFTjmuPh9IEjZtzqM",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy5EN0U0NTk3NzIwMjUxN0M3",
      "snippet": {
        "publishedAt": "2021-10-06T14:10:22Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "CppCon 2018: Peter Sommerlad \u201cSane and Safe C++ Classes\u201d",
        "description": "http://CppCon.org\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2018\n\u2014\nC++ is a complex language and with the introduction of move semantics, noexcept and constexpr in C++11 and later, defining or declaring the right combination of magic keywords in the right place is daunting for the uninitiated. The talk will provide guidelines for how to circumvent expert territory and if needed, how to step there without shooting yourself in the foot or tripping a mine. \n\nMany C++ guidelines try to limit the use of language features so that resulting code has higher chances to be correct and safe. This talk will give an overview of the kind of classes you can create in such a controlled setting and provides a map to where is expert territory that requires deliberate care about your classes. \n\nFor example, there is the Rule of Zero telling that you should let the compiler figure out what to provide. It carries far for the application level programmer, but still might not be sufficient. Should you then rely on the Rule of Five or Six? What would be the consequences? When should you actually deviate from the Rule of Zero and how? \n\nAnother area are classes representing values. Value classes better not have virtual member functions. But should you use final or not? Do you really need class hierarchies? \n\nYou will learn what kinds of classes are safe to design and how to spell their special member functions.\n\u2014 \nPeter Sommerlad, HSR Rapperswil\nProfessor\n\nProf. Peter Sommerlad is director of IFS Institute for Software at FHO HSR Rapperswil where he inspired the C++ IDE Cevelop. Peter is co-author of the books POSA Vol.1 and Security Patterns. His goal is to make software simpler by Decremental Development: Refactoring software down to 10% its size with better architecture, testability and quality and functionality. Peter is a member of the C++ standardization committee, ACCU, ACM, IEEE Computer Society.\n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/REIEaUY9np4/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/REIEaUY9np4/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/REIEaUY9np4/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/REIEaUY9np4/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/REIEaUY9np4/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 34,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "REIEaUY9np4"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "REIEaUY9np4",
        "videoPublishedAt": "2018-10-12T02:16:42Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "SmDdFVcSNkSZ-3ZSfDqxg4r6iKc",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy5BQzRBQzNEOTgzNTU2QkZB",
      "snippet": {
        "publishedAt": "2021-10-06T04:38:38Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "C++ Unit testing - the good, the bad & the ugly - Dror Helper",
        "description": "C++ is a powerful language when used by a seasoned developer. It is being used everywhere from operating systems and compilers to cross platform mobile apps development. But this power comes with a cost - C++ programming is not simple nor easy \u2013 with memory leaks, stack overflows and strange exceptions, a software developer needs all of the power he can use.\nBy harnessing the power of unit tests a software developer can find defects quickly, avoid regression and speed up development time.\n\nIn this talk I\u2019ll show how to use the right unit testing tools and practices available that will help you get your C++ code under control and even test legacy code which no one ever want to touch.\n\n\n\nNDC Conferences \nhttps://ndctechtown.com\nhttps://ndcconferences.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/gCQDBz-TMIE/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/gCQDBz-TMIE/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/gCQDBz-TMIE/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/gCQDBz-TMIE/sddefault.jpg",
            "width": 640,
            "height": 480
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 35,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "gCQDBz-TMIE"
        },
        "videoOwnerChannelTitle": "NDC Conferences",
        "videoOwnerChannelId": "UCTdw38Cw6jcm0atBPA39a0Q"
      },
      "contentDetails": {
        "videoId": "gCQDBz-TMIE",
        "videoPublishedAt": "2018-10-02T12:47:56Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "SaVkuZijORBB5O86oGRsT2n0uQY",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy4zNEMzQ0FDREY1MkE1RkQ1",
      "snippet": {
        "publishedAt": "2021-10-06T04:38:31Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "CppCon 2015: T. Winters & H. Wright \u201cAll Your Tests are Terrible...\"",
        "description": "http://www.Cppcon.org\n\u2014\nTitus Winters & Hyrum Wright\n\"All Your Tests are Terrible: Tales from the Trenches\"\n--\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015\n\u2014\nThousands of Google engineers have collectively written about 100,000 separate C++ test binaries in the last 15 years. Not all of those was a perfect test. In this talk we\u2019ll focus on how to write good tests and adopt a good testing philosophy, with lots of examples of what not to do (and why).\n\u2014 \nTitus Winters has spent the past 4 years working on Google's core C++ libraries. He's particularly interested in issues of large scale software engineer and codebase maintenance: how do we keep a codebase of over 100M lines of code consistent and flexible for the next decade? Along the way he has helped Google teams pioneer techniques to perform automated code transformations on a massive scale, and helps maintain the Google C++ Style Guide.\n\nHyrum Wright hates C++ less than the rest of the programming languages he's worked with, and works on C++ library infrastructure at Google. He writes programs to rewrite other programs, and will eventually put himself out of a job. In a former life, he was an author of Apache Subversion, and still retains membership in the Apache Software Foundation. Hyrum enjoys cycling, but didn't bring a bike to Seattle. Twitter handle: @hyrumwright\n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/u5senBJUkPc/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/u5senBJUkPc/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/u5senBJUkPc/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/u5senBJUkPc/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/u5senBJUkPc/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 36,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "u5senBJUkPc"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "u5senBJUkPc",
        "videoPublishedAt": "2015-11-01T02:26:19Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "L4QjIEvODXDcdM1z5FMHHjqgNSo",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy45MEI3NjgzMTVFQkZGODYx",
      "snippet": {
        "publishedAt": "2021-10-06T04:36:37Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "The Science of Unit Tests - Dave Steffen - CppCon 2020",
        "description": "https://cppcon.org/\nhttps://github.com/CppCon/CppCon2020/blob/main/Presentations/scientific_unit_testing/scientific_unit_testing__dave_steffen__cppcon_2020.pdf\n---\nUnit testing has emerged as one of the foundations of modern software development. There are plenty of good talks on how to write tests, full of good advice, guidelines, and procedures: \"Test using only the public interface\", \"Use Test-Driven Development\", \"Write Behavior-Driven Tests\".\n\nBut what are the fundamentals that lie beneath all the good advice? What principles should guide our testing?\n\nThis talk will start by reviewing the basics of good testing, and then explore the close relationship between unit testing and the scientific method. Unit tests are, in some sense, small scientific instruments to detect phenomena in our source code. When seen in this light, we can start to see *why* the good advice we've been getting is good, and how an empirical approach can help guide decisions about what, when, and how to test our code.\n\n---\nDave Steffen completed his Ph.D. in theoretical physics at Colorado State University in 2003, and promptly changed course for a career in software engineering. He has worked primarily in defence and aerospace, and is currently a technical lead at SciTec Inc.'s Boulder office. For reasons unknown, he has turned out to be the expert, champion, and occasional street-corner evangelist for unit testing at most of the companies he has ever worked at.\n\n---\nStreamed & Edited by Digital Medium Ltd - events.digital-medium.co.uk\nevents@digital-medium.co.uk \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/FjwayiHNI1w/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/FjwayiHNI1w/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/FjwayiHNI1w/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/FjwayiHNI1w/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/FjwayiHNI1w/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 37,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "FjwayiHNI1w"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "FjwayiHNI1w",
        "videoPublishedAt": "2020-10-04T19:00:11Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "sbCr16FB3zp-NnCq5v_-3L9AkEo",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy5ENjg3MEUyQ0IzODMzQThB",
      "snippet": {
        "publishedAt": "2021-10-06T03:45:20Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "CppCon 2018: Phil Nash \u201cModern C++ Testing with Catch2\u201d",
        "description": "http://CppCon.org\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2018\n\u2014\nCatch has gained popularity over the last seven years as a modern, C++-native, test framework. Simple to use, easy to get started with, yet still powerful. With features like expression-template-based assertions, hierarchical sections (giving a more natural flow than set-up/ tear-down methods) and more, a lot of users say it makes testing easier and even fun!\n\nUntil recently, though, it has been constrained by pre-C++11 compatibility. \nCatch2 rebases on C++11 and takes advantage of this to simplify further, as well as offer new capabilities. \nThis talk takes a look at what's new in Catch and Catch2 and how to effectively test-drive modern C++ codebases. \n\nFamiliarity with the original Catch is not assumed, but if you already use it, or have seen previous talks, in this material we'll focus more on some of the newer features.\n\u2014 \nPhil Nash, JetBrains\nDeveloper Advocate\n\nPhil is the author of the test frameworks, Catch - for C++ and Objective-C, and Swordfish for Swift. As Developer Advocate at JetBrains he's involved with CLion, AppCode and ReSharper C++. More generally he's an advocate for good testing practices, TDD and using the type system and functional techniques to reduce complexity and increase correctness. He's previously worked in Finance and Mobile as well as an independent consultant and coach specialising in TDD on iOS.\n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/Ob5_XZrFQH0/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/Ob5_XZrFQH0/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/Ob5_XZrFQH0/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/Ob5_XZrFQH0/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/Ob5_XZrFQH0/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 38,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "Ob5_XZrFQH0"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "Ob5_XZrFQH0",
        "videoPublishedAt": "2018-10-22T07:00:00Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "4NrCbZ_7KPp8sMqasjNldK9xLe8",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy41MzJFNEYxODEyNzA0QUUx",
      "snippet": {
        "publishedAt": "2021-10-06T03:45:05Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "Back to Basics: Unit Tests - Ben Saks - CppCon 2020",
        "description": "https://cppcon.org/\nhttps://github.com/CppCon/CppCon2020\n---\nAutomated unit tests can accelerate software development by quickly identifying regressions, clarifying interface requirements, and encouraging more modular designs. However, actually incorporating unit tests into your development process can be intimidating. Choosing a unit testing framework can be a daunting task because there are so many frameworks with such wide-ranging capabilities. Moreover, even when using a really good framework, crafting effective tests is a skill that takes time to master.\n\nThis session takes you through the process of writing automated unit tests for realistic code, working from very simple tests up to more complex ones. It starts with a brief introduction to automated testing and test-driven development. It shows you the first steps toward using automated unit tests in your development process.\n\nIn this session, you\u2019ll learn the practical benefits of a unit testing framework through examples using Google Test. You\u2019ll see how you can simplify difficult tests using dependency injection and Google Mock in addition to Google Test. Along the way, you\u2019ll learn about different testing strategies, as well as concepts such as test coverage and ordering dependencies. Whether you\u2019re new to automated testing or looking for a way to test challenging components, this session will help you take the next step toward more reliable, test-driven software.\n\n---\nBen Saks\nChief Engineer, Saks & Associates\n\n---\nStreamed & Edited by Digital Medium Ltd - events.digital-medium.co.uk\nevents@digital-medium.co.uk \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/_OHE33s7EKw/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/_OHE33s7EKw/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/_OHE33s7EKw/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/_OHE33s7EKw/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/_OHE33s7EKw/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 39,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "_OHE33s7EKw"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "_OHE33s7EKw",
        "videoPublishedAt": "2020-09-30T19:00:09Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "k-tIVhSbwmJytp5VT5ND7a3nGyQ",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy5EODkyNDMzRkJBNkQ2NkMz",
      "snippet": {
        "publishedAt": "2021-10-05T13:01:35Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "Reading Binary Data with Style: A Serialization Framework for C++17 - Tony Wasserka - CppCon 2019",
        "description": "http://CppCon.org\n\u2014\nDiscussion & Comments: https://www.reddit.com/r/cpp/\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2019\n\u2014\nReading structured data from a file or network stream remains cumbersome and error-prone in C++, especially when data validation is required. Existing approaches require too much boilerplate, aren't always portable, and may be restricted to specific data sources. Despite these limitations, there have been few alternatives in the past.\n\nThis talk introduces blobify, an experimental serialization framework for C++17 designed to convert user-defined structs to binary data blobs and vice-versa. Contrary to similar frameworks, blobify largely automates the process, and it includes an embedded domain specific language to handle data validation.\n\nI will describe blobify's API design and usage, explain how it works under the hood, and provide an outlook at what the Reflection TS has in store for future improvements.\n\nLink to the library on GitHub: https://github.com/neobrain/blobify\n\u2014 \nTony Wasserka\nConsultant\nBerlin, Germany\n\nLow-level anything: Tony is a consultant and long-term C++ enthusiast who has worked on the console emulator projects Dolphin (GameCube/Wii), PPSSPP (PSP), and Mikage (3DS) since 2010. More recently, he has worked on Vulkan graphics drivers for PowerVR graphics processors. His main interest is exploring C++'s zero-cost abstraction capabilities and applying them to create better software for resource-constrained environments.\n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/o3j6hfXDCVc/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/o3j6hfXDCVc/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/o3j6hfXDCVc/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/o3j6hfXDCVc/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/o3j6hfXDCVc/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 40,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "o3j6hfXDCVc"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "o3j6hfXDCVc",
        "videoPublishedAt": "2019-10-14T07:00:07Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "pGxiTpnhoJKZqEIeHNMwsXM77Eo",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy5BRUVCN0E0MzEwQzAwNjMy",
      "snippet": {
        "publishedAt": "2021-10-05T06:04:48Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "CppCon 2015: Bryce Adelstein-Lelbach \u201cBenchmarking C++ Code\"",
        "description": "http://www.Cppcon.org\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015\n\u2014\nWith the ending of Moore's Law and the rise of multicore systems, programmers from across the industry are increasing forced to develop and maintain highly performance sensitive software. For C++, a language frequently used for performance sensitive projects, benchmarking and performance analysis is especially important. Developing good benchmarks can be tricky; gathering and analyzing data from benchmarks can be an even greater challenge.\n\nThis talk will discuss techniques and best practices for writing C++ benchmarks using facilities from the standard library and Boost. We'll also cover the development of performance unit/regression tests. We'll discuss the statistical best practices for gathering data, as well as techniques for benchmarking a variety of different metrics - time, memory, algorithmic complexity, etc. \n\nThe main topics which will be covered:\n\n* Statistical Best Practices (dealing with uncertainty, achieving statistical confidence, how to sample)\n* Time-Based Benchmarking (best practices for timing, derived time-based metrics)\n* Non-Time-Based Benchmarking (memory, algorithmic complexity in time and space, etc)\n* Techniques for C++-specific Performance Metrics (counting copies/moves, allocator tricks) \n* Converting Benchmarks into Tests\n\u2014 \nBryce Adelstein-Lelbach is a researcher at the Center of Computation and Technology (CCT) at Louisiana State University. He works on the HPX runtime system and his research interests include parallel and distributed programming frameworks for scientific applications. He has been working on HPX for over a year now.\n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/zWxSZcpeS8Q/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/zWxSZcpeS8Q/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/zWxSZcpeS8Q/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/zWxSZcpeS8Q/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/zWxSZcpeS8Q/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 41,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "zWxSZcpeS8Q"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "zWxSZcpeS8Q",
        "videoPublishedAt": "2015-10-18T14:56:01Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "Xe5lLHJhrw7FEmQZ8td88DBQrOA",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy41NUMwNTVERDNBRDc4REM0",
      "snippet": {
        "publishedAt": "2021-10-05T06:04:14Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "CppCon 2018: Andrei Alexandrescu \u201cExpect the expected\u201d",
        "description": "http://CppCon.org\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2018\n\u2014\nWriting code that is resilient upon errors has always been a pain point in all languages. Exceptions are the politically correct means to signal errors in C++, but many applications still resort to error codes for reasons related to ease of understanding, ease of handling errors locally, and efficiency of generated code. \n\nThis talk shows how a variety of theoretical and practical artifacts can be combined together to address error codes and exceptions in one wholesome, simple package. The generic type expected\uff1cT\uff1e can be used for both local (error-code-style) and centralized (exception-style) manners, drawing from the strengths of each.\n\u2014 \n\nAndrei Alexandrescu, The D Language Foundation\nVice President\n\nAndrei Alexandrescu is a researcher, software engineer, and author. He wrote three best-selling books on programming (Modern C++ Design, C++ Coding Standards, and The D Programming Language) and numerous articles and papers on wide-ranging topics from programming to language design to Machine Learning to Natural Language Processing. Andrei holds a PhD in Computer Science from the University of Washington and a BSc in Electrical Engineering from University \"Politehnica\" Bucharest. He is the Vice President of the D Language Foundation. \n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/PH4WBuE1BHI/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/PH4WBuE1BHI/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/PH4WBuE1BHI/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/PH4WBuE1BHI/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/PH4WBuE1BHI/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 42,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "PH4WBuE1BHI"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "PH4WBuE1BHI",
        "videoPublishedAt": "2018-11-01T07:00:00Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "mR6LVetasa-9nMCE0pR2WA7SnBs",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy4wQTI4OEZFRUE0Q0Q3ODQw",
      "snippet": {
        "publishedAt": "2021-10-05T05:58:44Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "CppCon 2019: Miro Knejp \u201cNon-conforming C++: the Secrets the Committee Is Hiding From You\u201d",
        "description": "http://CppCon.org\n\u2014\nDiscussion & Comments: https://www.reddit.com/r/cpp/\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2019\n\u2014\nThese days everyone talks about conforming and portable C++. Compiler vendors celebrate increasing conformance. Committee agents blind us with new shiny toys coming to the language. But there is a darker side to C++. A C++ you are not supposed to know about.\n\nWhat if I told you there was more to C++ than what the agents of The Committee want us to believe? Over decades programmers all around the world have added features to the language in form of compiler extensions that let us do even greater things. Some are completely new, and some are lifted from C to C++ to allow some interesting, and sometimes more efficient, application.\n\nWe will see how statements can become expressions, how \"goto\" with extra superpowers can make your programs faster, and why there exists an operator named after a famous rock star. These are just a few examples of what to expect as listing any more would draw unwanted attention from The Committee. Unfortunately, because these extensions are not part of ISO C++, using any of them comes at the expense of portability. Or does it?\n\u2014 \nMiro Knejp\nMiro Knejp\nMiro Knejp\nMunich, Germany\nMiro wrote his first line of C++ code in 1997 at the age of 12, and it has been his programming language of choice ever since. He\u2019s especially passionate about low-level programming, assembly, 3D graphics, and games engineering. Miro holds a Master\u2019s degrees in Computer Science from the Technical University of Munich. He has worked on projects ranging from designing 3D rendering libraries to building airport self-boarding control systems. He currently works as freelancer and trainer, with the goal of creating his own video game one day.\n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/IAdLwUXRUvg/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/IAdLwUXRUvg/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/IAdLwUXRUvg/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/IAdLwUXRUvg/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/IAdLwUXRUvg/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 43,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "IAdLwUXRUvg"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "IAdLwUXRUvg",
        "videoPublishedAt": "2019-10-01T07:00:02Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "ntajQ7HepeGbXM5BfYn2JGUhumU",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy4xRDJGOTc4RkUxMzUwMUFG",
      "snippet": {
        "publishedAt": "2021-10-05T05:58:26Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "\"Allegro\" Means Both Fast and Happy. Coincidence? - Andrei Alexandrescu",
        "description": "In all likelihood, sorting is one of the most researched classes of algorithms. It is a fundamental task in Computer Science, both on its own and as a step in other algorithms. Efficient algorithms for sorting and searching are now taught in core undergraduate classes. Are they at their best, or is there more blood to squeeze from that stone?\n\nThis talk will explore a few less known \u2013 but more allegro! \u2013 variants of classic sorting algorithms. And as they say, the road matters more than the destination. Along the way, we'll encounter many wondrous surprises and we'll learn how to cope with the puzzling behavior of modern complex architectures.\n\nSave the date for NDC TechTown 2020  (31st of August - 3rd of September)\n\nCheck out more of our talks at: \nhttps://ndctechtown.com/\nhttps://www.ndcconferences.com/",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/lgWr0o0Wx1A/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/lgWr0o0Wx1A/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/lgWr0o0Wx1A/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/lgWr0o0Wx1A/sddefault.jpg",
            "width": 640,
            "height": 480
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 44,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "lgWr0o0Wx1A"
        },
        "videoOwnerChannelTitle": "NDC Conferences",
        "videoOwnerChannelId": "UCTdw38Cw6jcm0atBPA39a0Q"
      },
      "contentDetails": {
        "videoId": "lgWr0o0Wx1A",
        "videoPublishedAt": "2019-09-19T11:02:24Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "4J98_vn5E7XMg5OL3sWmcZBY4ig",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy4wMDkwRkI3NzExODA2MTFG",
      "snippet": {
        "publishedAt": "2021-10-05T04:52:40Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "CppCon 2016: Jason Jurecka \u201cGame engine using STD C++ 11\"",
        "description": "http://CppCon.org\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016\n\u2014\nThis session is going to give an account of the process and features used to create a game engine focusing on using std C++11 features and concurrency. We will go through the architecture of the engine design and the specifics of the C++11 features being used. We will also go through optimization choices and design mentalities that are being used to keep the code base simple, but powerful in game usage. The engine architecture we will be going through will be using parallelism as a way to distribute work and get performance out of the available hardware that can scale into the future. \n\nWhile completing a full engine with cutting edge graphics techniques and a game to push the engine to its limits will take a while this session will go over the current state of the project and lessons learned. The ultimate goal of the project is to show the validity of using C++11 (and beyond) features in game engines to simplify code and improve stability while maintaining the performance and memory usage games demand.\n\u2014 \nJason Jurecka\nBlizzard Entertainment\nSenior Software Engineer\nJason Jurecka is a 12+ year engineering veteran of the game industry that has worked on titles in the full range of platforms from PC to next-gen consoles. He has done a wide range of tasks that include engine architecture, asset management, asset pipelines, gameplay features, task automation, tools/plugins/scripts for content creators, automated testing, game/toolchain optimizations, and many other generalist engineering tasks. Jason has contributed to titles such as Rise of Nations: Rise of Legends, Catan, Red Dead Redemption, Max Payne 3, Grand Theft Auto 5, Battlefield 4, Battlefield: Hardline, Call of Duty Black Ops 3, and Amazon's Lumberyard Game Engine/Editor.\n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/8AjRD6mU96s/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/8AjRD6mU96s/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/8AjRD6mU96s/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/8AjRD6mU96s/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/8AjRD6mU96s/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 45,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "8AjRD6mU96s"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "8AjRD6mU96s",
        "videoPublishedAt": "2016-10-05T17:36:52Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "5O5OUzULeWN267Puz1c2LwIs4xQ",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy5ERkRDQjY0N0Y0Q0VFOTdC",
      "snippet": {
        "publishedAt": "2021-10-05T04:52:17Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "CppCon 2016: Jason Turner \u201cPractical Performance Practices\"",
        "description": "http://CppCon.org\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016\n\u2014\nIn the past 6 years ChaiScript's performance has been improved by nearly 100x. This was not accomplished by adding a virtual machine or performing dynamic recompilation. Instead, these increases have been accomplished by moving to more simple, cleaner, idiomatic C++ and by following some simple rules. We will outline these concepts with examples for how they both simplified code while improving performance. \n\u2014 \nJason Turner\nDeveloper, Trainer, Speaker\nHost of C++Weekly https://www.youtube.com/c/JasonTurner-lefticus, Co-host of CppCast http://cppcast.com, Co-creator and maintainer of the embedded scripting language for C++, ChaiScript http://chaiscript.com, and author and curator of the forkable coding standards document http://cppbestpractices.com. I'm available for contracting and onsite training.\n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/uzF4u9KgUWI/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/uzF4u9KgUWI/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/uzF4u9KgUWI/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/uzF4u9KgUWI/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/uzF4u9KgUWI/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 46,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "uzF4u9KgUWI"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "uzF4u9KgUWI",
        "videoPublishedAt": "2016-10-02T19:01:07Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "-xjJMn6xXbadatgQz3DJ1ubhY0k",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy5BRDg1NUY1OTY2QzgzOEM0",
      "snippet": {
        "publishedAt": "2021-10-05T04:52:10Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "CppCon 2014: Chandler Carruth \"Efficiency with Algorithms, Performance with Data Structures\"",
        "description": "http://www.cppcon.org\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2014\n--\nWhy do you write C++ code? There is a good chance it is in part because of concerns about the performance of your software. Whether they stem from needing to run on every smaller mobile devices, squeezing the last few effects into video game, or because every watt of power in your data center costs too much, C++ programmers throughout the industry have an insatiable desire for writing high performance code.\n\nUnfortunately, even with C++, this can be really challenging. Over the past twenty years processors, memory, software libraries, and even compilers have radically changed what makes C++ code fast. Even measuring the performance of your code can be a daunting task. This talk will dig into how modern processors work, what makes them fast, and how to exploit them effectively with modern C++ code. It will teach you how modern C++ optimizers see your code today, and how that is likely to change in the coming years. It will teach you how to reason better about the performance of your code, and how to write your code so that it performs better. You will even learn some tricks about how to measure the performance of your code.\n--\nChandler Carruth leads the Clang team at Google, building better diagnostics, tools, and more. Previously, he worked on several pieces of Google\u2019s distributed build system. He makes guest appearances helping to maintain a few core C++ libraries across Google\u2019s codebase, and is active in the LLVM and Clang open source communities. He received his M.S. and B.S. in Computer Science from Wake Forest University, but disavows all knowledge of the contents of his Master\u2019s thesis. He is regularly found drinking Cherry Coke Zero in the daytime and pontificating over a single malt scotch in the evening.\n--\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/fHNmRkzxHWs/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/fHNmRkzxHWs/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/fHNmRkzxHWs/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/fHNmRkzxHWs/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/fHNmRkzxHWs/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 47,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "fHNmRkzxHWs"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "fHNmRkzxHWs",
        "videoPublishedAt": "2014-10-21T19:34:41Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "5OxsG3VLQuUli3XxL-KqWeeJhtg",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy42NEZDNTU0RTRENDUzRjMz",
      "snippet": {
        "publishedAt": "2021-10-05T04:52:00Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "CppCon 2016: Chandler Carruth \u201cGarbage In, Garbage Out: Arguing about Undefined Behavior...\"",
        "description": "http://CppCon.org\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016\n\u2014\nThere has been an overwhelming amount of tension in the programming world over the last year due to something that has become an expletive, a cursed and despised term, both obscene and profane: **undefined behavior**. All too often, this issue and the discussions surrounding it descend into unproductive territory without actually resolving anything. \n\nIn this talk, I'm going to try something very bold. I will try to utterly and completely do away with the use of the term \"undefined behavior\" in these discussions. And I will unquestionably fail. But in the process of failing, I will outline a framework for understanding the actual root issues that the software industry faces here, and try to give constructive and clear paths forward, both for programmers and the programming language. \n\nAnd, with luck, I will avoid being joined on stage by any unruly nasal demons.\n\u2014 \nChandler Carruth\nGoogle\nC++ Lead\nSan Francisco Bay Area\nChandler Carruth leads the Clang team at Google, building better diagnostics, tools, and more. Previously, he worked on several pieces of Google\u2019s distributed build system. He makes guest appearances helping to maintain a few core C++ libraries across Google\u2019s codebase, and is active in the LLVM and Clang open source communities. He received his M.S. and B.S. in Computer Science from Wake Forest University, but disavows all knowledge of the contents of his Master\u2019s thesis. He is regularly found drinking Cherry Coke Zero in the daytime and pontificating over a single malt scotch in the evening.\n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/yG1OZ69H_-o/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/yG1OZ69H_-o/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/yG1OZ69H_-o/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/yG1OZ69H_-o/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/yG1OZ69H_-o/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 48,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "yG1OZ69H_-o"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "yG1OZ69H_-o",
        "videoPublishedAt": "2016-10-06T18:13:01Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "1SIPaUWomARqogP_0oJy7e-oOw8",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy5ENEEyOTIwNkY4NzFGMkQ2",
      "snippet": {
        "publishedAt": "2021-10-05T04:51:08Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "CppCon 2016: Chandler Carruth \u201cHigh Performance Code 201: Hybrid Data Structures\"",
        "description": "http://CppCon.org\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016\n\u2014\nModern programs\u2019 performance characteristics are often dictated by their data. Whether the cache locality of data access, the size of working set, or avoiding costly memory allocation overhead. Unfortunately, the standard C++ library data structures range from adequate to terrible at controlling these aspects, and they don\u2019t provide any of the core mechanisms needed for extremely efficient data structure design.\n\nThis talk will present the core concepts of designing high performance data structures in C++. It is based on years of experience in the LLVM compiler as well as several other large code bases. From these principles, the talk will propose a suite of data structures that provide performance without loss of generality or functionality. As much as this talk will present specific data structure designs, its primary intent will be to give an understanding of what makes these structures have greater performance than more naive approaches.\n\u2014 \nChandler Carruth\nGoogle\nC++ Lead\nSan Francisco Bay Area\nChandler Carruth leads the Clang team at Google, building better diagnostics, tools, and more. Previously, he worked on several pieces of Google\u2019s distributed build system. He makes guest appearances helping to maintain a few core C++ libraries across Google\u2019s codebase, and is active in the LLVM and Clang open source communities. He received his M.S. and B.S. in Computer Science from Wake Forest University, but disavows all knowledge of the contents of his Master\u2019s thesis. He is regularly found drinking Cherry Coke Zero in the daytime and pontificating over a single malt scotch in the evening.\n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/vElZc6zSIXM/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/vElZc6zSIXM/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/vElZc6zSIXM/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/vElZc6zSIXM/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/vElZc6zSIXM/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 49,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "vElZc6zSIXM"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "vElZc6zSIXM",
        "videoPublishedAt": "2016-10-01T23:59:47Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "5jMhJoswpr274TCcXeID6XcpUiQ",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy43NjE5NDdDRTdENjQ3RTkw",
      "snippet": {
        "publishedAt": "2021-10-05T04:30:09Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "CppCon 2017: Nir Friedman \u201cWhat C++ developers should know about globals (and the linker)\u201d",
        "description": "Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2017\n\u2014\nMost C++ developers know that using globals (or singletons) excessively in code is usually a poor decision. But it is also hard to deny their usefulness in more than one situation: for loggers, factories, intrusive performance benchmarking, and other very useful applications, globals can be very helpful. \n\nUnfortunately, usage of globals in C++ ends up exposing details of the language not seen so often otherwise. Instead of dealing with our tried-and-true, well specified compiler, we often need to look more at the behavior of the linker, which can vary more between platforms and between different options such as static vs dynamic linking. \n\nThis talk will look at some surprising pitfalls that can occur with globals: valid programs only a dozen lines long that can trigger segfaults when using the gcc linker. It will explore some of these issues using command line tools like nm and objdump. The talk will enumerate several pitfalls to be avoided. It will look at some of the different axes of the problem space such as: globals that are private versus public, eager versus lazy, global inter-dependencies, and quality of emitted assembly. Finally, solutions and idioms will be presented that address the major use cases, and make it easy for developers to use globals (only where necessary!) in a safe way. \n\u2014 \nNir Friedman: Tower Research Capital, Trading Software Developer\n\nAfter completing a PhD in physics, Nir started working doing C++ in low latency and high frequency trading. He's interested in the challenges of writing robust code at scale, and highly configurable code that minimizes performance trade-offs.\n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/xVT1y0xWgww/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/xVT1y0xWgww/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/xVT1y0xWgww/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/xVT1y0xWgww/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/xVT1y0xWgww/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 50,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "xVT1y0xWgww"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "xVT1y0xWgww",
        "videoPublishedAt": "2017-10-28T17:26:30Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "9vbIHdo_S1IBghK-EpHsuqW45_8",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy44NjIxNjc5OUQwQkJBODQ5",
      "snippet": {
        "publishedAt": "2021-10-03T20:29:12Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "CppCast Episode 318: CoreCpp 2021 with Amir Kirsh and Avi Lachmish",
        "description": "Rob and Jason are joined by Amir Kirsh and Avi Lachmish from Incredibuild. They first discuss Idle, a new C++ framework, the September ISO mailing and an Algorithm Intuition Chart. Then they talk to Amir and Avi about the recent CoreCpp conference, Bjarne\u2019s keynote and other talks from the conference. \n\n\nFull show notes available at: https://cppcast.com/corecpp-amir-avi/",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/bqHNfJM-HBU/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/bqHNfJM-HBU/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/bqHNfJM-HBU/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/bqHNfJM-HBU/sddefault.jpg",
            "width": 640,
            "height": 480
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 51,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "bqHNfJM-HBU"
        },
        "videoOwnerChannelTitle": "CppCast",
        "videoOwnerChannelId": "UCuCjADS4u3uJDTqUaG0H9dA"
      },
      "contentDetails": {
        "videoId": "bqHNfJM-HBU",
        "videoPublishedAt": "2021-10-02T21:17:19Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "sTn8jlX8f0_lnva2aA0ax35ZonU",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy43RDg3MzJDMTRFMTZFOTAw",
      "snippet": {
        "publishedAt": "2021-10-03T20:28:07Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "Back to Basics: Algebraic Data Types - Arthur O'Dwyer - CppCon 2020",
        "description": "https://cppcon.org/\nhttps://github.com/CppCon/CppCon2020/blob/main/Presentations/back_to_basics_algebraic_data_types/back_to_basics_algebraic_data_types__arthur_odwyer__cppcon_2020.pdf\n---\nOne of the hallmarks of \"modern C++\" is a transition from classic object-orientation to value semantics with algebraic data types such as `variant` and `tuple`. In this session we'll explain the math behind the name, and we'll delve deep into the meaning and usage of all of the algebraic data types in C++17: pair, tuple, optional, and variant. These types have some commonalities, such as the use of type-traits to access their component types, and a common approach to implicit conversions and comparisons. We'll show how to use std::optional for deferred initialization and how to replace dynamic polymorphism with visitation over a std::variant. We'll even deliver some guidance on when NOT to return a tuple, and on how you should think about variant's \"valueless by exception\" state.\nAttendees will leave this session with a newfound appreciation for C++'s algebraic data types.\n\n---\nArthur O'Dwyer is the author of \"Mastering the C++17 STL\" (Packt 2017) and of professional training courses such as \"Intro to C++,\" \"Classic STL: Algorithms, Containers, Iterators,\" and \"The STL From Scratch.\" (Ask me about training your new hires!) Arthur is occasionally active on the C++ Standards Committee and has a blog mostly about C++. He is also the author of \"Colossal Cave: The Board Game,\" an avid club juggler, and the recipient of four Knuth checks.\n\n---\nStreamed & Edited by Digital Medium Ltd - events.digital-medium.co.uk\nevents@digital-medium.co.uk \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/OJzmWqCCZaM/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/OJzmWqCCZaM/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/OJzmWqCCZaM/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/OJzmWqCCZaM/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/OJzmWqCCZaM/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 52,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "OJzmWqCCZaM"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "OJzmWqCCZaM",
        "videoPublishedAt": "2020-09-28T15:00:10Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "KbZdzND6f4f-N8ZKSa-f3oSUWV0",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy5BNzdEQzY0REQzQTEyN0U3",
      "snippet": {
        "publishedAt": "2021-10-01T03:44:59Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "Tools of the Trade: Intro to Google Benchmark",
        "description": "In this video we take a look how to write microbenchmarks using Google Benchmark!\n\nGoogle Benchmark: https://github.com/google/benchmark\n\nFor code samples: http://github.com/coffeebeforearch\n\nFor live content: http://twitch.tv/CoffeeBeforeArch",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/FIUMoOouoBw/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/FIUMoOouoBw/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/FIUMoOouoBw/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/FIUMoOouoBw/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/FIUMoOouoBw/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 53,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "FIUMoOouoBw"
        },
        "videoOwnerChannelTitle": "CoffeeBeforeArch",
        "videoOwnerChannelId": "UCsi5-meDM5Q5NE93n_Ya7GA"
      },
      "contentDetails": {
        "videoId": "FIUMoOouoBw",
        "videoPublishedAt": "2020-07-01T07:41:46Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "D5ZcvEAmtRmD1HgQp0YEqUw8xnI",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy5EODgyNjY4MzA3QzY5RTkx",
      "snippet": {
        "publishedAt": "2021-10-01T03:28:21Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "C++ Class Natures in Their Canonical Form and How to Find Them - Peter Sommerlad - CppCon 2019",
        "description": "http://CppCon.org\n\u2014\nDiscussion & Comments: https://www.reddit.com/r/cpp/\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2019\n\u2014\nWhile working on guidelines for safety critical systems the author discovered that looking at the required special member functions and kind of member variables one can clearly distinguish several C++ class type natures. For example, there exist empty types, such as traits, or value types, such as std::string. But also types that manage resources, such as scope guards or unique managers, can be distinguished. A last area are object-oriented polymorphic base classes forming a separate nature. This categorization has direct influence on the applicability of the \"Rule of Zero\", \"Rule of Five\", or the author's \"Rule of DesDeMovA\". The nature of member variables influence the nature of the class embedding them.\n\nThis talk maps the landscape of class/type natures and how they influence directly or indirectly the way you specify or the compiler provides copy or move operations and a destructor. With that information you will get concrete guidelines to provide canonical class types more consciously with the least amount of code scaffolding. It also helps you to avoid creating easy to misuse types and gives guidance to encapsulate and hide \"dirty tricks\" that you might still need or want.\n\u2014 \nPeter Sommerlad\nIFS Institute for Software\nProfessor\nRapperswil/SG, Switzerland\n\nProf. Peter Sommerlad is director of IFS Institute for Software at FHO/HSR Rapperswil, Switzerland. Peter is co-author of the books POSA Vol.1 and Security Patterns and contributed to \"97 things every programmer should know\". His goal is to make software simpler and safer by Decremental Development: Refactoring software down to 10% its size with better architecture, testability and quality and functionality. To reach that goal his team and students created the C++ IDE Cevelop. Peter is a member of MISRA-C++, Hillside, ACM, IEEE Computer Society, SI, ACCU, and the ISO C++ standardization committee.\n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/PedVlux_p-k/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/PedVlux_p-k/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/PedVlux_p-k/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/PedVlux_p-k/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/PedVlux_p-k/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 54,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "PedVlux_p-k"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "PedVlux_p-k",
        "videoPublishedAt": "2019-10-12T07:00:05Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "wkGlqrQRo-UTZ716JnwaujhXqNQ",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy4wN0FBRUVFNEVBMTZBQ0Mx",
      "snippet": {
        "publishedAt": "2021-09-30T03:46:14Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "CppCon 2017: Chandler Carruth \u201cGoing Nowhere Faster\u201d",
        "description": "http://CppCon.org\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2017\n\u2014\nYou care about the performance of your C++ code. You have followed basic patterns to make your C++ code efficient. You profiled your application or server and used the appropriate algorithms to minimize how much work is done and the appropriate data structures to make it fast. You even have reliable benchmarks to cover the most critical and important parts of the system for performance. But you're profiling the benchmark and need to squeeze even more performance out of it... What next? \n\nThis talk dives into the performance and optimization concerns of the important, performance critical loops in your program. How do modern CPUs execute these loops, and what influences their performance? What can you do to make them faster? How can you leverage the C++ compiler to do this while keeping the code maintainable and clean? What optimization techniques do modern compilers make available to you? We'll cover all of this and more, with piles of code, examples, and even live demo. \n\nWhile the talk will focus somewhat on x86 processors and the LLVM compiler, but everything will be broadly applicable and basic mappings for other processors and toolchains will be discussed throughout. However, be prepared for a lot of C++ code and assembly. \n\u2014 \nChandler Carruth: Google, Software Engineer\n\nChandler Carruth leads the Clang team at Google, building better diagnostics, tools, and more. Previously, he worked on several pieces of Google\u2019s distributed build system. He makes guest appearances helping to maintain a few core C++ libraries across Google\u2019s codebase, and is active in the LLVM and Clang open source communities. He received his M.S. and B.S. in Computer Science from Wake Forest University, but disavows all knowledge of the contents of his Master\u2019s thesis. He is regularly found drinking Cherry Coke Zero in the daytime and pontificating over a single malt scotch in the evening.\n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/2EWejmkKlxs/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/2EWejmkKlxs/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/2EWejmkKlxs/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/2EWejmkKlxs/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/2EWejmkKlxs/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 55,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "2EWejmkKlxs"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "2EWejmkKlxs",
        "videoPublishedAt": "2017-11-02T17:21:13Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "cKT67jlQDmHnhROmFN80X7cP98I",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy4zNDIxRUJGQThFRTg1QzAy",
      "snippet": {
        "publishedAt": "2021-09-29T09:14:03Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "Data-Oriented Design for Object-Oriented Programmers - Shachar Langbeheim [ C++ on Sea 2020 ]",
        "description": "There\u2019s intuitive code, and then there\u2019s fast code. Most programmers today are taught Object Oriented Programming. OOP code is defined as interactions between objects, which is the way that human intuition tends to model the world. However, the resulting code isn't structured in a way that considers the actual instructions that a computer will run, and that\u2019s why OOP might suffer performance loss. The more efficient paradigm, Data Oriented Design, pushes the programmers to write code that maximizes speed by removing abstract models and writing code according to how a computer will actually run it. However, DOD code is sometimes viewed as harder to read and less intuitive to people accustomed to OOP.\n\nBoth paradigms have their place in a programmer\u2019s toolset, but the difficulty of the paradigm shift from OOP to DOD means that not enough programmers add the DOD perspective to their programming toolset. In this talk we\u2019ll demonstrate that transitioning code from OOP to DOD is not necessarily complex, by showing an example of real world OOP-to-DOD code conversion. We\u2019ll take OOP code, and chip away at it, thus showing the design process that allows us to create data-oriented code.\n\n-------\n\nA generalist coder, I enjoy being the jack of all languages, rather than an expert in one. I like learning new platforms and languages, and sharing what I learn in various forms, from internal tech-talks to conventions.\n\nI'm one of the founders of the MakeGamesJLM video game making community, and work at Lightricks Ltd as a video-rendering engine coder.\n\n-------\n\nC++ on Sea is an annual c++ and coding conference, usually held in Folkestone, Kent in the UK. The 2020 conference was moved to a virtual event due to social distancing requirements.\n\nProduced and Edited by Digital Medium Ltd: https://events.digital-medium.co.uk\nEnquiries: events@digital-medium.co.uk",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/d2eihVaJLNE/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/d2eihVaJLNE/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/d2eihVaJLNE/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/d2eihVaJLNE/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/d2eihVaJLNE/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 56,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "d2eihVaJLNE"
        },
        "videoOwnerChannelTitle": "cpponsea",
        "videoOwnerChannelId": "UCAczr0j6ZuiVaiGFZ4qxApw"
      },
      "contentDetails": {
        "videoId": "d2eihVaJLNE",
        "videoPublishedAt": "2020-07-27T19:00:26Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "ogHdC0IlnvG88LOeNikQV8djh4I",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy5CQzUwREI3MzkxQjdBM0E0",
      "snippet": {
        "publishedAt": "2021-09-29T09:13:45Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "CppCon 2016: Arthur O'Dwyer \u201cTemplate Normal Programming (part 1 of 2)\u201d",
        "description": "http://CppCon.org\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016\n\u2014\nWhat is \"template normal programming\"? It's template metaprogramming without so much of the \"meta\" part! During this talk, I promise not to mention SFINAE, or recursion, or standard type traits. We'll focus on the common scenarios \"I think this code could benefit from templates, but I don't understand how to organize it;\" \"I can't get anything to compile without errors;\" and \"My coworker wrote some template code and I don't understand any of it.\" \n\nIn Part I of the talk, we'll start with function templates and class templates, then explain variable templates (new in C++14) and template aliases (new in C++11). We'll do a deep dive into template type deduction; then talk about full and partial specialization; and finish up with an example that motivates the final feature of C++11 template syntax, explicit instantiation.\n\nIn Part II of the talk, we'll begin by demystifying tag dispatch and traits classes; discuss situations in which you have to add disambiguating \"template\" or \"typename\" keywords (and why); and do a deep dive into the rules of what gets instantiated when and where. We'll revisit template type deduction just long enough to explain how it works for variadic templates; and explain two common template idioms \u2014 the Curiously Recurring Template Pattern and the Mixin Pattern.\nTime permitting, we'll finish by exploring the big new features of templates according to the C++17 Draft Standard:\n- template\n- type deduction for class template constructors\n- explicit deduction guides\n--\nArthur O'Dwyer worked for many years at Green Hills Software, making the world's most optimizing C and C++ compilers. Now he works at Mixpanel in San Francisco, where he organizes a monthly C++ meetup.\n--\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/vwrXHznaYLA/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/vwrXHznaYLA/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/vwrXHznaYLA/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/vwrXHznaYLA/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/vwrXHznaYLA/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 57,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "vwrXHznaYLA"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "vwrXHznaYLA",
        "videoPublishedAt": "2016-09-29T04:15:16Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "9vB4_vEv3fOtGZ4LsMAaBrtJjBo",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy40OTQ5QjlEMDgzN0FBNUIw",
      "snippet": {
        "publishedAt": "2021-09-29T09:13:24Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "CppCon 2019: David Stone - Removing Metaprogramming From C++, Part 1 of N: constexpr Function Params",
        "description": "http://CppCon.org\n\u2014\nDiscussion & Comments: https://www.reddit.com/r/cpp/\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2019\n\u2014\nC++ has, buried within it, no less than four \"general-purpose\" programming languages. We have regular run-time C++, constexpr, templates, and macros. This presentation will cover a new proposal for C++: constexpr Function Parameters. It aims to make C++ a much more powerful language by helping to merge constexpr programming into regular C++. This will allow writing code that is faster, is easier and more natural to use, is terser, and catches errors at compile time. This new language feature would provide a way to annotate a function parameter as constexpr, letting you do things like overload on whether something is a compile-time constant, or pass constants to things that cannot have template parameters (like constructors and operators).\n\nThis presentation will focus on the principles used in the design of C++ and in this feature. From those principles, we will go into the details of the proposal. This presentation will briefly cover what constexpr is used for as of C++20 (the version of C++ that is being finalized now and will be officially 'released' in 2020). The proposal for constexpr function parameters is targeted at C++23 ('released' in 2023). The presentation will briefly cover the standardization process and timeline.\n\nRecommended background (none of these are necessary, but they are helpful):\n* No Shadow Worlds: https://probablydance.com/2015/02/16/ideas-for-a-programming-language-part-3-no-shadow-worlds/\n* Inventing on Principle: https://vimeo.com/36579366\n* constexpr: Introduction (as of C++11 and C++14) https://www.youtube.com/watch?v=fZjYCQ8dzTc\n\nThe proposal paper can be found at https://github.com/davidstone/isocpp/blob/master/constexpr-parameters.md\n\u2014 \nDavid Stone\nUber\nSoftware Engineer\nBoulder, CO\nDavid Stone works on autonomous vehicles at Uber in Louisville, Colorado. He is a member of the C++ standardization committee, where he chairs the Modules Study Group (SG2) and is the vice chair of the Evolution Working Group. \n\nHe has written an algorithm that solved the traveling salesman problem in constant time. He can square the circle and divide by zero. He can move his king into check. He once wrote an optimizing compiler that solved the halting problem, but doesn't need to use it because his code is already optimized.)\n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/bIc5ZxFL198/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/bIc5ZxFL198/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/bIc5ZxFL198/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/bIc5ZxFL198/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/bIc5ZxFL198/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 58,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "bIc5ZxFL198"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "bIc5ZxFL198",
        "videoPublishedAt": "2019-10-11T07:00:03Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "Ha0Ycx-47e-EIYat0fUH3Fn3iyc",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy43ODA2MDVCQzY5QzZDMjUw",
      "snippet": {
        "publishedAt": "2021-09-29T09:12:06Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "Inheritance Is The Base Class of Evil",
        "description": "Day 3 - Implementing non-intrusive runtime polymorphic objects with value-semantics, and multiple-undo in 20 minutes.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/bIhUE5uUFOA/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/bIhUE5uUFOA/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/bIhUE5uUFOA/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/bIhUE5uUFOA/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/bIhUE5uUFOA/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 59,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "bIhUE5uUFOA"
        },
        "videoOwnerChannelTitle": "Paulo Portela",
        "videoOwnerChannelId": "UCJwyXCf_TbyjbTNYG4q2XaQ"
      },
      "contentDetails": {
        "videoId": "bIhUE5uUFOA",
        "videoPublishedAt": "2013-09-23T08:49:08Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "GnX_n9SNAO1zhZn-r4bKQ5rExkU",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy5GNzk2RTlDQTNCQzJCQzJG",
      "snippet": {
        "publishedAt": "2021-09-29T09:11:22Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "CppCon 2015: Sean Parent \"Better Code: Data Structures\"",
        "description": "http://www.cppcon.org\n--\nThe standard library containers are often both misused and underused. Instead of creating new containers, applications are often structured with incidental data structures composed of objects referencing other object. This talk looks at some of the ways the standard containers can be better utilized and how creating (or using non-standard library) containers can greatly simplify code. The goal is no incidental data structures. \n--\nSean Parent is a principal scientist and software architect for Adobe\u2019s mobile digital imaging group. Sean has been at Adobe since 1993 when he joined as a senior engineer working on Photoshop and later managed Adobe\u2019s Software Technology Lab. In 2009 Sean spent a year at Google working on Chrome OS before returning to Adobe. From 1988 through 1993 Sean worked at Apple, where he was part of the system software team that developed the technologies allowing Apple\u2019s successful transition to PowerPC.\n--\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/sWgDk-o-6ZE/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/sWgDk-o-6ZE/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/sWgDk-o-6ZE/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/sWgDk-o-6ZE/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/sWgDk-o-6ZE/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 60,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "sWgDk-o-6ZE"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "sWgDk-o-6ZE",
        "videoPublishedAt": "2015-09-25T17:49:14Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "3ReskUllJO6qvESd0cK7z4bz55c",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy44QjNCNkRENjNFQTBEMUND",
      "snippet": {
        "publishedAt": "2021-09-29T09:09:50Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "CppCon 2019: Jason Turner \u201cThe Best Parts of C++\"",
        "description": "http://CppCon.org\n\u2014\nDiscussion & Comments: https://www.reddit.com/r/cpp/\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2019\n\u2014\nC++ is a big language, and it gets bigger every year. Is C++ it too big? Do we just continue to make the language harder to learn? Or, perhaps, do these language additions actually make the language better and easier to use? We will take a pragmatic look at the changes brought to C++ over the years and what impact they have had on how we write code.\n\u2014 \nJason Turner\nDeveloper, Trainer, Speaker\nGreater Denver Area\n\nHost of C++Weekly https://www.youtube.com/c/JasonTurner-lefticus, Co-host of CppCast http://cppcast.com, Co-creator and maintainer of the embedded scripting language for C++, ChaiScript http://chaiscript.com, and author and curator of the forkable coding standards document http://cppbestpractices.com.\n\nI'm available for contracting and onsite training.\n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/iz5Qx18H6lg/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/iz5Qx18H6lg/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/iz5Qx18H6lg/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/iz5Qx18H6lg/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/iz5Qx18H6lg/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 61,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "iz5Qx18H6lg"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "iz5Qx18H6lg",
        "videoPublishedAt": "2019-10-05T07:00:05Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "39fOUR7vUlAIl5gRtYGvfdEkuYg",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy5EMUJFNzRCNDRFQjE5RjM4",
      "snippet": {
        "publishedAt": "2021-09-29T09:09:23Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "CppCon 2019: Hartmut Kaiser \u201cAsynchronous Programming in Modern C++\u201d",
        "description": "http://CppCon.org\n\u2014\nDiscussion & Comments: https://www.reddit.com/r/cpp/\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2019\n\u2014\nWith the advent of modern computer architectures characterized by -- amongst other things -- many-core nodes, deep and complex memory hierarchies, heterogeneous subsystems, and power-aware components, it is becoming increasingly difficult to achieve best possible application scalability and satisfactory parallel efficiency. The community is experimenting with new programming models that rely on finer-grain parallelism, and flexible and lightweight synchronization, combined with work-queue-based, message-driven computation. The recently growing interest in the C++ programming language in industry and in the wider community increases the demand for libraries implementing those programming models for the language.\n\nIn this talk, we present a new asynchronous C++ parallel programming model that is built around lightweight tasks and mechanisms to orchestrate massively parallel (and -- if needed -- distributed) execution. This model uses the concept of (Standard C++) futures to make data dependencies explicit, employs explicit and implicit asynchrony to hide latencies and to improve utilization, and manages finer-grain parallelism with a work-stealing scheduling system enabling automatic load balancing of tasks.\n\nWe have implemented such a model as a C++ library exposing a higher-level parallelism API that is fully conforming to the existing C++11/14/17 standards and is aligned with the ongoing standardization work. This API and programming model has shown to enable writing highly efficient parallel applications for heterogeneous resources with excellent performance and scaling characteristics.\n\u2014 \nHartmut Kaiser\nCCT/LSU\nSTE||AR Group\n\nHartmut is a member of the faculty at the CS department at Louisiana State University (LSU) and a senior research scientist at LSU's Center for Computation and Technology (CCT). He received his doctorate from the Technical University of Chemnitz (Germany) in 1988. He is probably best known through his involvement in open source software projects, mainly as the author of several C++ libraries he has contributed to Boost, which are in use by thousands of developers worldwide. His current research is focused on leading the STE||AR group at CCT working on the practical design and implementation of future execution models and programming methods. His research interests are focused on the complex interaction of compiler technologies, runtime systems, active libraries, and modern system's architectures. His goal is to enable the creation of a new generation of scientific applications in powerful, though complex environments, such as high performance computing, distributed and grid computing, spatial information systems, and compiler technologies.\n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/Hi5WnRNckm4/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/Hi5WnRNckm4/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/Hi5WnRNckm4/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/Hi5WnRNckm4/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/Hi5WnRNckm4/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 62,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "Hi5WnRNckm4"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "Hi5WnRNckm4",
        "videoPublishedAt": "2019-10-07T07:00:05Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "d5gPtvqvQCpVpukYlbFXjGBtC90",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy5CNEYyNTVBNDdGMDI1MDNC",
      "snippet": {
        "publishedAt": "2021-09-29T09:09:06Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "CppCon 2019: Conor Hoekstra, \u201cAlgorithm Intuition (part 2 of 2)\u201d",
        "description": "http://CppCon.org\n\u2014\nDiscussion & Comments: https://www.reddit.com/r/cpp/\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2019\n\u2014\nData structure intuition is something that develops naturally for most software developers. In all languages, we rely heavily on standard containers and collections. Need fast insertion/lookup? Hashmap. Need a sorted data structure that stores unique values? Set. Duplicate values? Multiset. And so on.\n\nHowever, most software developers don't develop algorithm intuition quite as easily. Algorithms aren't taught as widely as data structures are, and aren't relied on as heavily. This talk aims to introduce some STL algorithms, show how they are commonly used, and show how by developing intuition about them (+ a little help from lambdas), you can unlock their true potential.\n\u2014 \nConor Hoekstra\nAmazon\nSoftware Development Engineer\nSan Francisco Bay Area\n\nConor is extremely passionate about programming languages, algorithms and beautiful code. He spent 5 years in Canada working on a large-scale C++ codebase. In 2018, he moved down to Silicon Valley and has spent the last year working for Amazon using C++, Java, Python, Go, Perl and more. He is in the midst of falling in love with Haskell and functional programming. He also has a YouTube channel where\u00a0he covers solutions to competitive programming problems and more.\n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/sEvYmb3eKsw/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/sEvYmb3eKsw/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/sEvYmb3eKsw/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/sEvYmb3eKsw/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/sEvYmb3eKsw/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 63,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "sEvYmb3eKsw"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "sEvYmb3eKsw",
        "videoPublishedAt": "2019-10-10T07:00:05Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "LDApKctZBlbLFSgILlBrKChjtZM",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy41ODIyMTgwQzA4NjJCQkZC",
      "snippet": {
        "publishedAt": "2021-09-29T09:08:14Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "CppCon 2019: Gordon Brown \u201cEfficient GPU Programming with Modern C++\u201d",
        "description": "http://CppCon.org\n\u2014\nDiscussion & Comments: https://www.reddit.com/r/cpp/\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2019\n\u2014\nComputer system architecture trends are constantly evolving to provide higher performance and computing power, to support the increasing demand for high-performance computing domains including AI, machine learning, image processing and automotive driving aids. The most recent being the move towards heterogeneity, where a system has one or more co-processors, often a GPU, working with it in parallel. These kinds of systems are everywhere, from desktop machines and high-performance computing supercomputers to mobile and embedded devices.\n\nMany-core GPU has shaped by the fast-growing video game industry that expects a tremendous massive number of floating-point calculations per video frame. The motive was to look for ways to maximize the chip area and power budget dedicated to floating-point calculations. The solution is to optimize for execution throughput of a massive number of threads. The design saves chip area and power by allowing pipelined memory channels and arithmetic operations to have long latency. The reduce area and power on memory and arithmetic allows designers to have more cores on a chip to increase the execution throughput.\n\nIn CPPCON 2018, we presented \"A Modern C++ Programming Model for CPUs using Khronos SYCL\", which provided an introduction to GPU programming using SYCL.\n\nThis talk will take this further. It will present the GPU architecture and the GPU programming model; covering the execution and memory model. It will describe parallel programming patterns and common parallel algorithms and how they map to the GPU programming model. Finally, through this lens, it will look at how to construct the control-flow of your programs and how to structure and move your data to achieve efficient utilisation of GPU architectures.\n\nThis talk will use SYCL as a programming model for demonstrating the concepts being presented, however, the concepts can be applied to any other heterogeneous programming model such as OpenCL or CUDA. SYCL allows users to write standard C++ code which is then executed on a range of heterogeneous architectures including CPUs, GPUs, DSPs, FPGAs and other accelerators. On top of this SYCL also provides a high-level abstraction which allows users to describe their computations as a task graph with data dependencies, while the SYCL runtime performs data dependency analysis and scheduling. SYCL also supports a host device which will execute on the host CPU with the same execution and memory model guarantees as OpenCL for debugging purposes, and a fallback mechanism which allows an application to recover from failure.\n\u2014 \nGordon Brown\nCodeplay Software\nPrincipal Software Engineer, SYCL & C++\nEdinburgh, United Kingdom\n\nGordon Brown is a principal software engineer at Codeplay Software specializing in heterogeneous programming models for C++. He has been involved in the standardization of the Khronos standard SYCL and the development of Codeplay's implementation of the standard from its inception. More recently he has been involved in the efforts within SG1/SG14 to standardize execution and to bring heterogeneous computing to C++.\n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/8pJS3n4MITM/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/8pJS3n4MITM/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/8pJS3n4MITM/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/8pJS3n4MITM/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/8pJS3n4MITM/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 64,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "8pJS3n4MITM"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "8pJS3n4MITM",
        "videoPublishedAt": "2019-10-06T07:00:00Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "s-BHKfyUQZ1gbVydFkk33pDeb-4",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy5FRjdGNDMzN0I2RTI3MDlG",
      "snippet": {
        "publishedAt": "2021-09-29T09:00:44Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "CppCon 2017: Louis Dionne \u201cRuntime Polymorphism: Back to the Basics\u201d",
        "description": "http://CppCon.org\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2017\n\u2014\nC++ solves the problem of runtime polymorphism in a very specific way. It does so through inheritance, by having all classes that will be used polymorphically inherit from the same base class, and then using a table of function pointers (the virtual table) to perform dynamic dispatch when a method is called. Polymorphic objects are then accessed through pointers to their base class, which encourages storing objects on the heap and accessing them via pointers. This is both inconvenient and inefficient when compared to traditional value semantics. As Sean Parent said: Inheritance is the base class of evil. \n\nIt turns out that this is only one of many possible designs, each of which has different tradeoffs and characteristics. This talk will explore the design space for runtime polymorphism in C++, and in particular will introduce a policy-based approach to solving the problem. We will see how this approach enables runtime polymorphism with stack-allocated storage, heap-allocated storage, shared storage, no storage at all (reference semantics), and more. We will also see how we can get fine-grained control over the dispatch mechanism to beat the performance of classic virtual tables in some cases. The examples will be based on a real implementation in the Dyno library [1], but the principles are independent from the library. \n\nAt the end of the talk, the audience will walk out with a clear understanding of the different ways of implementing runtime polymorphism, their tradeoffs, and with guidelines on when to use one implementation or another. \n\n[1]: https://github.com/ldionne/dyno\n\u2014 \nLouis Dionne: Amazon, Software Engineer\n\nLouis is a math and computer science enthusiast with interest in C++ (meta)programming, functional programming, domain specific languages and related subjects. He is a member of the C++ Standards Committee and of the Boost community, where he authored the Boost.Hana metaprogramming library.\n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/gVGtNFg4ay0/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/gVGtNFg4ay0/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/gVGtNFg4ay0/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/gVGtNFg4ay0/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/gVGtNFg4ay0/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 65,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "gVGtNFg4ay0"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "gVGtNFg4ay0",
        "videoPublishedAt": "2017-11-05T22:10:27Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "lPDovJTK_f3e93Thp_LVjbYxbPA",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy41RDUzRjJFQ0Y0MUI3NzU1",
      "snippet": {
        "publishedAt": "2021-09-29T09:00:38Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "Better Code: Runtime Polymorphism - Sean Parent",
        "description": "This talk explains why (and how) to implement polymorphism without inheritance in C++.\nThe talk contains many C++ tips and techniques, including many new features from C++11. During the course of that talk a key feature from Photoshop will be demonstrated and implemented.\n\n\n\nNDC Conferences\nhttps://ndc-london.com\nhttps://ndcconferences.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/QGcVXgEVMJg/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/QGcVXgEVMJg/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/QGcVXgEVMJg/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/QGcVXgEVMJg/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/QGcVXgEVMJg/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 66,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "QGcVXgEVMJg"
        },
        "videoOwnerChannelTitle": "NDC Conferences",
        "videoOwnerChannelId": "UCTdw38Cw6jcm0atBPA39a0Q"
      },
      "contentDetails": {
        "videoId": "QGcVXgEVMJg",
        "videoPublishedAt": "2017-02-27T14:00:58Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "WxJSLnfF79J1cg7ft4AKI5kckWY",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy5ERENFNTk4Q0Q2MTZDMTA5",
      "snippet": {
        "publishedAt": "2021-09-29T08:59:41Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "Back to Basics: Lambdas from Scratch - Arthur O'Dwyer - CppCon 2019",
        "description": "http://CppCon.org\n\u2014\nDiscussion & Comments: https://www.reddit.com/r/cpp/\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2019\n\u2014\nLambdas \u2014 even C++14's mysterious \"generic lambdas\" \u2014 are just syntactic sugar atop constructs that are perfectly understandable when approached from the right direction.\n\nWe'll start with the implementation of C-style functions, then move to overloading, function templates, non-static member functions, C++11 lambdas, and then demystify C++14's generic lambdas. We'll cover the minor changes to lambdas in C++17, such as the ability to capture `*this` by value, and indicate some of the minor changes coming in C++2a. Finally, we'll detour into the implementations of std::function and std::bind to show how they're different from lambdas.\n\nAttendees will leave this session with a clear understanding of how C++ \u2014 a language without dynamic typing or garbage collection \u2014 can nevertheless support efficient lambda closures.\n\u2014 \nArthur O'Dwyer\nNew York\n\nArthur O'Dwyer is the author of \"Colossal Cave: The Board Game,\" \"Mastering the C++17 STL\" (the book), and \"The STL From Scratch\" (the training course). He runs professional C++ training courses, is occasionally active on the C++ Standards Committee, and has a blog mostly about C++.\n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/3jCOwajNch0/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/3jCOwajNch0/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/3jCOwajNch0/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/3jCOwajNch0/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/3jCOwajNch0/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 67,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "3jCOwajNch0"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "3jCOwajNch0",
        "videoPublishedAt": "2019-10-08T07:00:00Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "CaDRgAGbMFU80Ya91iWUv14YpKw",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy4yM0EyQ0U1M0I2RkIwNTQ0",
      "snippet": {
        "publishedAt": "2021-09-29T08:59:31Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "C++ Code Smells - Jason Turner - CppCon 2019",
        "description": "http://CppCon.org\n\u2014\nDiscussion & Comments: https://www.reddit.com/r/cpp/\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2019\n\u2014\nThere are a lot of rules to remember for writing good C++. Which features to use? Which to avoid? The C++ Core Guidelines would be over 500 pages long if you were to try to print it! What happens if we swap this around and instead of Best Practices look at Code Smells. Coding decisions that should make you think twice and reconsider what you are doing.\n\nWe will ask:\n\n* What are the most important code smells?\n* Does it simplify the way we write code?\n\u2014 \nJason Turner\nDeveloper, Trainer, Speaker\nGreater Denver Area\n\nHost of C++Weekly https://www.youtube.com/c/JasonTurner-lefticus, Co-host of CppCast http://cppcast.com, Co-creator and maintainer of the embedded scripting language for C++, ChaiScript http://chaiscript.com, and author and curator of the forkable coding standards document http://cppbestpractices.com.\n\nI'm available for contracting and onsite training.\n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/f_tLQl0wLUM/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/f_tLQl0wLUM/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/f_tLQl0wLUM/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/f_tLQl0wLUM/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/f_tLQl0wLUM/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 68,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "f_tLQl0wLUM"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "f_tLQl0wLUM",
        "videoPublishedAt": "2019-10-16T07:00:03Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "_s8rMedWUzxY5sLlzVEjJssJ3y0",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy5DQjg2RDQyMEVGQkZFOEVF",
      "snippet": {
        "publishedAt": "2021-09-29T08:59:02Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "CppCon 2018: Herb Sutter \u201cThoughts on a more powerful and simpler C++ (5 of N)\u201d",
        "description": "http://CppCon.org\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2018\n\u2014\nPerhaps the most important thing we can do for C++ at this point in its evolution is to make sure we preserve its core strengths while also directing its evolution in ways that make it simpler to use. That is my own opinion at least, so this talk starts with a perspective question: What \u201cis C++,\u201d really? The language continues to evolve and change; as it does so, how can we be sure we\u2019re picking C++ evolutionary improvements that not only don\u2019t lose its \u201cC++-ic\u201d qualities, but make it a better C++ than ever?\n\nAt recent CppCons, I\u2019ve spoken about several of my own personal C++ evolution efforts and experiments, and why I think they\u2019re potentially important directions to explore for making C++ both more powerful and also simpler to use. The bulk of the talk is updates on two of these:\n\n1. Lifetime and dangling: At CppCon 2015, Bjarne Stroustrup and I launched The C++ Core Guidelines in our plenary talks. In my part starting at 29:06, I gave an early look at my work on the Guidelines \u201cLifetime\u201d profile, an approach for diagnosing many common cases of pointer/iterator dangling at compile time, with demos in an early MSVC-based prototype. For this year\u2019s CppCon, I\u2019ll cover what\u2019s new, including:\n    \u2022 use-after-move diagnoses\n    \u2022 better support for the standard library out of the box without annotation\n    \u2022 more complete implementations in two compilers: in MSVC as a static analysis extension, and in a Clang-based implementation that is efficient enough to run during normal compilation\n    \u2022 the complete 1.0 Lifetime specification being released on the Guidelines\u2019 GitHub repo this month\n\nI\u2019ll summarize the highlights but focus on what\u2019s new, so I recommend rewatching that talk video as a refresher for background for this year\u2019s session.\n\n2. Metaclasses: In my CppCon 2017 talk, I gave an early look at my \u201cmetaclasses\u201d proposal to use compile-time reflection and compile-time generation to make authoring classes both more powerful and also simpler. In this case, \u201csimpler\u201d means not only eliminating a lot of tedious boilerplate, but also eliminating many common sources of errors and bugs. For this year, we\u2019ll cover what\u2019s new, including:\n    \u2022 an update on the Clang-based implementation, which now supports more use cases including function parameter lists\n    \u2022 new examples, including from domains like concurrency\n    \u2022 an updated P0707 paper, with more links to working examples live on Godbolt, being posted in the next few weeks for the pre-San Diego committee mailing\n\u2014 \nHerb Sutter\nMicrosoft\nAuthor, and chair of the ISO C++ committee.\n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/80BZxujhY38/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/80BZxujhY38/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/80BZxujhY38/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/80BZxujhY38/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/80BZxujhY38/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 69,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "80BZxujhY38"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "80BZxujhY38",
        "videoPublishedAt": "2018-09-28T14:33:26Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "Wta9QP4bRMP8caLimRZbPubtt-w",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy4wQUE0QzM4MkJGQ0YwQjUx",
      "snippet": {
        "publishedAt": "2021-09-29T08:58:44Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "Stephan T. Lavavej \u201cFloating-Point \uff1ccharconv\uff1e: Making Your Code 10x Faster With C++17's Final Boss\u201d",
        "description": "http://CppCon.org\n\u2014\nDiscussion & Comments: https://www.reddit.com/r/cpp/\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2019\n\u2014\nFloating-point numbers are ancient, mysterious, and terrifying. Over the past 30 years, the C and C++ Standards have provided many functions for floating-point/string conversions, such as C's strtof(), strtod(), and printf() %a %e %f %g, and C++'s iostreams, stof(), stod(), and to_string(). Despite this history, floating-point is far from a solved problem - these functions have ranged from annoyingly to egregiously slow, and application developers and library maintainers alike have found it exceedingly difficult to understand floating-point behavior.\n\nThis session will present new and wondrous developments in the area of floating-point conversions. If your serialization code is bottlenecked by floating-point printing, this will accelerate your code by roughly 3x to 30x (yes, times, not percent). You can also improve the human-readability of your output. Along the way, this session will cover the basics of floating-point representations, dispelling common myths like fuzziness and non-determinism.\n\nSpecifically, C++17 added 3 pages of Standardese describing the charconv header and its functions from_chars() and to_chars(). This feature has required an unexpectedly large amount of implementation work, taking over a dev-year for MSVC and becoming the last C++17 library feature to ship. Coincidentally, Ulf Adams at Google developed a novel algorithm named Ryu, which is responsible for the amazing speed of to_chars(). This session will focus on how to use charconv and how to understand its many supported formats, with a brief overview of Ryu's techniques.\n\u2014 \nStephan T. Lavavej\nMicrosoft\nPrincipal Software Engineer\nRedmond, WA\nStephan T. Lavavej is a Principal Software Engineer at Microsoft, maintaining Visual C++'s implementation of the C++ Standard Library since 2007. He also designed a couple of C++14 features: make_unique and the transparent operator functors. He likes his initials (which people can actually spell) and cats (although he doesn't own any).\n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com *-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/4P_kbF0EbZM/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/4P_kbF0EbZM/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/4P_kbF0EbZM/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/4P_kbF0EbZM/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/4P_kbF0EbZM/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 70,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "4P_kbF0EbZM"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "4P_kbF0EbZM",
        "videoPublishedAt": "2019-10-11T07:00:00Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "WJ0ktOnOPRkPVF93B0kmTvZx18s",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy5CMUM0NzY5NzdEQzlGRjAx",
      "snippet": {
        "publishedAt": "2021-09-27T09:18:47Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "CppCon 2017: Jason Turner \u201cPractical C++17\u201d",
        "description": "http://CppCon.org\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2017\n\u2014\nC++17 adds many new features: structured bindings, deduction guides, if-init expressions, fold expressions, if constexpr, and enhanced constexpr support in the standard library. Each of these features are interesting, but what will be their cumulative effect on real code? We'll explore how each feature may (or may not) help in real code for enhanced readability, compile time performance and runtime performance.\n\u2014 \nJason Turner: Developer, Trainer, Speaker\n\nHost of C++Weekly https://www.youtube.com/c/JasonTurner-lefticus, Co-host of CppCast http://cppcast.com, Co-creator and maintainer of the embedded scripting language for C++, ChaiScript http://chaiscript.com, and author and curator of the forkable coding standards document http://cppbestpractices.com. \n\nI'm available for contracting and onsite training.\n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/nnY4e4faNp0/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/nnY4e4faNp0/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/nnY4e4faNp0/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/nnY4e4faNp0/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/nnY4e4faNp0/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 71,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "nnY4e4faNp0"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "nnY4e4faNp0",
        "videoPublishedAt": "2017-10-14T18:20:31Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "1rSzxpc2mKUUXsBFUJ_HIQOKyuY",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy5EMzJDRTUwQjBEOUVFQzAw",
      "snippet": {
        "publishedAt": "2021-09-26T13:25:05Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "Strong Types in C++ - Barney Dellar [C++ on Sea 2019]",
        "description": "C++ provides great support for types. They help us structure our data, communicate our intentions and avoid run-time errors. But, all too often, our APIs use built-in types such as int or float, instead of something more meaningful, like 'kilometres' or 'weight'. This means that we throw away all that support from the type system, and end up failing at run-time (if we are lucky).\n\nWhy do we give up on stronger types, and what can we do about it? This talk will address these questions and present solutions that will make your code safer - and more readable in the process.\n---\nI'm a Software Team Lead at Canon Medical Research Europe in Edinburgh. I've been coding in C++ for a couple of decades. I have a keen interest in Agile, technical skill, and helping others to get better at writing software.\n\nhttps://cpponsea.uk/sessions/strong-types-in-cpp.html\n\nFilmed and Edited by Digital Medium Ltd: https://events.digital-medium.co.uk\nEnquiries: events@digital-medium.co.uk",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/fWcnp7Bulc8/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/fWcnp7Bulc8/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/fWcnp7Bulc8/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/fWcnp7Bulc8/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/fWcnp7Bulc8/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 72,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "fWcnp7Bulc8"
        },
        "videoOwnerChannelTitle": "cpponsea",
        "videoOwnerChannelId": "UCAczr0j6ZuiVaiGFZ4qxApw"
      },
      "contentDetails": {
        "videoId": "fWcnp7Bulc8",
        "videoPublishedAt": "2019-02-17T17:00:04Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "Yus4Bjna7jv7FZUhPXTw5o1Lnsw",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy40NzE2MTY1QTM3RUI3QkU3",
      "snippet": {
        "publishedAt": "2021-09-26T08:21:43Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "C++ Weekly - Ep 125 - The Optimal Way To Return From A Function",
        "description": "Support this channel and learn something new; buy my C++ Best Practices Book! https://leanpub.com/cppbestpractices\n\nMy Training Classes: http://emptycrate.com/training.html\nSupport these videos: https://www.patreon.com/lefticus \nFollow me on twitter: https://twitter.com/lefticus\nChaiScript: http://chaiscript.com\nMusic: https://www.bensound.com/royalty-free-music",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/9mWWNYRHAIQ/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/9mWWNYRHAIQ/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/9mWWNYRHAIQ/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/9mWWNYRHAIQ/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/9mWWNYRHAIQ/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 73,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "9mWWNYRHAIQ"
        },
        "videoOwnerChannelTitle": "C\u1429\u1429 Weekly With Jason Turner",
        "videoOwnerChannelId": "UCxHAlbZQNFU2LgEtiqd2Maw"
      },
      "contentDetails": {
        "videoId": "9mWWNYRHAIQ",
        "videoPublishedAt": "2018-07-23T15:00:00Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "QGPIaSORFII8M_SFrDermT5uypI",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy44MkM2RjVEQkQ5N0I2MjVE",
      "snippet": {
        "publishedAt": "2021-09-26T03:24:36Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "CppCon 2018: Nicolai Josuttis \u201cThe Nightmare of Initialization in C++\u201d",
        "description": "http://CppCon.org\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2018\n\u2014\nAfter introducing uniform initialization with C++11, there are at least 5 ways in C++ to initialize an object. \nEach have them has different rules, different effects, and different usage depending on the context and goals. \nThe situation is so confusing that today nobody can tell anymore which type of initialization to teach to beginners. \nThat's nothing but a disaster. \n\nThis talk will discuss the different forms of initialization, compare them to know when to use which, discuss what changed with C++14 and C++17 and what still has to change, and finally what to teach now to beginners. \nI promise a source of trouble and discussion.\n\u2014 \nNicolai Josuttis\nIT Communication\n\nNicolai Josuttis (http://www.josuttis.com) is an independent system architect, technical manager, author, and consultant. He designs mid-sized and large software systems for the telecommunications, traffic, finance, and manufacturing industries.\n\nHe is well known in the programming community because he not only speaks and writes with authority (being the (co-)author of the world-wide best sellers The C++ Standard Library (www.cppstdlib.com), C++ Templates, and SOA in Practice), but is also an innovative presenter, having talked at various conferences and events.\n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/7DTlWPgX6zs/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/7DTlWPgX6zs/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/7DTlWPgX6zs/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/7DTlWPgX6zs/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/7DTlWPgX6zs/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 74,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "7DTlWPgX6zs"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "7DTlWPgX6zs",
        "videoPublishedAt": "2018-10-27T07:00:00Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "SqA8yStdjZCobwHuC3gyt6oWvG4",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy44QTA1QTQyRTc3M0VGQzYx",
      "snippet": {
        "publishedAt": "2021-09-25T19:43:51Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "Searching Duplicate Files with C",
        "description": "References:\n- The Russian Book About Computer Forensics https://www.ozon.ru/product/forenzika-teoriya-i-praktika-rassledovaniya-kiberprestupleniy-161626064/\n- Crypto Algorithms Repo: https://github.com/B-Con/crypto-algorithms\n- STB Hash Table: https://github.com/nothings/stb/blob/master/stb_ds.h\n- The Source Code: https://github.com/tsoding/dedup\n\nSupport:\n- Patreon: https://www.patreon.com/tsoding\n- Twitch Subscription: https://www.twitch.tv/subs/tsoding\n- Streamlabs Donations: https://streamlabs.com/tsoding/tip\n\nFeel free to use this video to make highlights and upload them to YouTube (also please put the link to this channel in the description)",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/bpCJf67e1lI/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/bpCJf67e1lI/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/bpCJf67e1lI/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/bpCJf67e1lI/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/bpCJf67e1lI/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 75,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "bpCJf67e1lI"
        },
        "videoOwnerChannelTitle": "Tsoding Daily",
        "videoOwnerChannelId": "UCrqM0Ym_NbK1fqeQG2VIohg"
      },
      "contentDetails": {
        "videoId": "bpCJf67e1lI",
        "videoPublishedAt": "2021-08-26T15:00:14Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "K5O_0cZ8v56FJOCHd5lV6NhzM6o",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy4wMDFGNzBEOTU4Q0Y1Q0RG",
      "snippet": {
        "publishedAt": "2021-09-25T15:54:14Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "The Hidden Secrets of Move Semantics - Nicolai Josuttis - CppCon 2020",
        "description": "https://cppcon.org/\nhttps://github.com/CppCon/CppCon2020\n---\n\nMove semantics, introduced with C++11, has become a hallmark of modern C++ programming. However, it also complicates the language in many ways. Even after several years of support, experienced programmers struggle with all the details of move semantics. And style guides still recommend different consequences for programming even of trivial classes. And in the C++ community we still discuss semantic details.\n\nWhile I took the time to write up all the facts and details in my new book \"C++ Move Semantics - The Complete Guide (cppmove.com), I learned a lot I wasn't aware of. Note that the final book will have 200 pages.\n\nThis talk is about the most surpising facts, even experts sometimes don't know.\n\nSome hidden secrets so that you understand C++ a bit better.\n\n---\nNicolai Josuttis (http://www.josuttis.com) is well known in the programming community because he not only speaks and writes with authority (being the (co-)author of the world-wide best sellers The C++ Standard Library (www.cppstdlib.com), C++ Templates (www.tmplbook.com), C++17 - The Complete Guide (www.cppstd17.com), C++ Move Semantics - The Complete Guide (www.cppmove.com), and SOA in Practice), but is also an innovative presenter, having talked at various conferences and events.\n\nHe has been an active member of the C++ standards committee for more than 20 years.\n---\nStreamed & Edited by Digital Medium Ltd - events.digital-medium.co.uk\nevents@digital-medium.co.uk \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/TFMKjL38xAI/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/TFMKjL38xAI/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/TFMKjL38xAI/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/TFMKjL38xAI/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/TFMKjL38xAI/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 76,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "TFMKjL38xAI"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "TFMKjL38xAI",
        "videoPublishedAt": "2020-09-24T02:30:10Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "9BGl6OvzWevVMzeTQRXXxD4VLSE",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy4xNTZBNUQxMDZBQzFGMjkw",
      "snippet": {
        "publishedAt": "2021-09-25T15:04:42Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "Texture Mapping & Polygon Rasterizing Tutorial (2/2) [C++20]",
        "description": "Textured polygons are the foundation of nearly all 3D games in existence. Used before even 3D-capable GPUs were a thing, they were rendered using nothing but software. How was that achieved? Let\u2019s explore an easy and intuitive method. We create an extensible 3D polygon rasterizer using nothing but standard C++20 (and libSDL for 2D graphics).\n\nBecome a member: https://youtube.com/Bisqwit/join\n\nMy links:\nTwitter: https://twitter.com/RealBisqwit\nLiberapay: https://liberapay.com/Bisqwit\nSteady: https://steadyhq.com/en/bisqwit\nPatreon: https://patreon.com/Bisqwit (Other options at https://bisqwit.iki.fi/donate.html)\nTwitch: https://twitch.tv/RealBisqwit\nHomepage: https://iki.fi/bisqwit/\n\nYou can contribute subtitles: http://www.youtube.com/timedtext_video?ref=share&v=hxOw_p0kLfI\n\nDownloads:\nhttps://bisqwit.iki.fi/jkp/polytut/\n\nMusic list (s = SPC-OPL conversion):\n\u2014 Super Mario RPG \u00ad\u2014 Sunken Ship (s)\n\u2014 Tales of Phantasia \u2014 Final Act (s)\n\u2014 Final Fantasy V \u2014 World 1+2 (s)\n\u2014 Famicom Tantei Club 2 \u2014 Interviews (s)\n\u2014 Energy Breaker \u2014 Heroes\u2019 Adventure (s)\n\u2014 Final Fantasy Mystic Quest \u2014 Shrine (s)",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/hxOw_p0kLfI/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/hxOw_p0kLfI/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/hxOw_p0kLfI/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/hxOw_p0kLfI/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/hxOw_p0kLfI/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 77,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "hxOw_p0kLfI"
        },
        "videoOwnerChannelTitle": "Bisqwit",
        "videoOwnerChannelId": "UCKTehwyGCKF-b2wo0RKwrcg"
      },
      "contentDetails": {
        "videoId": "hxOw_p0kLfI",
        "videoPublishedAt": "2020-04-06T16:00:24Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "IP5oP82HZBn9tru2M2q2Kw_t3YQ",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy4zQTkzRjgxRTY0OEU0MkM3",
      "snippet": {
        "publishedAt": "2021-09-24T08:36:27Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "CppCon 2019: Matt Godbolt \u201cCompiler Explorer: Behind The Scenes\u201d",
        "description": "http://CppCon.org\n\u2014\nDiscussion & Comments: https://www.reddit.com/r/cpp/\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2019\n\u2014\nIn the six years that Compiler Explorer has been running it has gone from a hacky bunch of shell and Javascript code running on a basement server, serving tens of requests a week to a slightly less hacky bunch of shell and Javascript code scaling out to many computers in the cloud handling tens of thousands of requests a day.\n\nIn this talk, Matt will explain the journey Compiler Explorer has been on, how it has changed over the years, and how it works now. Along the way Matt will show some of his favourite compiler optimisations discovered while using the site, some little-known Compiler Explorer features, and the future direction of the site.\n\nAttendees should be aware there's not very much C++ content in this talk: it's mostly DevOps and blood, sweat and tears of a low-level C++ programmer trying to hack together a website, and discovering an amazing community along the way.\n\u2014 \nMatt Godbolt\nAquatic Capital Management, LLC\nDevelopment Engineer\nGreater Chicago Area\n\nMatt Godbolt is the creator of the Compiler Explorer website. He is passionate about writing efficient code. He has previously worked at a trading firm, on mobile apps at Google, run his own C++ tools company and spent more than a decade making console games. When he's not hacking on Compiler Explorer, Matt enjoys writing emulators for old 8-bit computer hardware.\n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/kIoZDUd5DKw/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/kIoZDUd5DKw/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/kIoZDUd5DKw/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/kIoZDUd5DKw/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/kIoZDUd5DKw/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 78,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "kIoZDUd5DKw"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "kIoZDUd5DKw",
        "videoPublishedAt": "2019-10-09T07:00:04Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "InAviPbBgrZ7Z3iZGNer6lesv4s",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy44QTY2MEEzNzBFQUJCMUQ2",
      "snippet": {
        "publishedAt": "2021-09-24T03:48:22Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "CppCon 2018: Nir Friedman \u201cUnderstanding Optimizers: Helping the Compiler Help You\u201d",
        "description": "http://CppCon.org\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2018\n\u2014\nOptimizing compilers can seem rather fickle: sometimes they do something very sophisticated that surprises us, other times they fail to perform an optimization we assumed they would. By understanding the limits on their knowledge, and the constraints in their output, we can much more reliably predict when certain kinds of optimizations can occur. This, in turn, allows our designs to be informed by being friendly to the optimizer. \n\nThis talk will discuss concepts fundamental to understanding optimization such as the role of static types, basic blocks, and correctness of emitted code. It will also go through many examples: where inlining does and doesn't occur and why, const propagation, branch pruning, utilizing inferred information/values, the roles of const and value vs reference semantics, etc. It will also show how to help the compiler: writing code in different ways which encourages different optimization strategies. \n\u2014 \nNir Friedman\nQuantitative Developer, Tower Research Capital\n\nAfter completing a PhD in physics, Nir started working doing C++ in low latency and high frequency trading. He's interested in the challenges of writing robust code at scale, and highly configurable code that minimizes performance trade-offs.\n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/8nyq8SNUTSc/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/8nyq8SNUTSc/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/8nyq8SNUTSc/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/8nyq8SNUTSc/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/8nyq8SNUTSc/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 79,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "8nyq8SNUTSc"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "8nyq8SNUTSc",
        "videoPublishedAt": "2018-10-12T18:01:04Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "FdvKIigYse6zASu76Nb0Ct6jkgE",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy4xNjIyNEE0MDEyRDlCMjBE",
      "snippet": {
        "publishedAt": "2021-09-19T23:49:24Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "Sean Baxter",
        "description": "",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/e4iX0-FNsW8/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/e4iX0-FNsW8/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/e4iX0-FNsW8/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/e4iX0-FNsW8/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/e4iX0-FNsW8/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 80,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "e4iX0-FNsW8"
        },
        "videoOwnerChannelTitle": "Cpp.chat",
        "videoOwnerChannelId": "UCsefcSZGxO9lTBqFbsV3sJg"
      },
      "contentDetails": {
        "videoId": "e4iX0-FNsW8",
        "videoPublishedAt": "2020-11-18T09:18:22Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "Uu6TkSaTqjc6Rgy43xT9KexPg_Y",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy5CMEVBRUJERkUyNTBENTkz",
      "snippet": {
        "publishedAt": "2021-09-19T22:37:34Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "CppCon 2017: Mathieu Ropert \u201cUsing Modern CMake Patterns to Enforce a Good Modular Design\u201d",
        "description": "http://CppCon.org\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2017\n\u2014\nCMake is the build system chosen by most open-source C++ projects. While it is fully capable of helping you enforce a good modular design, those features are usually not well known or understood. \n\nIn this talk I will present modern CMake practices that will simplify your project build and help you design better C++ components with clear dependencies and build interfaces (the sum of compile flags required to use a given library). \n\nWe will first do a quick recap of the theory behind modular design, most of it coming from John Lakos' work on Large Scale C++ Software Development. Then we will see a few of the legacy CMake patterns that can be found in a lot of open source projects and explain their shortcomings. We will learn how to create a clean C++ library using modern CMake practices and depend on it in others modules. Finally, we will explore the options available to export the build interfaces for use by external projects. In this last part a few external tools will be discussed such as pkg-config and Conan.\n\u2014 \nMathieu Ropert: Senior Developer, Murex\n\nMathieu is a Senior Developer at Murex where he works as a C++ expert and animates internal workshops & events. A long term open-source enthusiast, he tries to make C++ more portable across platforms. He is also co-host of the Paris C++ Meetup.\n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com *-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/eC9-iRN2b04/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/eC9-iRN2b04/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/eC9-iRN2b04/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/eC9-iRN2b04/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/eC9-iRN2b04/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 81,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "eC9-iRN2b04"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "eC9-iRN2b04",
        "videoPublishedAt": "2017-10-13T21:31:21Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "AWAeVaWV5bVTufVD8j649dhlXaU",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy5FQUY2Qzk4RUFDN0ZFRkZF",
      "snippet": {
        "publishedAt": "2021-09-19T22:37:16Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "More Modern CMake - Deniz Bahadir - Meeting C++ 2018",
        "description": "More Modern CMake (Reupload with slide recording provided by speaker, thanks Deniz!)\nDeniz Bahadir\nMeeting C++ 2018\n\nSlides: https://meetingcpp.com/mcpp/slides",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/y7ndUhdQuU8/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/y7ndUhdQuU8/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/y7ndUhdQuU8/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/y7ndUhdQuU8/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/y7ndUhdQuU8/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 82,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "y7ndUhdQuU8"
        },
        "videoOwnerChannelTitle": "Meeting Cpp",
        "videoOwnerChannelId": "UCJpMLydEYA08vusDkq3FmjQ"
      },
      "contentDetails": {
        "videoId": "y7ndUhdQuU8",
        "videoPublishedAt": "2019-02-25T15:52:09Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "dSCDwDHYU20Bvgm35EM_QnMXUkk",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy4xN0Y2QjVBOEI2MzQ5OUM5",
      "snippet": {
        "publishedAt": "2021-09-18T18:50:21Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "CppCon 2018: \u201cC++ Dependency Management: from Package Consumption to Project Development\u201d",
        "description": "http://CppCon.org\n__\nBoris Kolpackov \u201cC++ Dependency Management: from Package Consumption to Project Development\u201d\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2018\n\u2014\nTL;DR: Want to see what Cargo for C++ looks like? Then this talk is for you. \n\nExisting C++ package managers focus primarily on consumption: there is a repository of released packages that we can download, build, and install. But what happens between releases of these packages? In other words, how are they developed, tested, and delivered? Currently, the answer is \"painfully\" (and rarely by mere mortals). \n\nMeantime, as languages competing with C++ have shown (see Rust's Cargo, Go's dep/vgo), the state of the art has moved on and a \"consumption manager\" alone is no longer sufficient: we need support for managing dependencies of a project over its entire development lifecycle -- a tool commonly referred to as a project dependency manager. \n\nIn this talk I would like to show the C++ dependency management workflow focused on development as supported by the build2 toolchain. Specifically, we will create from scratch a cross-platform C++ project, add/manage a few dependencies (that can come both from a central package repository as well as individual git repositories), setup CI for all the major platform/compiler combinations, go through a couple of releases, and, finally, publish our package to a central repository and see how our users can reproduce the exact set of dependencies we used in our builds (the lockfile functionality). \n\nAnd this won't be an entirely toy example either: in the process we will touch on quite a few real-world challenges, including continuous versioning between releases, how to depend on unreleased revisions in version control repositories, dependency auto-synchronization through build system integration, as well as how the upcoming C++ Modules will likely affect packaging.\n\u2014 \nBoris Kolpackov, Code Synthesis\nChief Hacking Officer\n\nBoris Kolpackov is a founder and CHO (Chief Hacking Officer) at Code Synthesis, a company focusing on the development of open-source tools and libraries for C++. For the past 10 years Boris has been working on solving interesting problems in the context of C++ using domain-specific languages (DSL), C++ parsing, source-to-source translation, and code generation. His notable projects to date include ODB (ORM for C++), XSD and XSD/e (XML Schema to C++ compilers), as well as libstudxml (XML parser/serializer library for C++).\n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/Nni2Qu2WitY/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/Nni2Qu2WitY/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/Nni2Qu2WitY/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/Nni2Qu2WitY/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/Nni2Qu2WitY/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 83,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "Nni2Qu2WitY"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "Nni2Qu2WitY",
        "videoPublishedAt": "2018-10-19T07:00:04Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "ZLqygiLG81qSHuByWgTXE3tlMEg",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy4yQzk4QTA5QjkzMTFFOEI1",
      "snippet": {
        "publishedAt": "2021-09-18T18:49:43Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "Why is C++ so Slow? - Boris Kolpackov - CppCon 2019",
        "description": "http://CppCon.org\n\u2014\nDiscussion & Comments: https://www.reddit.com/r/cpp/\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2019\n\u2014\nLightning Talk\n\u2014 \nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/j-0_D4yLhj4/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/j-0_D4yLhj4/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/j-0_D4yLhj4/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/j-0_D4yLhj4/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/j-0_D4yLhj4/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 84,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "j-0_D4yLhj4"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "j-0_D4yLhj4",
        "videoPublishedAt": "2019-10-25T07:00:05Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "kZ4voAg2DjYq6BB-nEP0Xv7rFKQ",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy42RTNCOEMxREI3Q0VDMjU2",
      "snippet": {
        "publishedAt": "2021-09-18T15:58:27Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "CppCast Episode 315: Learning C++ with Serenity",
        "description": "Rob and Jason are joined by Linus Groh. They first discuss a new feature of Compiler Explorer and some ISO papers. Then they talk to Linus about his involvement in the Serenity project, learning C++ as he became a contributor.\n\n\nFull show notes available at: https://cppcast.com/learning-cpp-serenity/",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/YLN0A9hziKQ/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/YLN0A9hziKQ/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/YLN0A9hziKQ/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/YLN0A9hziKQ/sddefault.jpg",
            "width": 640,
            "height": 480
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 85,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "YLN0A9hziKQ"
        },
        "videoOwnerChannelTitle": "CppCast",
        "videoOwnerChannelId": "UCuCjADS4u3uJDTqUaG0H9dA"
      },
      "contentDetails": {
        "videoId": "YLN0A9hziKQ",
        "videoPublishedAt": "2021-09-18T13:46:13Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "xFSXzMY0wcpQ2mWkg8c0oUR82OA",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy40MDNEMzA0QTBFRThFMzBE",
      "snippet": {
        "publishedAt": "2021-09-18T15:56:59Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "Making Games Start Fast: A Story About Concurrency - Mathieu Ropert - CppCon 2020",
        "description": "https://cppcon.org/\nhttps://github.com/CppCon/CppCon2020/blob/main/Presentations/making_games_start_fast/making_games_start_fast__mathieu_ropert__cppcon_2020.pdf\n---\nA common complaint in game development is that games take to long to start up. Players hate it and developers waste a long time watching loading screens.\nLast spring I dived into my game's startup code and figured out ways to shave tens of seconds out of the time to reach main menu, and was able to introduce similar benefits to most of our other titles by looking into threading efficiency.\n\nIn this port-mortem analysis, I will present the various steps I took to analyze concurrency, improve threading performance and reduce lock contention.\nAttendees will be shown how Intel vTune can be used to profile threading issues, how \"thread safe\" APIs can be misleading and how re-architecturing code in a lock-free fashion can drastically improve throughput.\nWe will also briefly touch how user-facing application can cheat and achieve perceived speedups by knowing the users' workflow. \n\n---\nMathieu Ropert is a French C++ expert working on (somewhat) historical video games. Mathieu decided to upgrade his compiler once and has been blogging about build systems ever since. Mathieu is a past speaker at CppCon, Meeting C++ and ACCU. Used to run the Paris C++ User Group. Currently lives in Sweden. \n\n---\nStreamed & Edited by Digital Medium Ltd - events.digital-medium.co.uk\nevents@digital-medium.co.uk \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/TcuPIVKNSN0/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/TcuPIVKNSN0/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/TcuPIVKNSN0/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/TcuPIVKNSN0/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/TcuPIVKNSN0/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 86,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "TcuPIVKNSN0"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "TcuPIVKNSN0",
        "videoPublishedAt": "2020-10-03T23:00:09Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "AfefBODr9de52Vy7waU6H060EG8",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy42MjYzMTMyQjA0QURCN0JF",
      "snippet": {
        "publishedAt": "2021-09-18T15:56:37Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "Pipes: How Plumbing Can Make Your C++ Code More Expressive - Jonathan Boccara - CppCon 2020",
        "description": "https://cppcon.org/\nhttps://github.com/CppCon/CppCon2020/blob/main/Presentations/pipes_how_plumbing_can_make_your_cpp_code_more_expressive/pipes_how_plumbing_can_make_your_cpp_code_more_expressive__jonathan_boccara__cppcon_2020.pdf\n---\nIn code we work with collections of objects all the time, yet it's not always easy to operate on them with concise and expressive code.\n\nTraversing collections with for loops gets ugly and brittle as soon as they have more than a few lines.\nSTL algorithms are a big step further, but they don't compose well (ever had the need for a \"transform_if\" algorithm?)\nRanges are another big step further, but like every library they don't cover all cases (Did you know about the transform-filter performance problem? Or that you're not allowed to use rvalues as inputs? Or that you have to use tuples when working on several collections?)\n\nIn this talk you will discover pipes, another way to write expressive code to operate with collections: write your code as plumbing through which your data flows.\n\nLike every library pipes also have their limitations, which we will present, but using them as a complement of ranges and STL algorithms will bring you the following benefits:\n- An efficient transform-filter\n- zip two collections without using tuples\n- send data to several outputs\n- use rvalues as inputs and as intermediate results\n- pick up the data coming out of STL algorithms\n- integrate results in destination containers\n- pipes are very easy to implement, so you can add new ones\n\nCome see how pipes can improve your code!\n\n---\nJonathan Boccara is a Principal Engineering Lead at Murex where he works on large codebases in C++.\nHis primary focus is searching how to make code more expressive. He has dedicated his blog, Fluent C++, to writing expressive code in C++.\nHe also gives internal trainings on C++ every day, in the short format called \"Dailies\".\n\n---\nStreamed & Edited by Digital Medium Ltd - events.digital-medium.co.uk\nevents@digital-medium.co.uk \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/oYEpf5A2qrE/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/oYEpf5A2qrE/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/oYEpf5A2qrE/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/oYEpf5A2qrE/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/oYEpf5A2qrE/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 87,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "oYEpf5A2qrE"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "oYEpf5A2qrE",
        "videoPublishedAt": "2020-10-04T15:00:11Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "85HM0-N_ps7cud3tgAxUFf2WF9o",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy4xM0YyM0RDNDE4REQ1NDA0",
      "snippet": {
        "publishedAt": "2021-09-18T15:55:52Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "CppCon 2016: David Sankel \u201cBuilding Software Capital: How to write the highest quality code and why\"",
        "description": "http://CppCon.org\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016\n\u2014\nThis talk discusses the ins and outs of how to write software that is at such a high standard that it gets reused everywhere. It covers organization, design, infrastructure, testing, documentation, reviews, and general suggestions based on my experience in the industry.\n\u2014 \nDavid Sankel\nBloomberg\nNew York, New York\nDavid Sankel is a professional software developer/architect based in the USA and an active member of the C++ Standardization Committee. His prolific software developments have included CAD/CAM, computer graphics, visual programming languages, web applications, computer vision, and cryptography. He is a frequent speaker at the C++Now conferences and is especially well known for his advanced functional programming in C++ talks. David\u2019s interests include large-scale development, dependently typed languages, semantic domains, EDSLs, and functional reactive programming. David's current research interests include dependently typed languages, semantic domains, EDSLs, and functional reactive programming. He currently works for Bloomberg.\n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/ta3S8CRN2TM/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/ta3S8CRN2TM/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/ta3S8CRN2TM/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/ta3S8CRN2TM/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/ta3S8CRN2TM/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 88,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "ta3S8CRN2TM"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "ta3S8CRN2TM",
        "videoPublishedAt": "2016-10-05T18:11:21Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "FWdJ5lOUf4KdulkBe2U_EzJNlzQ",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy5ERkUyQTM0MzEwQjZCMTY5",
      "snippet": {
        "publishedAt": "2021-09-18T15:55:37Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "CppCon 2019: Marshall Clow \u201cstd::midpoint? How Hard Could it Be?\u201d",
        "description": "http://CppCon.org\n\u2014\nDiscussion & Comments: https://www.reddit.com/r/cpp/\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2019\n\u2014\nThe standards committee adopted \"P0811: Well-behaved interpolation for numbers and pointers\" for C++20.\nIt includes a new library call `std::midpoint`.\nThe paper says \"The simple problem of computing a value between two other values is surprisingly subtle in general.\"\n\nIn this talk, I will explore this simple call, provide a history of the development in libc++, and show some of the pitfalls.\nUndefined behavior will rear its ugly head, along with numeric representations, and the arcane C promotion rules.\n\nAlong the way, we'll talk about testing, and why writing extensive tests helps everyone.\n\u2014 \nMarshall Clow\nC++ Alliance\nEngineer\nMarshall has been programming professionally for 35 yearsHe is the author of Boost.Algorithm, and has been a contributor to Boost for more than 15 years. He is the chairman of the Library working group of the C++ standard committee. He is the lead developer for libc++, the C++ standard library for LLVM.\n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/sBtAGxBh-XI/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/sBtAGxBh-XI/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/sBtAGxBh-XI/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/sBtAGxBh-XI/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/sBtAGxBh-XI/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 89,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "sBtAGxBh-XI"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "sBtAGxBh-XI",
        "videoPublishedAt": "2019-10-12T07:00:04Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "g97aQRp5as0h6P8aI6HZx-8Y1og",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy5CNTcxMDQ0NThBNzMxODYz",
      "snippet": {
        "publishedAt": "2021-09-18T15:55:29Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "Retiring the Singleton Pattern: Concrete Suggestions for What to use Instead - Peter Muldoon",
        "description": "https://cppcon.org/\nhttps://github.com/CppCon/CppCon2020/blob/main/Presentations/retiring_the_singleton_pattern/retiring_the_singleton_pattern__peter_muldoon__cppcon_2020.pdf\n---\n\u201cThe worst part of this whole topic is that the people who hate singletons rarely give concrete suggestions for what to use instead.\u201d - stackoverflow\n\nIn this talk, we will explore just such an approach that will transform currently untestable code containing underlying singletons with a fully testable solution. These code changes are transparent to the original callers of that function so no calling code changes are required.\n\nThis approach will be further expanded to handle multiple interdependent singletons. The replacement of error prone specific order of initialization calls to the singletons will be exchanged for \"hard to misuse\" automatic initialization using features of the language.\n\nA host of other potential real world problems with replacing singletons are shown with solutions presented for both legacy and modern C++.\n\nThis alternative approach has been successfully employed in multiple areas in Bloomberg where developers believed there was no other feasible choice.\n\n---\nPeter Muldoon\nBloomberg\nSenior developer\nNYC\n\n---\nStreamed & Edited by Digital Medium Ltd - events.digital-medium.co.uk\nevents@digital-medium.co.uk \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/K5c7uvWe_hw/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/K5c7uvWe_hw/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/K5c7uvWe_hw/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/K5c7uvWe_hw/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/K5c7uvWe_hw/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 90,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "K5c7uvWe_hw"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "K5c7uvWe_hw",
        "videoPublishedAt": "2020-10-08T19:00:10Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "Kp04bh6ZCwFCvXyOOZiD6oCF1Jg",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy5CNTZFOTNGQzZEODg1RUQx",
      "snippet": {
        "publishedAt": "2021-09-18T10:44:40Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "CppCon 2019: Andrei Alexandrescu \u201cSpeed Is Found In The Minds of People\"",
        "description": "http://CppCon.org\n\u2014\nDiscussion & Comments: https://www.reddit.com/r/cpp/\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2019\n\u2014\nIn all likelihood, sorting is one of the most researched classes of algorithms. It is a fundamental task in Computer Science, both on its own and as a step in other algorithms. Efficient algorithms for sorting and searching are now taught in core undergraduate classes. Are they at their best, or is there more blood to squeeze from that stone? This talk will explore a few less known \u2013 but more allegro! \u2013 variants of classic sorting algorithms. And as they say, the road matters more than the destination. Along the way, we'll encounter many wondrous surprises and we'll learn how to cope with the puzzling behavior of modern complex architectures.\n\u2014 \nAndrei Alexandrescu\nThe D Language Foundation\nVice President and Treasurer\nBoston MA\n\nAndrei Alexandrescu is a researcher, software engineer, and author. He wrote three best-selling books on programming (Modern C++ Design, C++ Coding Standards, and The D Programming Language) and numerous articles and papers on wide-ranging topics from programming to language design to Machine Learning to Natural Language Processing. Andrei holds a PhD in Computer Science from the University of Washington and a BSc in Electrical Engineering from University \"Politehnica\" Bucharest. He is the Vice President of the D Language Foundation.\n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/FJJTYQYB1JQ/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/FJJTYQYB1JQ/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/FJJTYQYB1JQ/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/FJJTYQYB1JQ/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/FJJTYQYB1JQ/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 91,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "FJJTYQYB1JQ"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "FJJTYQYB1JQ",
        "videoPublishedAt": "2019-09-18T16:03:04Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "_woRUqWkAuEWxqmKiQ3YVnZB7so",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy4wRjhFM0MxMTU1MEUzQ0VB",
      "snippet": {
        "publishedAt": "2021-09-18T10:44:34Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "CppCon 2019: Sean Parent \u201cBetter Code: Relationships\u201d",
        "description": "http://CppCon.org\n\u2014\nDiscussion & Comments: https://www.reddit.com/r/cpp/\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2019\n\u2014\nComputer scientists are bad at relationships. Nearly every program crash is rooted in a mismanaged relationship, yet we spend most of our time discussing types and functions and not the relationships connecting them together. This talk looks at common ways data and code are connected in an application, how those relationships are typically represented, and the problems caused by the use, and misuse of these paradigms. Then we'll look at ways to model these relationships in C++ and use them to build correct applications.\n\u2014 \nSean Parent\nAdobe / Photoshop\nSr. Principal Scientist\nSan Jose, CA\n\nSean Parent is a principal scientist and software architect for Adobe\u2019s digital imaging group. Sean has been at Adobe since 1993 when he joined as a senior engineer working on Photoshop and later managed Adobe\u2019s Software Technology Lab. In 2009 Sean spent a year at Google working on Chrome OS before returning to Adobe to work on mobile and web technology. From 1988 through 1993 Sean worked at Apple, where he was part of the system software team that developed the technologies allowing Apple\u2019s successful transition to PowerPC.\n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/ejF6qqohp3M/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/ejF6qqohp3M/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/ejF6qqohp3M/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/ejF6qqohp3M/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/ejF6qqohp3M/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 92,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "ejF6qqohp3M"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "ejF6qqohp3M",
        "videoPublishedAt": "2019-09-20T14:00:08Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "j39qm_sCCWyVGIcflUXV4vH-dAc",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy41OURENDc2NEM1MDI5Mjky",
      "snippet": {
        "publishedAt": "2021-09-18T10:44:15Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "Back to Basics: The Structure of a Program - Bob Steagall - CppCon 2020",
        "description": "https://cppcon.org/\nhttps://github.com/CppCon/CppCon2020/blob/main/Presentations/back_to_basics_the_structure_of_a_program/back_to_basics_the_structure_of_a_program__bob_steagall__cppcon_2020.pdf\n---\n\nWhat's the difference between a declaration and a definition? What is a translation unit, and how is it related to the source code that you write? How would you describe the one-definition rule? What is name-mangling? \n\nIf the answers to these questions are a little hazy for you, or if you would like a refresher on the fundamentals of how source code is converted into executable programs, then this talk is for you.\n\nIn this session, we'll cover the process of compiling and linking C++ source code, describing and discussing the key concepts involved in that process along the way. Attendees will leave with a basic understanding of such fundamental concepts as translation units, declarations, definitions, the one-definition rule, name-mangling, ABIs, and how the compiler and linker conspire to convert human-readable source code into binary code that executes on hardware.\n\n---\n\nBob Steagall\nChief Cook and Bottle Washer, KEWB Computing\n\n---\nStreamed & Edited by Digital Medium Ltd - events.digital-medium.co.uk\nevents@digital-medium.co.uk \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/3KoXeegncrs/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/3KoXeegncrs/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/3KoXeegncrs/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/3KoXeegncrs/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/3KoXeegncrs/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 93,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "3KoXeegncrs"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "3KoXeegncrs",
        "videoPublishedAt": "2020-09-22T23:30:09Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "ELkD5OeOdkJvCE0mOrBBUbXHUqk",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy42QzdBMzlBQzQzRjQ0QkQy",
      "snippet": {
        "publishedAt": "2021-09-18T10:44:06Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "Monoids, Monads, and Applicative Functors: Repeated Software Patterns - David Sankel - CppCon 2020",
        "description": "https://cppcon.org/\nhttps://github.com/CppCon/CppCon2020\n---\nForget factories, singletons, and proxies; What are the real patterns in software development? This talk explores abstract mathematical structures that commonly recur in software development. Once a mind is trained to recognize these patterns, it becomes easy to identify the fundamental operations for domain specific classes and how to put the pieces together. This discussion is for those who enjoy math, abstract concepts, and expanding their minds. \n\n---\nDavid Sankel is a Software Engineering Manager/TL at Bloomberg and an active member of the C++ Standardization Committee. His experience spans microservice architectures, CAD/CAM, computer graphics, visual programming languages, web applications, computer vision, and cryptography. He is a frequent speaker at C++ conferences and specializes in large-scale software engineering and advanced C++ topics. David\u2019s interests include dependently typed languages, semantic domains, EDSLs, and functional reactive programming. He is the project editor of the C++ Reflection TS, a member of the Boost steering committee, and an author of serveral C++ proposals including pattern matching and language variants. \n\n---\nStreamed & Edited by Digital Medium Ltd - events.digital-medium.co.uk\nevents@digital-medium.co.uk \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/giWCdQ7fnQU/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/giWCdQ7fnQU/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/giWCdQ7fnQU/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/giWCdQ7fnQU/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/giWCdQ7fnQU/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 94,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "giWCdQ7fnQU"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "giWCdQ7fnQU",
        "videoPublishedAt": "2020-10-04T23:00:12Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "_05qlU-Am5If0JZjonFwrSxVITA",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy4zMUEyMkQwOTk0NTg4MDgw",
      "snippet": {
        "publishedAt": "2021-09-18T10:33:59Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "Dynamic Polymorphism with Metaclasses and Code Injection - Sy Brand - CppCon 2020",
        "description": "https://cppcon.org/\nhttps://github.com/CppCon/CppCon2020\n---\nDynamic polymorphism in C++ has historically meant virtual functions and inheritance. However, these form only one possible design for solving this problem, and they bring several implications on performance, ergonomics and flexibility. Type erasure is another way to implement dynamic polymorphism, as demonstrated in several talks by Sean Parent and adopted in other languages, such as Rust\u2019s trait objects. But implementing type erasing objects which provide ergonomic interfaces in C++ is cumbersome and error-prone, leading to a large family of types and libraries with subtly different semantics and lower adoption rates compared to inheritance.\n\nThis talk will present a possible future design for interface-based type erasure in C++ that marries the convenience of inheritance to the benefits which it otherwise lacks. It will introduce the code injection and metaclasses facilities which are proposed for inclusion in C++ along with a prototype implementation of the design based on the experimental metaclasses Clang fork.\n\n---\nSy Brand is Microsoft\u2019s C++ Developer Advocate. Their background is in compilers and debuggers for embedded accelerators, but they\u2019re also interested in generic library design, metaprogramming, functional-style C++, undefined behaviour, and making our communities more welcoming and inclusive.\n\n---\nStreamed & Edited by Digital Medium Ltd - events.digital-medium.co.uk\nevents@digital-medium.co.uk \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/8c6BAQcYF_E/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/8c6BAQcYF_E/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/8c6BAQcYF_E/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/8c6BAQcYF_E/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/8c6BAQcYF_E/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 95,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "8c6BAQcYF_E"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "8c6BAQcYF_E",
        "videoPublishedAt": "2020-10-01T15:00:11Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "0Pb5bWFBqWf7X_uGi3gnVAo1zpQ",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy4wMTYxQzVBRDI1NEVDQUZE",
      "snippet": {
        "publishedAt": "2021-09-18T10:33:50Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "CppCon 2016: Klaus Iglberger \u201cThe Blaze High Performance Math Library\"",
        "description": "http://CppCon.org\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016\n\u2014\nIn this presentation we introduce the Blaze C++ math library, a hot contender for the linear algebra performance throne. Blaze is an open-source, high-performance library for dense and sparse arithmetic. It combines elegance and ease of use with HPC-grade performance, making it one of the most intuitive and at the same time fastest C++ math libraries available.\n\nWe demonstrate its basic linear algebra functionality by means of several BLAS level 1 to 3 operations and explain why Blaze outperforms even well established linear algebra libraries. Additionally, we present some advanced features that enable users to adapt Blaze to special circumstances: custom data structures, custom operations, and the customizable error reporting mechanism.\n\nHomepage:   https://bitbucket.org/blaze-lib/blaze\nBenchmarks: https://bitbucket.org/blaze-lib/blaze/wiki/Benchmarks\n\u2014 \nKlaus Iglberger\nCD-adapco\nSenior Software Engineer\nN\u00fcrnberg Area, Germany\nKlaus Iglberger has finished his PhD in computer science in 2010. Back then, he contributed to several massively parallel simulation frameworks and was active researcher in the high performance computing community. From 2011 to 2012, he was the managing director of the central institute for scientific computing in Erlangen. Currently he is on the payroll at CD-adapco in Nuremberg, Germany, as a senior software engineer. Additionally, he is the initiator and lead designer of the Blaze C++ math library (https://bitbucket.org/blaze-lib/blaze).\n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/w-Y22KrMgFE/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/w-Y22KrMgFE/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/w-Y22KrMgFE/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/w-Y22KrMgFE/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/w-Y22KrMgFE/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 96,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "w-Y22KrMgFE"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "w-Y22KrMgFE",
        "videoPublishedAt": "2016-10-05T18:07:11Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "HhHqMi1g4ycgO9kl5sOpEzbD7oQ",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy4wNEU1MTI4NkZEMzVBN0JF",
      "snippet": {
        "publishedAt": "2021-09-18T10:33:31Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "Plenary: Performance Matters - Emery Berger - CppCon 2020",
        "description": "https://cppcon.org/\nhttps://github.com/CppCon/CppCon2020/blob/main/Presentations/performance_matters/performance_matters__emery_berger__cppcon_2020.pdf\n---\nPerformance is one of the chief reasons why many C++ programmers love the language. In the past, Moore's Law meant that our programs ran faster every year. Now that Dennard scaling has ended, C++ programmers have to work harder to get high performance for their applications. In this talk, I'll first discuss some of the significant and surprising challenges facing C++ programmers trying to achieve high performance on modern hardware platforms: performance is far less stable and predictable than you might think! I'll present some experimental evidence that strongly suggests we can't count on compiler optimizations to help us out of this hole: in particular, I'll show -- using a new experimental methodology -- that the difference between clang's -O2 and -O3 optimization levels is essentially indistinguishable from noise.\n\nSince compiler optimizations have run out of steam, we need better profiling support, especially for modern concurrent, multi-threaded applications. I'll talk about a new approach to profiling, which I call \"causal profiling\". Causal profiling lets programmers optimize for throughput or latency, and which pinpoints and accurately predicts the impact of optimizations. It works by running performance experiments, based on the idea of \"virtual speedups\". We've built a causal profiler called Coz, which now ships as part of standard Linux distros, and which also works for C++ and Rust (there's even a Java version). Using it, we find that Coz can unlock previously unknown optimization opportunities. Guided by Coz, we improved the performance of Memcached (9%), SQLite (25%), and accelerated six other applications by as much as 68%; in most cases, this involved modifying less than 10 lines of code and took under half an hour (without any prior understanding of the programs!).\n\n---\nEmery Berger is a Professor in the College of Information and Computer Sciences at the University of Massachusetts Amherst, the flagship campus of the UMass system, where he co-directs the PLASMA @ UMass lab. He graduated with a Ph.D. in Computer Science from the University of Texas at Austin in 2002. Professor Berger has been a Visiting Scientist at Microsoft Research and at the Universitat Polit\u00e8cnica de Catalunya (UPC) / Barcelona Supercomputing Center (BSC). Professor Berger\u2019s research spans programming languages, runtime systems, and operating systems, with a particular focus on systems that transparently improve reliability, security, and performance. He and his collaborators have created a number of influential software systems including Hoard, a fast and scalable memory manager that accelerates multithreaded applications (used by companies including British Telecom, Cisco, Cr\u00e9dit Suisse, Reuters, Royal Bank of Canada, SAP, and Tata, and on which the Mac OS X memory manager is based); DieHard, an error-avoiding memory manager that directly influenced the design of the Windows 7 Fault-Tolerant Heap; and DieHarder, a secure memory manager that was an inspiration for hardening changes made to the Windows 8 heap. His honors include a Microsoft Research Fellowship, an NSF CAREER Award, a Lilly Teaching Fellowship, the Distinguished Artifact Award for PLDI 2014, the Most Influential Paper Award at OOPSLA 2012, the Most Influential Paper Award at PLDI 2016, three CACM Research Highlights, a Google Research Award, a Microsoft SEIF Award, and Best Paper Awards at FAST, OOPSLA, and SOSP; he was named an ACM Distinguished Member in 2018. Professor Berger is currently serving his second term as an elected member of the SIGPLAN Executive Committee; he served for a decade (2007-2017) as Associate Editor of the ACM Transactions on Programming Languages and Systems, and was Program Chair for PLDI 2016.\n\n---\nStreamed & Edited by Digital Medium Ltd - events.digital-medium.co.uk\nevents@digital-medium.co.uk \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/koTf7u0v41o/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/koTf7u0v41o/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/koTf7u0v41o/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/koTf7u0v41o/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/koTf7u0v41o/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 97,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "koTf7u0v41o"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "koTf7u0v41o",
        "videoPublishedAt": "2020-09-30T03:00:11Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "t2WqVwKOUtLLlQGHeeP7hJwW70o",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy5GNjAwN0Y0QTFGOTVDMEMy",
      "snippet": {
        "publishedAt": "2021-09-18T07:07:05Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "Audio Programming with BASS",
        "description": "This month, Richard Thomson will give us an introduction to audio programming with the BASS library.  Specifically, we'll look at this library with an eye towards playing back MOD music and triggering events during playback in response to interesting things happening during the score.\n\nBASS is an audio library for use in software on several platforms. Its purpose is to provide developers with powerful and efficient sample, stream (MP3, MP2, MP1, OGG, WAV, AIFF, custom generated, and more via OS codecs and add-ons), MOD music (XM, IT, S3M, MOD, MTM, UMX), MO3 music (MP3/OGG compressed MODs), and recording functions. All in a compact DLL that won't bloat your distribution.\n\nBASS site:  https://www.un4seen.com/\n\nUtah C++ Programmers: https://www.meetup.com/utah-cpp-programmers/\nPast topics: https://utahcpp.wordpress.com/past-meeting-topics/\nFuture topics: https://utahcpp.wordpress.com/future-meeting-topics/",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/-d4aDtBWB08/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/-d4aDtBWB08/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/-d4aDtBWB08/hqdefault.jpg",
            "width": 480,
            "height": 360
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 98,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "-d4aDtBWB08"
        },
        "videoOwnerChannelTitle": "Utah Cpp Programmers",
        "videoOwnerChannelId": "UC56D6OIs_IAy24ubjC2_hmQ"
      },
      "contentDetails": {
        "videoId": "-d4aDtBWB08",
        "videoPublishedAt": "2021-09-09T03:17:16Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "FR8f_aWXlne40hjnAXcDGxiltRQ",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy43NERCMDIzQzFBMERCMEE3",
      "snippet": {
        "publishedAt": "2021-09-18T07:02:13Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "CppCon 2019: Ben Saks \u201cBetter Code with C++ Attributes\u201d",
        "description": "http://CppCon.org\n\u2014\nDiscussion & Comments: https://www.reddit.com/r/cpp/\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2019\n\u2014\nModern C++ attributes such as [[noreturn]] and [[deprecated]] can be used to improve code quality and programmer productivity. They provide valuable information to the compiler, allowing it to generate more efficient code and provide more useful warning messages. C++20 is slated to include several new attributes, including [[no_unique_address]] and the design-by-contract attributes. They also let you use compiler extensions on specific toolchains without locking you into using only those toolchains.\n\nThis session explores several C++ attributes and provides examples of how to use each one to improve your programs. Although it focuses on the standard attributes, it also includes examples of non-standard attributes from specific toolchains.\n\u2014 \nBen Saks\nChief Engineer, Saks & Associates\n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/teUA5U6eYQY/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/teUA5U6eYQY/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/teUA5U6eYQY/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/teUA5U6eYQY/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/teUA5U6eYQY/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 99,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "teUA5U6eYQY"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "teUA5U6eYQY",
        "videoPublishedAt": "2019-10-03T07:00:11Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "StYBgkRqQbVJwZtiI7mgz0nIrcU",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy41NTZEOThBNThFOUVGQkVB",
      "snippet": {
        "publishedAt": "2021-09-18T07:02:06Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "CppCon 2018: Louis Dionne \u201cCompile-time programming and reflection in C++20 and beyond\u201d",
        "description": "http://CppCon.org\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2018\n\u2014\nCompile-time programming and reflection have been getting a lot of attention recently. Indeed, from Herb Sutter's well-known Metaclasses proposal to the newly created Reflection TS, a lot of effort is being put into solving the general problem of programmatic code generation and program introspection. More recently, the C++ Standards Committee has also been evaluating and adopting proposals that vastly expand the realm of constructs available at compile-time, in constexpr functions: new-expressions, try-catch blocks, virtual functions, some standard containers, and more. \n\nFor most people, it is unclear how all these features, whether exploratory or voted into the Draft International Standard, relate together. Without being active in the Committee, it can be difficult to see the big picture, the unifying vision driving all these changes. Fortunately, there is one, and this is what this talk is about. \n\nWe will go over these features and explain how they might interact with each other by boiling them down to their essential parts. We will present how different use cases for compile-time programming will be solved in C++20, and how even more use cases can be unlocked in the future. Attendees will leave this talk with an understanding of the improvements to constexpr planned for C++20, of what's needed to unlock more advanced use cases and an unifying vision for how to get there.\n\u2014 \nLouis Dionne, Apple, C++ Standard Library Engineer\nLouis is a math and computer science enthusiast who got swallowed by the C++ monster when he was a naive, unsuspecting student. He now works for Apple, where he is responsible for libc++, the Standard Library shipped with LLVM/Clang. He is a member of the C++ Standards Committee and of the Boost community, where he authored the Boost.Hana metaprogramming library.\n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/CRDNPwXDVp0/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/CRDNPwXDVp0/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/CRDNPwXDVp0/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/CRDNPwXDVp0/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/CRDNPwXDVp0/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 100,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "CRDNPwXDVp0"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "CRDNPwXDVp0",
        "videoPublishedAt": "2018-10-09T16:05:27Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "TE6v_0w3sy-sXR3KmRvC0jlxzw4",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy42Qzk5MkEzQjVFQjYwRDA4",
      "snippet": {
        "publishedAt": "2021-09-18T07:01:41Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "Back to Basics: Class Layout - Stephen Dewhurst - CppCon 2020",
        "description": "https://cppcon.org/\nhttps://github.com/CppCon/CppCon2020/blob/main/Presentations/back_to_basics_class_layout/back_to_basics_class_layout__steve_dewhurst__cppcon_2020.pdf\n---\nIn C++, as in many other languages, classes are the key feature that supports data abstraction. A C++ class is essentially a C structure, but with added capabilities that support object-oriented programming as well as better type safety, resource management, and usability.\n\nAlthough some of these added capabilities require additional storage allocation or run-time support, most do not. Thus, the storage layout for a C++ class can be as simple as the layout for a C structure. Unfortunately, too many programmers imagine that classes incur space and speed penalties that simply aren\u2019t there.\n\nThis session offers a practical look \u201cunder the hood\u201d to see how compilers typically implement the storage layout and member access for C++ classes. It also explains how compilers typically implement member function calls. You\u2019ll come away with a better sense of what using classes actually costs in speed and space. You\u2019ll gain insights that will help you with a variety of programming tasks, including debugging, performance tuning, and working with objects that have rigid layout requirements.\n\n---\nSteve Dewhurst is the co-founder and president of Semantics Consulting, Inc. Steve is the author of numerous technical articles on C++ programming techniques and compiler design, is the author of the critically acclaimed books C++ Common Knowledge and C++ Gotchas, and is the co-author of Programming in C++. He is a frequent speaker at industry conferences, where his presentations are consistently among the most popular and highest rated. He is also a member of the advisory board for The C++ Source, was programming track chair for the Embedded Systems Conference (ESC), and was a visiting scientist at the Software Engineering Institute (SEI) at Carnegie Mellon University. Steve has mentored and consulted with C++ projects ranging in size from 1 to over 100 developers, in areas ranging from compiler design to embedded telecommunications to ecommerce to derivative securities trading. As a Member of Technical Staff in the UNIX Development Laboratory at AT&T Bell Laboratories, Steve worked with Bjarne Stroustrup, the designer and first implementer of C++, on the first public release of the language and cfront C++ compiler, then served as the lead designer and implementer of the first non-cfront C++ compiler. As a compiler architect at Glockenspiel, Ltd., he designed and implemented a second C++ compiler. Steve was a contributing editor for The C/C++ User's Journal, a principal lecturer at The C++ Seminar, has served as a principal on the ANSI/ISO C++ standardization committee, was the C++ training series adviser for Technology Exchange Company (Addison-Wesley), was a member of the editorial board of and columnist for C++ Report, co-founder and member of the editorial board of The C++ Journal, and a Visiting Professor of Computer Science at Jackson State University. He has also written C, COBOL, and Pascal compilers, was a principal on the ANSI/IEEE Pascal Standardization Committee, and a reviewer for ACM Computing Reviews. Semantics Consulting, Inc. is located in the small New England town of Carver, Massachusetts. Like all small New England towns, Carver has a tradition of citizen involvement, and over the years Steve has been astonished to find himself harvesting cranberries, coaching the high school wrestling team, and serving on the town water commission, finance committee, and website committee.\n\n---\nStreamed & Edited by Digital Medium Ltd - events.digital-medium.co.uk\nevents@digital-medium.co.uk \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/SShSV_iV1Ko/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/SShSV_iV1Ko/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/SShSV_iV1Ko/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/SShSV_iV1Ko/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/SShSV_iV1Ko/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 101,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "SShSV_iV1Ko"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "SShSV_iV1Ko",
        "videoPublishedAt": "2020-09-23T18:00:11Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "SdH3xNGmonklkIory_TIQoPXvIo",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy4zMEQ1MEIyRTFGNzhDQzFB",
      "snippet": {
        "publishedAt": "2021-09-18T07:01:27Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "Test Driven C++ - Phil Nash - CppCon 2020",
        "description": "https://cppcon.org/\nhttps://github.com/CppCon/CppCon2020\n---\n\nWe know that testing is important, but writing tests is hard and takes time - and can be demotivating when you want to hack out features.\n\nBut what if we flipped the whole thing around? It turns out that by writing tests _first_ the dynamic changes in unexpected ways. Testing becomes easier. Adding features becomes easier. The dopamine hit you get from seeing something work becomes more frequent. Time lost to bugs and regressions virtually disappears. You start to get invited to bigger and better parties!\n\nOk, one of those statements is not guaranteed - but the rest are! If you've never tried TDD (perhaps you have heard of it but been skeptical), or maybe had a bad experience in the past, this talk will give you a sound intro to how it work, how you can get started, and what you can expect to achieve.\n\n---\nPhil Nash\nDeveloper Advocate, JetBrains\nDeveloper Advocate at JetBrains, author of Catch/Catch2, co-host of cpp.chat, host of C++ London, chair and organiser of C++ on Sea.\n\n---\nStreamed & Edited by Digital Medium Ltd - events.digital-medium.co.uk\nevents@digital-medium.co.uk \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/N2gTxeIHMP0/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/N2gTxeIHMP0/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/N2gTxeIHMP0/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/N2gTxeIHMP0/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/N2gTxeIHMP0/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 102,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "N2gTxeIHMP0"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "N2gTxeIHMP0",
        "videoPublishedAt": "2020-09-25T14:00:10Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "t8po5kHjdMVuvo1qmK7l3UPggjo",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy4xMzgwMzBERjQ4NjEzNUE5",
      "snippet": {
        "publishedAt": "2021-09-18T07:00:40Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "CppCon 2019: Jonathan M\u00fcller \u201cUsing C++20's Three-way Comparison \uff1c=\uff1e\u201d",
        "description": "http://CppCon.org\n\u2014\nDiscussion & Comments: https://www.reddit.com/r/cpp/\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2019\n\u2014\nC++20 adds the \"spaceship operator\" \uff1c=\uff1e for three-way comparison, fundamentally changing the way we implement comparison. But there are a lot more changes: Comparison categories will give more structure, and the new operator rewriting rules will massively reduce boilerplate. And like most C++ features, there are a couple of caveats we need to be aware of.\n\nThis talk will cover all the changes and give guidelines on how to use them. It will be very practical, answering questions like: How do I write a comparison operator for my classes? How do I write it for a generic container? How should I implement algorithms to leverage the three-way comparison? How do I handle all the types written without \uff1c=\uff1e?\n\nWhether you are writing concrete applications or generic library code, you will have the necessary knowledge to apply the new features. And even if you cannot use C++20 in the foreseeable future, you will have a deeper understanding on proper comparison design.\n\u2014 \nJonathan M\u00fcller\nStudent, RWTH Aachen University\nJonathan is a Computer Science graduate currently studying Physics. In his spare time he works on various C++ open source libraries for memory allocation, cache-friendly containers or parsing. He also blogs about C++ and library development at foonathan.net.\n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/8jNXy3K2Wpk/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/8jNXy3K2Wpk/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/8jNXy3K2Wpk/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/8jNXy3K2Wpk/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/8jNXy3K2Wpk/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 103,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "8jNXy3K2Wpk"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "8jNXy3K2Wpk",
        "videoPublishedAt": "2019-10-11T07:00:00Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "A8yB0PnCcfb70KTq-PtMxT6wh6U",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy44QzVGQUU2QjE2NDgxM0M4",
      "snippet": {
        "publishedAt": "2021-09-18T07:00:21Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "Practical Memory Pool Based Allocators For Modern C++ - Misha Shalem - CppCon 2020",
        "description": "https://cppcon.org/\nhttps://github.com/CppCon/CppCon2020/blob/main/Presentations/practical_memory_pool_based_allocators_for_modern_cpp/practical_memory_pool_based_allocators_for_modern_cpp__misha_shalem__cppcon_2020.pdf\n---\nRuntime-deterministic memory allocations are a crucial aspect of any safety-critical real-time system. One of the simplest and widely adopted allocation mechanisms used in such systems is a memory pool with fixed block sizes. Unfortunately, the need to know the exact sizes of the memory blocks makes any practical usage of memory pools with standard C++ allocator-based approach rather problematic since users often \u201chide\u201d real properties of allocations which are made under the hood. For example: STL\u2019s node-based containers like 'std::map' as well as other standard mechanisms like 'std::promise' or 'std::allocate_shared'.\n\nBeing a company which focuses on real-time safety-critical applications, we still see a significant value in keeping compatibility with the standard allocator model as well as in following common conventions which are familiar to every C++ developer.\n\nThis talk presents an approach which uses a combination of a memory allocator implementation which instruments the code, and an external LLVM-based tool which extracts the instrumentation information and generates static memory pool definitions, allowing the allocator to switch from the heap to a memory pool without any further changes to the code. The presentation will walk through a simplest possible implementation of this approach.\n\n---\nMisha Shalem\nC++ Architect, Apex.AI\nC++ developer with 16+ years of experience. Currently holds position of C++ Architect at Apex.AI, Palo Alto, CA\n\n---\nStreamed & Edited by Digital Medium Ltd - events.digital-medium.co.uk\nevents@digital-medium.co.uk \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/l14Zkx5OXr4/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/l14Zkx5OXr4/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/l14Zkx5OXr4/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/l14Zkx5OXr4/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/l14Zkx5OXr4/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 104,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "l14Zkx5OXr4"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "l14Zkx5OXr4",
        "videoPublishedAt": "2020-09-29T22:00:12Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "MFM26GnFbuo86RE8a_3dMqrtr-E",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy5ENjI1QUI0MDI5NEQzODFE",
      "snippet": {
        "publishedAt": "2021-09-18T07:00:12Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "Lakos\u201920: The \u201cDam\u201d Book is Done! - John Lakos - CppCon 2020",
        "description": "https://cppcon.org/\nhttps://github.com/CppCon/CppCon2020\n---\nWriting reliable and maintainable C++ software is hard. Designing such software at scale adds a new set of challenges. Large-scale systems require more than just a thorough understanding of the logical design concepts addressed in most popular texts. To be successful on an enterprise scale, developers must also address physical design, a dimension of software engineering that may be unfamiliar even to expert developers.\n\nAfter more than two decades in the making, Large-Scale C++, Volume I: Process and Architecture, is finally here. Drawing on his over 30 years of hands-on experience building massive, mission-critical enterprise systems, John Lakos, using select excerpts from this glisteningly new volume, elucidates the essential value of (and several techniques needed for) creating and growing hierarchical reusable software a.k.a. Software Capital as the foundation for developing C++ software at virtually unbounded scale.\n\n---\nJohn Lakos, author of Large-Scale C++ Software Design, serves at Bloomberg LP in New York City as a senior architect and mentor for C++ Software Development world-wide.  He is also an active voting member of the C++ Standards Committee\u2019s Evolution Working Group. Previously, Dr. Lakos directed the design and development of infrastructure libraries for proprietary analytic financial applications at Bear Stearns. For 12 years prior, Dr. Lakos developed large frameworks and advanced ICCAD applications at Mentor Graphics, for which he holds multiple software patents. His academic credentials include a Ph.D. in Computer Science ('97) and an Sc.D. in Electrical Engineering ('89) from Columbia University. Dr. Lakos received his undergraduate degrees from MIT in Mathematics ('82) and Computer Science ('81). His next book, entitled Large-Scale C++\u2014Volume I: Process and Architecture, is anticipated in 2019.\n\n---\nStreamed & Edited by Digital Medium Ltd - events.digital-medium.co.uk\nevents@digital-medium.co.uk \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/d3zMfMC8l5U/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/d3zMfMC8l5U/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/d3zMfMC8l5U/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/d3zMfMC8l5U/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/d3zMfMC8l5U/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 105,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "d3zMfMC8l5U"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "d3zMfMC8l5U",
        "videoPublishedAt": "2020-10-07T23:00:12Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "5Q7WsSzGfwbHe7x8CYMCdz4fTvA",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy41RTNBREYwMkI5QzU3RkY2",
      "snippet": {
        "publishedAt": "2021-09-18T06:59:54Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "CppCon 2018: Greg Falcon \u201cInitialization, Shutdown, and constexpr\u201d",
        "description": "http://CppCon.org\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2018\n\u2014\nIt's easy to create an access a global object in C++, but doing so correctly and safely is unfortunately a bit tricky. But why? \n\nThis talk will take a close look at the various rules that govern when an object is safe to access, including storage duration, object lifetime, initialization, and program termination. We'll look at some safe idioms for creating global singletons that are justified by these rules. And we'll look at the relevant, helpful features added in various revisions of C++, such as constexpr constructors, and how they make the situation better.\n\u2014 \nGreg Falcon\nStaff Software Engineer, Google\nGreg Falcon is a Staff Software Engineer at Google, working on the Abseil C++ library.\n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/6ZOygaUjzjQ/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/6ZOygaUjzjQ/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/6ZOygaUjzjQ/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/6ZOygaUjzjQ/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/6ZOygaUjzjQ/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 106,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "6ZOygaUjzjQ"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "6ZOygaUjzjQ",
        "videoPublishedAt": "2018-11-14T08:00:00Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "8MU2cYF7v_iFuwtwqdWL56RDlBA",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy40QzRDOEU0QUYwNUIxN0M1",
      "snippet": {
        "publishedAt": "2021-09-18T06:59:34Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "Plenary: The Beauty and Power of \"Primitive\" C++ - Bjarne Stroustrup - CppCon 2020",
        "description": "https://cppcon.org/\nhttps://github.com/CppCon/CppCon2020/blob/main/Presentations/the_powr_and_beauty_of_primitive_c/the_powr_and_beauty_of_primitive_c__bjarne_stroustrup__cppcon_2020.pdf\n---\nOften, we focus on novel, clever, and advanced features of C++. To contrast, here I look at addressing relatively simple problems in relatively simple ways under severe constraints of performance, ease of use, and reliability. My main example is to read and write typed objects from and to a byte buffer. This is of course something we do a lot and in a bewildering variety of ways. Any object that needs to be stored or transmitted to another computer must go through such a process. However, the constrains on such reading and writing varies immensely based on the kind of data to be moved around, the performance and reliability requirements, the hardware available, and history. Many trade-offs are possible, and many different interfaces. That makes this an interesting design exercise.\n\nThis is an exploration of a design space close to the hardware and of the use of C++ in that space, rather than a standards proposal or the presentation of a mature tool chain. And, no, by \u201cprimitive\u201d, I don\u2019t mean \u201cold-fashioned, C-like\u201d code; some of the general techniques are old, but some of the code requires C++17 and much could be done better given features we are unlikely to get even in C++23.\n\n---\nBjarne Stroustrup\nTechnical fellow, morgan stanley\nC++: history, design, use, standardization, future; performance, reliability; software developer education; distributed systems\nBio: www.stroustrup.com/bio.html\n\n---\nStreamed & Edited by Digital Medium Ltd - events.digital-medium.co.uk\nevents@digital-medium.co.uk \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/ERzENfQ51Ck/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/ERzENfQ51Ck/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/ERzENfQ51Ck/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/ERzENfQ51Ck/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/ERzENfQ51Ck/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 107,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "ERzENfQ51Ck"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "ERzENfQ51Ck",
        "videoPublishedAt": "2020-09-25T01:30:11Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "27g20RcvC8tthZkKatMaND3V4G8",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy4yQUJFNUVCMzVDNjcxRTlF",
      "snippet": {
        "publishedAt": "2021-09-18T02:00:30Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "OO Considered Harmful - Phil Nash - CppCon 2020",
        "description": "https://cppcon.org/\nhttps://github.com/CppCon/CppCon2020\n---\nIs C++ on OO language? What does it mean to be an OO language anyway? What were the original goals, and how have they turned out?\n\nWhat other approaches are there? Some say there was nothing wrong with Structured Programming and we should go back to that. Others push for a more Functional approach. There's also Logic Programming and others. Is there one right answer? Does it depend? Does it blend?\n\nExperienced C++ programmers think of C++ as a Multi-Paradigm language, capable of moving between paradigms as needed. But is it particularly good at any particular one? Is that focus shifting? Where is it going, and why? What can we learn from other languages.\n\nIf all this sounds very abstract, be assured that we will look at real code and techniques you can apply today or, in some cases, the near future - as well as a glimpse of what may be down the road. More importantly we try to put it in a context that helps answer \"why?\"\n\nAlong the way we'll take a tour through C++'s approach to OO, Generic Programming and Functional Programming. \n\n---\nPhil Nash is a Developer Advocate at JetBrains, author of Catch/Catch2, co-host of cpp.chat, host of C++ London, chair and organiser of C++ on Sea. \n\n---\nStreamed & Edited by Digital Medium Ltd - events.digital-medium.co.uk\nevents@digital-medium.co.uk \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/pH-q2m5sb04/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/pH-q2m5sb04/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/pH-q2m5sb04/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/pH-q2m5sb04/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/pH-q2m5sb04/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 108,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "pH-q2m5sb04"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "pH-q2m5sb04",
        "videoPublishedAt": "2020-10-07T15:00:12Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "U68qcw3OBSwbvseo02HQ_jLlIxU",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy4yQjZFRkExQjFGODk3RUFD",
      "snippet": {
        "publishedAt": "2021-09-17T22:05:26Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "CppCon 2019: Bjarne Stroustrup \u201cC++20: C++ at 40\u201d",
        "description": "http://CppCon.org\n\u2014\nDiscussion & Comments: https://www.reddit.com/r/cpp/\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2019\n\u2014\nIt is now 40 years since C++ (then called C with Classes) had its first non-research user. It is now 35 years since the first commercial release of C++. It is now 30 years since the start of the standards process.\n\nSo what is C++? I will try to explain what's great about C++, C++20, as a modern language, not treating it as a layer cake of features. Imagine you have never heard of C, C with Classes, or C++11. How do classes, templates, and lambdas fit together? What have constructors and destructors to do with exceptions? What's in the standard library? How can we start using C++?\n\nFinally, I will make a few comments about how to get from older styles of C++ use to modern C++ and point to areas where we need to improve C++ further.\n\u2014 \nBjarne Stroustrup\ntechnical fellow, MorganStanley\n\nC++: history, design, use, standardization, future; performance, reliability; software developer education;distributed systemsBio: www.stroustrup.com/bio.html\n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/u_ij0YNkFUs/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/u_ij0YNkFUs/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/u_ij0YNkFUs/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/u_ij0YNkFUs/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/u_ij0YNkFUs/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 109,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "u_ij0YNkFUs"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "u_ij0YNkFUs",
        "videoPublishedAt": "2019-09-17T14:26:45Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "uEGQtLk0UcmBSS7CvadavdsLmLQ",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy41MzY4MzcwOUFFRUU3QzEx",
      "snippet": {
        "publishedAt": "2021-09-17T22:05:14Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "CppCon 2017: Matt Godbolt \u201cWhat Has My Compiler Done for Me Lately? Unbolting the Compiler's Lid\u201d",
        "description": "http://CppCon.org\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2017\n\u2014\nIn 2012, Matt and a colleague were arguing whether it was efficient to use the then-new-fangled range for. During the discussion a bash script was written to quickly compile C++ source and dump the assembly. Five years later and that script has grown into a website relied on by many to quickly see the code their compiler emits, to compare different compilers' code generation and behaviour, to quickly prototype and share code, and investigate the effect of optimization flags. \n\nIn this talk Matt will not only show you how easy (and fun!) it is to understand the assembly code generated by your compiler, but also how important it can be. He'll explain how he uses Compiler Explorer in his day job programming low-latency trading systems, and show some real-world examples. He'll demystify assembly code and give you the tools to understand and appreciate how hard your compiler works for you. \n\nHe'll also talk a little about how Compiler Explorer works behind the scenes, how it is maintained and deployed, and  share some stories about how it has changed over the years. By the end of this session you'll be itching to take your favourite code snippets and start exploring what your compiler does with them. \n\u2014 \nMatt Godbolt: DRW, Senior Software Engineer\n\nMatt Godbolt is a software engineer with trading firm DRW, and the creator of the Compiler Explorer website. He is passionate about writing efficient code. He has previously worked at on mobile apps at Google, run his own C++ tools company and spent more than a decade making console games. When he's not hacking on Compiler Explorer, Matt enjoys writing emulators for old 8-bit computer hardware.\n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/bSkpMdDe4g4/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/bSkpMdDe4g4/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/bSkpMdDe4g4/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/bSkpMdDe4g4/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/bSkpMdDe4g4/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 110,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "bSkpMdDe4g4"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "bSkpMdDe4g4",
        "videoPublishedAt": "2017-10-02T19:33:08Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "NB8rWvCS0dGikgIUNO9vyLcWWlM",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy5DRUQwODMxQzUyRTlGRkY3",
      "snippet": {
        "publishedAt": "2021-09-17T08:33:23Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "Making a Game With C++ and SDL2",
        "description": "Making a Game With C++ and SDL2 - GMTK Game Jam 2021\n\nA year ago, in my \"Learning SDL2 in 48 Hours\" video, I used the 2020 GMTK Game Jam as an opportunity to try to learn how to use C++ with SDL2 (a low level audio, input, and graphics library that you've probably heard of). In this video, I attempt the challenge again, for the GMTK Game Jam 2021!\n\nCheck out Twini-Golf here: https://polymars.itch.io/twini-golf\n\u2192 Source Code: https://github.com/PolyMarsDev/Twini-Golf\n\nCodergopher's SDL2 series: https://youtu.be/KsG6dJlLBDw?list=PL2RPjWnJduNmXHRYwdtublIPdlqocBoL\n\n\u2192 Twitter: https://twitter.com/PolyMarsYT\n\u2192 Twitch: https://twitch.tv/PolyMars\n\u2192 Join the PolySpace Discord: https://discord.gg/sGecnxuwxu \n\n---Chapters---\n\n0:00 Intro\n0:29 Setting Up SDL2\n0:45 The Theme (bruh)\n1:11 My Secret Plan...\n1:34 Entity & RenderWindow Class\n1:46 Drawing a Sprite\n2:12 My Game Idea\n2:37 Initial Prototype\n2:55 Prototype Code Explanation\n3:39 Prototype Art\n3:49 Tiles & Collisions\n4:05 Collision Code Explanation\n4:23 More Art & Directional Indicator\n4:34 Level Saving/Progression\n5:17 wait frick\n5:38 Creating UI\n6:07 DESIGNING LEVELS FAST\n6:40 Sound Effects\n6:47 Finishing Touches\n7:08 Secret \"Feature\"\n7:33 Conclusion\n\n---Music (in order played)---\n\n\"Smooth and Cool\" - Nico Staf (https://youtu.be/mdrKkx7ATl0)\n\"Westview\" - INTRNLCMD (https://soundcloud.com/intlcmd)\n\"Trance Music for Racing Game\" - Bobby Cole (https://youtu.be/tJFqdLg58i4)\n\"Playtime\" - Peter Godfrey (https://youtu.be/MqtACTZMHm8)\n\"il vento doro\" - JoJo's Bizarre Adventure: Golden Wind\n\"Dreaming\" - Stevia Sphere (https://youtu.be/pYx0VmFfyg4)\n\"I Miss Summer\" - Sro (https://youtu.be/8xCKEulJd80)\n\"Bush Week\" - Nihilore (https://youtu.be/UroytzJSVx4)\n\"Glider\" - INTRNLCMD (https://soundcloud.com/intlcmd)\n\"Operatic 3\" - Vibe Mountain (https://youtu.be/v8UtWLngE1s)\n\"Breeze\" - PolarChips (https://youtu.be/GecPK2wfk_8) \n\"Palms and Seagulls\" - Timecrawler 82 (https://youtu.be/q-sbGy3oeSk)\n\"Above All\" - HOME (https://youtu.be/qptMg0JWmFY)\n\n--If you liked this video, here are similar ones you might enjoy!---\n\nPolyMars - Learning SDL2 in 48 Hours - GMTK Game Jam 2020\nhttps://youtu.be/EAMHQfCGymg\nPolyMars - Learning Python in 2 Days - Pygame Community Jam\nhttps://youtu.be/7tXsC8YlCq8\nPolyMars - Making a Game Using Discord's Bot API\nhttps://youtu.be/0fWdU8JCT6Y\nBarji - Making a C++ Game with No Experience!\nhttps://youtu.be/4-sX-TtRR98\nRandall - Programming a New Physics Engine for my Game\nhttps://youtu.be/AGnMNor_r-Y\nCodyCantEatThis - I Made The Legend of Zelda Boss Fights but they\u2019re 3D\nhttps://youtu.be/AbV7gVCndIE\nDani - Adding a Dragon Boss to my Game Because Steam is Mad at me\nhttps://youtu.be/qPly1M-JEqc\nDani - He said I Couldn\u2019t Make a 3D Game\u2026 So I Made One!\nhttps://youtu.be/rb0EhmyQ0aM\u200b\nSam Hogan - I Made a Game with Intentional Bugs\nhttps://youtu.be/M_iiXaaF5T4\u200b\nSam Hogan - I Made the Hardest Game Ever\nhttps://youtu.be/wFJQI5iNjM8\u200b",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/iEn0ozP-jxc/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/iEn0ozP-jxc/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/iEn0ozP-jxc/hqdefault.jpg",
            "width": 480,
            "height": 360
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 111,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "iEn0ozP-jxc"
        },
        "videoOwnerChannelTitle": "PolyMars",
        "videoOwnerChannelId": "UCl7dSJloxuCa9IBFml7sakw"
      },
      "contentDetails": {
        "videoId": "iEn0ozP-jxc",
        "videoPublishedAt": "2021-08-02T15:00:21Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "HQ1Z4vNkLK-BH8KA5l1b-zF8-TQ",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy5DNkMwRUI2MkI4QkI4NDFG",
      "snippet": {
        "publishedAt": "2021-09-17T08:25:45Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "C++ as a First Language... Really? - Patrice Roy - CppCon 2019",
        "description": "http://CppCon.org\n\u2014\nDiscussion & Comments: https://www.reddit.com/r/cpp/\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2019\n\u2014\nC++ is seen as a complex language to teach. There are many reasons to think that: the language if taken as a whole is huge, its complexity daunting.\n\nThat goes, to be honest, for many programming languages: programming is a complex and stimulating activity, and C++'s growth mirrors the fact that is has been used to solve complex problems in efficient ways.\n\nHowever, introducing C++ to beginners or to people coming from other languages is feasible, and is done every day. Amusingly, so-called \"modern\" C++ actually makes the language more approachable in many ways. Instead of starting with the traditional \"basics\" such as arrays and pointers, one can treat these as more advanced topics, and introduce the language through more contemporary abstractions.\n\nWhat this talk aims to do is to show, through comparisons of solutions written in C++ with solutions written in other languages (mainly C# and Java), how C++ can be used as an introductory language as easily as other reputedly-easier-on-beginners languages, while still paving the way for the introduction of reputedly-more-difficult features.\n\u2014 \nPatrice Roy\nUniversit\u00e9 de Sherbrooke\nProfessor\nSherbrooke (Qu\u00e9bec), Canada\n\nPatrice Roy has been playing with C++, either professionally, for pleasure or (most of the time) both for over 25 years. After a few years doing R&D and working on military flight simulators, he moved on to academics and has been teaching computer science since 1998. Since 2005, he\u2019s been involved more specifically in helping graduate students and professionals from the fields of real-time systems and game programming develop the skills they need to face today\u2019s challenges. The rapid evolution of C++ in recent years has made his job even more enjoyable. He\u2019s been a participating member in the ISO C++ Standards Committee since late 2014 and has been involved with the ISO Programming Language Vulnerabilities Committee since late 2015. He has five kids, and his wife ensures their house is home to a continuously changing number of cats, dogs and other animals.\n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/AyhPigwhwbk/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/AyhPigwhwbk/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/AyhPigwhwbk/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/AyhPigwhwbk/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/AyhPigwhwbk/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 112,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "AyhPigwhwbk"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "AyhPigwhwbk",
        "videoPublishedAt": "2019-10-15T07:00:02Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "414wn-uKqE7YcgAKINXFClh4JUE",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy45NkVENTkxRDdCQUFBMDY4",
      "snippet": {
        "publishedAt": "2021-09-17T06:56:04Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "CppCon 2019: Matt Godbolt \u201cPath Tracing Three Ways: A Study of C++ Style\u201d",
        "description": "http://CppCon.org\n\u2014\nDiscussion & Comments: https://www.reddit.com/r/cpp/\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2019\n\u2014\nC++ is a multi-paradigm language allowing us as developers to pick and choose among a variety of styles: procedural, functional, object oriented, hybrids, and more. How does the style of programming we choose affect code clarity, testability, ease of changes, compile time and run-time performance?\n\nIn this talk Matt will show a toy path tracer project (a form of ray tracer) implemented in three different styles: traditional object oriented, functional, and data-oriented design. He'll then compare and contrast his experiences developing in each case, showing how often the compiler is able to reduce each style to similar performing code. There's certain to be some surprises - and of course some Compiler Explorer usage!\n\u2014 \nMatt Godbolt\nAquatic Capital Management, LLC\nDevelopment Engineer\nGreater Chicago Area\n\nMatt Godbolt is the creator of the Compiler Explorer website. He is passionate about writing efficient code. He has previously worked at a trading firm, on mobile apps at Google, run his own C++ tools company and spent more than a decade making console games. When he's not hacking on Compiler Explorer, Matt enjoys writing emulators for old 8-bit computer hardware.\n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/HG6c4Kwbv4I/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/HG6c4Kwbv4I/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/HG6c4Kwbv4I/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/HG6c4Kwbv4I/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/HG6c4Kwbv4I/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 113,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "HG6c4Kwbv4I"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "HG6c4Kwbv4I",
        "videoPublishedAt": "2019-10-11T07:00:04Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "R6zVIrZRrRnIAUlqT2UsYUBBAi0",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy4zQzFBN0RGNzNFREFCMjBE",
      "snippet": {
        "publishedAt": "2021-09-17T04:54:21Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "Back to Basics: Type Erasure - Arthur O'Dwyer - CppCon 2019",
        "description": "http://CppCon.org\n\u2014\nDiscussion & Comments: https://www.reddit.com/r/cpp/\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2019\n\u2014\nThis talk, based on Arthur's blog post [\"What is Type Erasure?\"](https://quuxplusone.github.io/blog/2019/03/18/what-is-type-erasure/), will explain the notion of type erasure as seen in standard library types such as std::function and std::any. We'll see how to build the most naive form of type erasure using heap allocation and virtual functions; then iteratively optimize that design to improve its performance. At the extreme, we'll see how C++2a std::function_ref achieves trivial copyability.\n\nAttendees will leave this session confident in their ability to implement type-erased classes, such as std::function, from scratch.\n\u2014 \nArthur O'Dwyer\nNew York\n\nArthur O'Dwyer is the author of \"Colossal Cave: The Board Game,\" \"Mastering the C++17 STL\" (the book), and \"The STL From Scratch\" (the training course). He runs professional C++ training courses, is occasionally active on the C++ Standards Committee, and has a blog mostly about C++.\n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/tbUCHifyT24/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/tbUCHifyT24/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/tbUCHifyT24/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/tbUCHifyT24/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/tbUCHifyT24/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 114,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "tbUCHifyT24"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "tbUCHifyT24",
        "videoPublishedAt": "2019-10-11T07:00:07Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "QGqnhLF5y2NztS7PhpKJBUZiGD0",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy5GNDg1Njc1QzZERjlFRjE5",
      "snippet": {
        "publishedAt": "2021-09-17T04:08:14Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "Mathieu Ropert \u201cThis Videogame Programmer Used the STL and You Will Never Guess What Happened Next\u201d",
        "description": "http://CppCon.org\n\u2014\nDiscussion & Comments: https://www.reddit.com/r/cpp/\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2019\n\u2014\nThe STL is sometimes seen as a strange and dangerous beast, especially in the game development industry.\nThere is talk about performance concerns, strange behaviours, interminable compilations and weird decisions by a mysterious \"committee\".\nIs there any truth to it? Is it all a misconception?\n\nI have been using the STL in a production videogame that is mostly CPU bound and in this talk we will unveil the truth behind the rumours.\nWe will start by a discussion about the most common criticism against the STL and its idioms made by the gamedev community.\nThen we will see a few practical examples through STL containers, explaining where they can do the job, where they might be lacking and what alternatives can be used.\nFinally we will conclude with some ideas on how we can improve both the STL for game developers and also how to foster better discussion on the topic in the future.\n\nAt the end of this talk, attendees should have a solid understanding of why the STL is sometimes frowned upon, when it makes sense to look for alternatives to the standard and most importantly when it does not.\n\u2014 \nMathieu Ropert\nParadox Development Studio\nExperienced Programmer\nStockholm, Su\u00e8de\n\nFrench C++ expert working on (somewhat) historical video games. Decided to upgrade his compiler once and has been blogging about build systems ever since. Past speaker at CppCon, Meeting C++ and ACCU. Used to run the Paris C++ User Group. Currently lives in Sweden.\n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/6hC9IxqdDDw/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/6hC9IxqdDDw/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/6hC9IxqdDDw/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/6hC9IxqdDDw/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/6hC9IxqdDDw/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 115,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "6hC9IxqdDDw"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "6hC9IxqdDDw",
        "videoPublishedAt": "2019-10-10T07:00:01Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "FrmeRdhbPelrqh6Ghki2xD37VcQ",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy4xOTEzQzhBQzU3MDNDNjcz",
      "snippet": {
        "publishedAt": "2021-09-16T13:33:57Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "How C++20 Changes the Way We Write Code - Timur Doumler - CppCon 2020",
        "description": "https://cppcon.org/\nhttps://github.com/CppCon/CppCon2020/blob/main/Presentations/how_cpp20_changes_the_way_we_write_code/how_cpp20_changes_the_way_we_write_code__timur_doumler__cppcon_2020.pdf\n---\nThe upcoming C++20 standard is the biggest update in a decade. Its feature set and their impact on how we write C++ will be as large, and possibly larger than that of C++11.\n\nIn this talk we will look at how new features like concepts, coroutines, and modules will fundamentally change the way we design libraries, the way we think about functions, and even the way we compile our code. We will also mention some long-standing warts in C++ which are finally cured.\n\n---\nTimur Doumler is a C++ developer specialising in audio and music technology, an active member of the ISO C++ committee, and Conference Chair of the Audio Developer Conference (ADC). He is passionate about building communities, clean code, good tools, and the evolution of C++.\n\n---\nStreamed & Edited by Digital Medium Ltd - events.digital-medium.co.uk\nevents@digital-medium.co.uk \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/ImLFlLjSveM/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/ImLFlLjSveM/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/ImLFlLjSveM/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/ImLFlLjSveM/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/ImLFlLjSveM/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 116,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "ImLFlLjSveM"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "ImLFlLjSveM",
        "videoPublishedAt": "2020-10-10T15:00:11Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "2A654FG4UpYM0ahp7aPWulslBCU",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy5BRjJDODk5REM0NjkzMUIy",
      "snippet": {
        "publishedAt": "2021-09-16T13:33:40Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "C++20: An (Almost) Complete Overview - Marc Gregoire - CppCon 2020",
        "description": "https://cppcon.org/\nhttps://github.com/CppCon/CppCon2020\n---\nThe technical work on C++20 was finished in January 2020, and is now being pushed through ISO certification.\n\nThis presentation gives an overview of (almost) all new features in both the language and the Standard Library. Some more exotic features will be left out. New language features include modules, coroutines, concepts, templated lambdas, constexpr changes, designated initializers, the spaceship operator, string literals as template parameters, feature test macros, conditional explicit, immediate functions, and more.\n\nThe second part of the session discusses the changes to the Standard Library. This includes topics such as ranges, atomic smart pointers, cancellable threads, a synchronization library, calendars, time zones, span, a formatting library, features test macros, and more.\n\nThe material is mostly the same as the \"C++20: What's in it for you?\" session from CppCon 2019, but it has been updated with the final standard. If you want a complete overview of all C++20 features, including references to other more deep-dive sessions at CppCon 2020 on certain topics, then this session is for you.\n\n---\nMarc Gregoire is a software architect from Belgium. He worked 6 years as a consultant for Siemens and Nokia Siemens Networks on critical 2G and 3G software running on Solaris for telecom operators. This required working in international teams stretching from South America and the United States to Europe, the Middle East, Africa, and Asia. Now, Marc is a software architect at Nikon Metrology (www.nikonmetrology.com), a division of Nikon and a leading provider of precision optical instruments, X-ray machines, and metrology solutions for X-ray, CT, and 3D geometric inspection.\n\nHis main expertise is C/C++, specifically Microsoft VC++ and the MFC framework. He has experience in developing C++ programs running 24/7 on Windows and Linux platforms: for example, KNX/EIB home automation software. In addition to C/C++, Marc also likes C#.\n\nSince April 2007, he has received the annual Microsoft MVP (Most Valuable Professional) award for his Visual C++ expertise.\n\nMarc is the founder of the Belgian C++ Users Group (www.becpp.org), author of \u201cProfessional C++\u201d 2nd, 3rd, and 4th Editions (Wiley/Wrox), co-author of \u201cC++ Standard Library Quick Reference\u201d 1st and 2nd Editions (Apress), technical editor for numerous books for several publishers, and regular speaker at the CppCon C++ conference. He maintains a blog at www.nuonsoft.com/blog/, and is passionate about traveling and gastronomic restaurants.\n\n---\nStreamed & Edited by Digital Medium Ltd - events.digital-medium.co.uk\nevents@digital-medium.co.uk \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/FRkJCvHWdwQ/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/FRkJCvHWdwQ/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/FRkJCvHWdwQ/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/FRkJCvHWdwQ/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/FRkJCvHWdwQ/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 117,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "FRkJCvHWdwQ"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "FRkJCvHWdwQ",
        "videoPublishedAt": "2020-09-27T03:00:11Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "YpqcJydSwHXMjyZH6fLbeltXQ10",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy40QTA3NTU2RkM1QzlCMzYx",
      "snippet": {
        "publishedAt": "2021-09-16T11:41:15Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "Embrace Your Problem Domain With Strong Types!",
        "description": "Every piece of software we write fits into some sort of specific problem domain. Programming isn't about writing programs! Programming is about solving problems. Every problem we solve comes from some sort of domain that has its own terminology and concepts. Knowledge from the domain appears most obviously in the names of things in our source code: variables, functions, classes, files and so-on. They all need names and we pick names from our problem domain in order to impugn these named entities with meaning.\n\nOne area that is often overlooked when modeling our problem domain is coming up with abstractions for the most common and simple values used in our programs. \"We need to store a telephone number for the customers in our inventory system.\" \"OK, let's use a std::string, that ought to do it.\"\n\nThat's certainly an expedient solution, but is it a *good* solution? Think of all the member functions on std::string; do all of them really apply to the concept of a telephone number? For instance, does it make sense to take arbitrary substrings of a telephone number? Think of all the places where a std::string, which can model a container of characters, can be used in the standard library. Do all of those uses make sense for a telephone number? Is there any reason we should be sorting the characters in a telephone number with std::sort? (see https://godbolt.org/z/89WET6WPE)\n\nThe way out of this unfortunate situation is to use types that directly represent the values in our problem domain instead of the primitive types provided by the language (int, char, float, etc.) or the standard library (string, map, vector, etc.). With a domain specific type, sometimes called a strong type, we can control which operations are defined for those types and let the compiler alert us when we are misusing our domain values in ways that don't make any sense.\n\nThis month, Richard Thomson will give us a guided tour on how we can write domain specific types in C++. We'll take a look at facilities provided directly by the language to roll our own types and we'll look at some library solutions that save us from writing lots of boiler plate.\n\nFuture topics: https://utahcpp.wordpress.com/future-meeting-topics/\nPast topics: https://utahcpp.wordpress.com/past-meeting-topics/",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/CvIl5agNBUc/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/CvIl5agNBUc/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/CvIl5agNBUc/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/CvIl5agNBUc/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/CvIl5agNBUc/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 118,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "CvIl5agNBUc"
        },
        "videoOwnerChannelTitle": "Utah Cpp Programmers",
        "videoOwnerChannelId": "UC56D6OIs_IAy24ubjC2_hmQ"
      },
      "contentDetails": {
        "videoId": "CvIl5agNBUc",
        "videoPublishedAt": "2021-08-05T22:11:39Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "TB6qvWm6eFAnuSiOt1qILBPVTsk",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy45RjNFMDhGQ0Q2RkFCQTc1",
      "snippet": {
        "publishedAt": "2021-09-16T09:52:48Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "Dependency Injection with Boost.DI",
        "description": "This month, Richard Thomson gives us a presentation on dependency injection in C++.  We'll look at dependency injection in general and then look at dependency injection using the Boost.DI library.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/zMTAc8WHIgo/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/zMTAc8WHIgo/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/zMTAc8WHIgo/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/zMTAc8WHIgo/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/zMTAc8WHIgo/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 119,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "zMTAc8WHIgo"
        },
        "videoOwnerChannelTitle": "Utah Cpp Programmers",
        "videoOwnerChannelId": "UC56D6OIs_IAy24ubjC2_hmQ"
      },
      "contentDetails": {
        "videoId": "zMTAc8WHIgo",
        "videoPublishedAt": "2020-09-17T03:22:16Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "DWj4z_aQV2z2bZzDmICZ-nBctJk",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy42MTI4Njc2QjM1RjU1MjlG",
      "snippet": {
        "publishedAt": "2021-09-16T03:08:29Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "Meeting C++ online - Peter Sommerlad - Beyond the rule of zero",
        "description": "Meeting C++ online - Peter Sommerlad - Beyond the rule of zero\nJoin Meeting C++ online https://www.meetup.com/Meeting-Cpp-online/\nSlides: https://github.com/PeterSommerlad/talks_public/blob/master/MeetingCPP/2021-08/BeyondTheRuleOfZero.pdf",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/2F_tDPuHHmw/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/2F_tDPuHHmw/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/2F_tDPuHHmw/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/2F_tDPuHHmw/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/2F_tDPuHHmw/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 120,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "2F_tDPuHHmw"
        },
        "videoOwnerChannelTitle": "Meeting Cpp",
        "videoOwnerChannelId": "UCJpMLydEYA08vusDkq3FmjQ"
      },
      "contentDetails": {
        "videoId": "2F_tDPuHHmw",
        "videoPublishedAt": "2021-09-13T18:23:47Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "qDVAJG2Z5-0ctkmhh416lDeVr-U",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy5CMEQ2Mjk5NTc3NDZFRUNB",
      "snippet": {
        "publishedAt": "2021-09-15T23:47:06Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "Intro to EnTT (ECS) | Game Engine series",
        "description": "Patreon \u25ba https://patreon.com/thecherno\nInstagram \u25ba https://instagram.com/thecherno\n\nEnTT \u25ba https://github.com/skypjack/entt\n\nTwitter \u25ba https://twitter.com/thecherno\nDiscord \u25ba https://thecherno.com/discord\n\nSeries Playlist \u25ba https://thecherno.com/engine",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/D4hz0wEB978/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/D4hz0wEB978/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/D4hz0wEB978/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/D4hz0wEB978/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/D4hz0wEB978/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 121,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "D4hz0wEB978"
        },
        "videoOwnerChannelTitle": "The Cherno",
        "videoOwnerChannelId": "UCQ-W1KE9EYfdxhL6S4twUNw"
      },
      "contentDetails": {
        "videoId": "D4hz0wEB978",
        "videoPublishedAt": "2020-07-14T10:30:01Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "USYW8zcfsfhVTlvTRQTZdeN9flo",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy4zRDBDOEZDOUM0MDY5NEEz",
      "snippet": {
        "publishedAt": "2021-09-15T23:40:45Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "EnTT -- C++ ECS Gaming Library",
        "description": "Today we have a guest speaker, XenoBrain from the GFS discord.  He will be taking you through the excellent open source EnTT C++ entity component system gaming library.\r\n\r\nLinks:\nhttps://gamefromscratch.com/entt-entity-component-system-gaming-library/\n-----------------------------------------------------------------------------------------------------------\n*Support* : https://www.patreon.com/gamefromscratch\n*GameDev News* : https://gamefromscratch.com\n*GameDev Tutorials* : https://devga.me\n*Discord* : https://discord.com/invite/R7tUVbD\n*Twitter* : https://twitter.com/gamefromscratch\n-----------------------------------------------------------------------------------------------------------",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/jjGY7EyaTr0/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/jjGY7EyaTr0/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/jjGY7EyaTr0/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/jjGY7EyaTr0/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/jjGY7EyaTr0/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 122,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "jjGY7EyaTr0"
        },
        "videoOwnerChannelTitle": "Gamefromscratch",
        "videoOwnerChannelId": "UCr-5TdGkKszdbboXXsFZJTQ"
      },
      "contentDetails": {
        "videoId": "jjGY7EyaTr0",
        "videoPublishedAt": "2021-02-03T14:45:34Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "trxe2srG8uN59CwZ3d8ZI67P_4k",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy41QUZGQTY5OTE4QTREQUU4",
      "snippet": {
        "publishedAt": "2021-09-15T23:29:26Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "C++ Error Handling Revisited - Raphael Meyer",
        "description": "In order to do something useful or at least interesting, any software has to interact with the world in some way. But sometimes these interactions do not yield the desired results. Something might go wrong. There will be errors. Put differently, we have to cope with side effects.\n\nWhen I started to learn Haskell, I was fascinated by the way the language deals with side effects. In functional programming you generally do not want to have side effects. But it is an inevitable fact that you still have to. This necessity resulted in very elegant concepts that recently gained a lot of attention in conventional programming languages as well.\n\nIn this talk we will explore how error handling might look in Haskell, how it influenced other languages and what we can learn therefrom. We will look at how to apply this to C++ and touch a few features of C++17. But we'll also see where the available language constructs prevent us from going further\n\n\nCheck out more of our talks at: \nhttps://ndctechtown.com/\nhttps://www.ndcconferences.com/",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/Ybmomkc48wg/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/Ybmomkc48wg/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/Ybmomkc48wg/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/Ybmomkc48wg/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/Ybmomkc48wg/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 123,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "Ybmomkc48wg"
        },
        "videoOwnerChannelTitle": "NDC Conferences",
        "videoOwnerChannelId": "UCTdw38Cw6jcm0atBPA39a0Q"
      },
      "contentDetails": {
        "videoId": "Ybmomkc48wg",
        "videoPublishedAt": "2020-10-29T14:44:48Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "r7PjG-E30S3ANu9LfixdlC8byP4",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy43NDhFRTgwOTRERTU4Rjg3",
      "snippet": {
        "publishedAt": "2021-09-15T23:22:46Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "CppCon 2019: Ben Saks \u201cBack to Basics: Exception Handling and Exception Safety\u201d",
        "description": "http://CppCon.org\n\u2014\nDiscussion & Comments: https://www.reddit.com/r/cpp/\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2019\n\u2014\nException handling (EH) is a powerful tool for dealing with errors. Using EH effectively can produce code that is simpler, more readable, and more robust than you can get with alternative mechanisms. In this session, we will explain the purpose of EH by contrasting it with the most common alternative, function return codes. We will show you the preferred techniques for throwing and catching exceptions, including which types of objects to throw, when to throw them, and how to catch them. We will describe the different levels of exception safety guarantees and demonstrate techniques like RAII that will help you write functions that provide those guarantees. We will illustrate how to write exception-neutral code that allows you to use EH without creating additional failure points.\n\u2014 \nBen Saks\nChief Engineer, Saks & Associates\n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/W6jZKibuJpU/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/W6jZKibuJpU/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/W6jZKibuJpU/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/W6jZKibuJpU/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/W6jZKibuJpU/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 124,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "W6jZKibuJpU"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "W6jZKibuJpU",
        "videoPublishedAt": "2019-10-08T07:00:03Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "5K62OLpYFHEh-KgWHntd8cg5ec4",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy44Mjc5REFBRUE2MTdFRDU0",
      "snippet": {
        "publishedAt": "2021-09-15T23:22:16Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "CppCon 2018: Jonathan Boccara \u201c105 STL Algorithms in Less Than an Hour\u201d",
        "description": "http://CppCon.org\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2018\n\u2014\nWe are all aware that we should know the STL algorithms. Including them in our designs allows us to make our code more expressive and more robust. And sometimes, in a spectacular way. \n\nBut do you know your STL algorithms? \n\nIn this presentation, you\u2019ll see the 105 algorithms that the STL currently has, including those added in C++11 and C++17. But more than just a listing, the point of this presentation is to highlight the different groups of algorithms, the patterns they form in the STL, and how the algorithms relate together. And all this in an entertaining way. \n\nThis kind of big picture is the best way I know to actually remember them all, and constitute a toolbox chock-full of ways to make our code more expressive and more robust.\n\u2014 \n\nJonathan Boccara, Murex\n\nJonathan Boccara is a Principal Engineering Lead at Murex where he works on large codebases in C++.\nHis primary focus is searching how to make code more expressive. He has dedicated his blog, Fluent C++, to writing expressive code in C++. \nHe also gives internal trainings on C++ every day, in the short format called \"Dailies\".\n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/2olsGf6JIkU/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/2olsGf6JIkU/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/2olsGf6JIkU/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/2olsGf6JIkU/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/2olsGf6JIkU/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 125,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "2olsGf6JIkU"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "2olsGf6JIkU",
        "videoPublishedAt": "2018-10-16T07:00:01Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "5rHqQMlL2VNWBHd7OtQbTql_BeI",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy5DMkU4NTY1QUFGQTYwMDE3",
      "snippet": {
        "publishedAt": "2021-09-15T23:22:03Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "CppCon 2018: Stoyan Nikolov \u201cOOP Is Dead, Long Live Data-oriented Design\u201d",
        "description": "http://CppCon.org\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2018\n\u2014\nFor decades C++ developers have built software around OOP concepts that ultimately failed us - we didn\u2019t see the promises of code reuse, maintenance or simplicity fulfilled, and performance suffers significantly. Data-oriented design can be a better paradigm in fields where C++ is most important - game development, high-performance computing, and real-time systems. \n\nThe talk will briefly introduce data-oriented design and focus on practical real-world examples of applying DoD where previously OOP constructs were widely employed. \n\nExamples will be shown from modern web browsers. They are overwhelmingly written in C++ with OOP - that\u2019s why most of them are slow memory hogs. In the talk I\u2019ll draw parallels between the design of systems in Chrome and their counterparts in the HTML renderer Hummingbird. As we\u2019ll see, Hummingbird is multiple times faster because it ditches OOP for good in all performance-critical areas. \n\nWe will see how real-world C++ OOP systems can be re-designed in a C++ data-oriented way for better performance, scalability, maintainability and testability. \n\u2014 \nStoyan Nikolov, Coherent Labs AD\nChief Software Architect\n\nStoyan Nikolov is the Chief Software Architect and Co-Founder of Coherent Labs. He designed the architecture of all products of the company. Stoyan has more than 10 years experience in games. Currently he heads the development of Hummingbird - the fastest HTML rendering engine in the industry and of LensVR, the first VR-centric web browser. Previously he worked on multiple graphics & core engine systems and on large-scale ERP solutions. Stoyan has degrees in Applied Mathematics and Computer Graphics. He is interested in high-performance computing, graphics, multithreading, VR and browser development.\n\nCoherent Labs AD\n\nCoherent Labs is a leading game middleware company that develops cross-platform game user interface products. It aims to solve complex problems for major gaming companies such as Arena Net, NCSoft, Bluehole, and hundreds of others, and to help them create stunning and high-performance UI. Using its experience in web, game technologies, and user interface, the company is developing a Virtual Reality browser.\n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/yy8jQgmhbAU/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/yy8jQgmhbAU/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/yy8jQgmhbAU/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/yy8jQgmhbAU/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/yy8jQgmhbAU/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 126,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "yy8jQgmhbAU"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "yy8jQgmhbAU",
        "videoPublishedAt": "2018-10-26T07:00:09Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "BWCyloUHOyjHWstVmQBs_VgMkSA",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy4yQUE2Q0JEMTk4NTM3RTZC",
      "snippet": {
        "publishedAt": "2021-09-15T23:21:52Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "CppCon 2019: Matthew Fleming \u201cThe Smart Pointers I Wish I Had\u201d",
        "description": "http://CppCon.org\n\u2014\nDiscussion & Comments: https://www.reddit.com/r/cpp/\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2019\n\u2014\nC++ offers two owning smart pointers, and a proposed non-owning smart pointer in the C++20 Library Fundamentals v2 Technical Specification. This talk will cover the kinds of semantics I think are important in a non-owning pointer, why I think more than one is desirable, and why the existing C++ owning smart pointers are sub-optimal for some use-cases. I will show how correct use of non-owning smart pointers can reduce memory lifetime issues, clarify code, and nearly eliminate incorrect ownership.\n\nFor asynchronous programming especially, the lifetime of observing pointers can be a source of significant and difficult to debug issues. I'll cover a mental model to use when writing code that helps focus on where lifetime issues might be likely, and where they will be unlikely.\n\u2014 \nMatthew Fleming\nSoftware Engineer, Pure Storage\nI've been working in systems software for almost 20 years now, mostly on virtual memory and filesystems, in both C and C++. I tend to find myself gravitating lower and lower in the stack, to code primitives, library helpers, and getting very close to the hardware.\n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/CKCR5eFVrmc/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/CKCR5eFVrmc/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/CKCR5eFVrmc/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/CKCR5eFVrmc/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/CKCR5eFVrmc/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 127,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "CKCR5eFVrmc"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "CKCR5eFVrmc",
        "videoPublishedAt": "2019-09-29T07:00:00Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "B1ij69OPAinWRzhEs11l_oVskHg",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy5DQ0MyQ0Y4Mzg0M0VGOEYw",
      "snippet": {
        "publishedAt": "2021-09-15T23:21:33Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "CppCon 2018: Bjarne Stroustrup \u201cConcepts: The Future of Generic Programming (the future is here)\u201d",
        "description": "http://CppCon.org\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2018\n\u2014\nConcepts have arrived. They will change the way we think about programming. Implementations are available in GCC and Clang. Many fundamental concepts are in the standard committee\u2019s working paper and the next generation of the STL depends critically on concepts.\n\nAfter briefly introducing concepts, I consider their role in design. What makes a good/useful concept? How do you design good concepts and use them well?\n\nFrom a language-technical point of view, concepts are a way of constraining template arguments. From a design perspective, they are a focus comparable to user-defined types (classes): The intent is for a concept to represent a fundamental concept in an applications domain (hence the name \u201cconcept\u201d).\n\nI will mention technical issues recently resolved  or currently being resolved in the committee, but my primarily focus is not concepts as a language mechanism but as a support for the development of good software.\n\u2014 \nBjarne Stroustrup\nMD, MorganStanley\nC++: history, design, use, standardization, future; performance, reliability; software developer education; | distributed systems | Bio: www.stroustrup.com/bio.html\n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/HddFGPTAmtU/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/HddFGPTAmtU/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/HddFGPTAmtU/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/HddFGPTAmtU/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/HddFGPTAmtU/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 128,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "HddFGPTAmtU"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "HddFGPTAmtU",
        "videoPublishedAt": "2018-09-25T15:30:59Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "CuVpYzkfeai0J91Ejfr-NiVUebo",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy43MTI1NDIwOTMwQjIxMzNG",
      "snippet": {
        "publishedAt": "2021-09-15T23:21:14Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "CppCon 2019: Chandler Carruth \u201cThere Are No Zero-cost Abstractions\u201d",
        "description": "http://CppCon.org\n\u2014\nDiscussion & Comments: https://www.reddit.com/r/cpp/\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2019\n\u2014\nC++ is often described as providing zero-cost abstractions. Libraries offer up facilities documented as such. And of course, users read all of these advertisements and believe that the abstractions they are using are truly zero-cost.\n\nSadly, there is no truth in advertising here, and there are no zero-cost abstractions.\n\nThis talk will dive into what we mean by \"zero-cost abstractions\", and explain why it is at best misleading and at worst completely wrong to describe libraries this way. It will show case studies of where this has led to significant problems in practice as libraries are designed or used in unscalable and unsustainable ways. Finally, it will suggest a different framing and approach for discussing abstraction costs in modern C++ software.\n\u2014 \nChandler Carruth\nGoogle\n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/rHIkrotSwcc/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/rHIkrotSwcc/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/rHIkrotSwcc/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/rHIkrotSwcc/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/rHIkrotSwcc/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 129,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "rHIkrotSwcc"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "rHIkrotSwcc",
        "videoPublishedAt": "2019-10-07T07:00:04Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "Qp0yq4plH0OaIdWW82bHvssOYsU",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy5DNzE1RjZEMUZCMjA0RDBB",
      "snippet": {
        "publishedAt": "2021-09-15T23:20:39Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "Back to Basics: Smart Pointers - Rainer Grimm - CppCon 2020",
        "description": "https://cppcon.org/\nhttps://github.com/CppCon/CppCon2020/blob/main/Presentations/back_to_basics_smart_pointers/back_to_basics_smart_pointers__rainer_grimm__cppcon_2020.pdf\n---\nFrom the library's perspective, an essential feature in C++11 was smart pointers.\n\nSince C++11, we have four different smart pointer: std::auto_ptr, std::unique_ptr, std::shared_pointer, and std::weak_ptr. With C++17 std::auto_ptr was removed and with C++20, we get an std::atomic\uff1cstd::shared_ptr\uff1e, and std::atomic\uff1cstd::weak_ptr\uff1e.\n\nEach smart pointer models a specific ownership semantic and has a particular purpose. The crucial question is, therefore: When should you use which smart pointer? The answer to this question becomes more sophisticated when you think about the arguments or the return value of a function. You have to answer the following question for the function arguments:\n\n- What does it mean to take the function arguments by pointer, by std::unique_ptr, or by std::shared_ptr?\n- Should the function take the smart pointer by value or by reference?\n- Should the argument be const or not?\n\nThe answers to those questions are not the end of the story. When you have a factory function creating something, the question immediately arises: Should the factory function return its product by a pointer, by std::unique_ptr, or by std::shared_ptr?\n\nSmart pointers are more than pointers decorated with smartness. Smart pointer models ownership semantic. Understanding the ownership semantic of smart pointers is the main topic of my talk and, therefore, your takeaway.\n\n---\nRainer works as a software architect, team lead, and instructor since 1999. In 2002, he created a further education round at his company. He gives seminars since 2002. Rainer's first seminars were about proprietary management software, but seminars for Python and C++ followed immediately. In his spare time, Rainer likes to write articles about C++, Python, and Haskell. He also likes to speak at conferences. Rainer publishes weekly on his English Modernes Cpp and the German blog, hosted by Heise Developer.\nSince 2016 he is an independent instructor giving seminars about modern C++ and Python. Rainer published several books in various languages to modern C++ and concurrency, in particular. Due to his profession, Rainer always searches for the best way to teach modern C++.\n\n---\nStreamed & Edited by Digital Medium Ltd - events.digital-medium.co.uk\nevents@digital-medium.co.uk \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/sQCSX7vmmKY/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/sQCSX7vmmKY/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/sQCSX7vmmKY/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/sQCSX7vmmKY/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/sQCSX7vmmKY/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 130,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "sQCSX7vmmKY"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "sQCSX7vmmKY",
        "videoPublishedAt": "2020-10-03T19:00:11Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "ky0kOnuo0LR3YboS1Px67bZXtK0",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy45NzUwQkI1M0UxNThBMkU0",
      "snippet": {
        "publishedAt": "2021-09-15T23:19:37Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "Back to Basics: RAII and the Rule of Zero - Arthur O'Dwyer - CppCon 2019",
        "description": "http://CppCon.org\n\u2014\nDiscussion & Comments: https://www.reddit.com/r/cpp/\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2019\n\u2014\nRAII, or \"Resource Allocation is Initialization,\" is one of the cornerstones of C++. What is it, why is it important, and how do we use it in our own code? \n\nSmall resource-managing classes should follow the Rule of Three (or Five); larger, composite, business-logic classes should follow the Rule of Zero. We'll explain these \"Rules,\" what they mean, and how their consistent application helps us avoid resource leaks and double-frees. We'll also show how thinking about the Rule of Three can lead to a consistent guideline for polymorphic classes with virtual destructors. \n\nFinally, we'll touch on the \"copy and swap\" idiom, which in many cases can reduce the Rule of Five to the Rule of Four (and a Half). \n\nAttendees will leave this session with a clearer understanding of resource management in C++.\n\u2014 \nArthur O'Dwyer\nNew York\n\nArthur O'Dwyer is the author of \"Colossal Cave: The Board Game,\" \"Mastering the C++17 STL\" (the book), and \"The STL From Scratch\" (the training course). He runs professional C++ training courses, is occasionally active on the C++ Standards Committee, and has a blog mostly about C++.\n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/7Qgd9B1KuMQ/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/7Qgd9B1KuMQ/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/7Qgd9B1KuMQ/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/7Qgd9B1KuMQ/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/7Qgd9B1KuMQ/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 131,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "7Qgd9B1KuMQ"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "7Qgd9B1KuMQ",
        "videoPublishedAt": "2019-10-15T07:00:00Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "CivWEdEsNTh1mS92TlMU-5NO0hk",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy4zRjM0MkVCRTg0MkYyQTM0",
      "snippet": {
        "publishedAt": "2021-09-15T22:39:26Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "CppCon 2019: Arthur O'Dwyer \u201cBack to Basics: Smart Pointers\u201d",
        "description": "http://CppCon.org\n\u2014\nDiscussion & Comments: https://www.reddit.com/r/cpp/\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2019\n\u2014\nSmart pointers are one of the key features of modern C++. We'll cover the two fundamental strategies used by the standard smart pointers: unique ownership transfer and reference-counting. We'll show how shared_ptr uses control blocks to implement reference-counting of arbitrary objects, and how to use weak_ptr in conjunction with shared_ptr. We'll explain the convenience functions make_shared and make_unique, and demonstrate how they are more than just conveniences. Finally, we'll motivate, implement, and demystify the curiously recurring template enable_shared_from_this\uff1cT\uff1e.\n\nAttendees will leave this session with a clear understanding of how C++11's smart pointers work under the hood.\n\u2014 \nArthur O'Dwyer\nNew York\n\nArthur O'Dwyer is the author of \"Colossal Cave: The Board Game,\" \"Mastering the C++17 STL\" (the book), and \"The STL From Scratch\" (the training course). He runs professional C++ training courses, is occasionally active on the C++ Standards Committee, and has a blog mostly about C++.\n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/xGDLkt-jBJ4/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/xGDLkt-jBJ4/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/xGDLkt-jBJ4/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/xGDLkt-jBJ4/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/xGDLkt-jBJ4/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 132,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "xGDLkt-jBJ4"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "xGDLkt-jBJ4",
        "videoPublishedAt": "2019-10-07T07:00:07Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "Y4AwKbl6TDcmQeQdZ8AoknexMOg",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy5GM0Q3M0MzMzY5NTJFNTdE",
      "snippet": {
        "publishedAt": "2021-09-15T22:39:18Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "C++ Smart Pointers - Usage and Secrets - Nicolai Josuttis",
        "description": "shared_ptr and unique_ptr are the key smart pointers of Modern C++.\n\nThis talk gives an overview about when to use them and what you should know abvout it (including their hidden price).\n\nSave the date for NDC TechTown 2020  (31st of August - 3rd of September)\n\nCheck out more of our talks at: \nhttps://ndctechtown.com/\nhttps://www.ndcconferences.com/",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/XH4xIyS9B2I/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/XH4xIyS9B2I/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/XH4xIyS9B2I/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/XH4xIyS9B2I/sddefault.jpg",
            "width": 640,
            "height": 480
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 133,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "XH4xIyS9B2I"
        },
        "videoOwnerChannelTitle": "NDC Conferences",
        "videoOwnerChannelId": "UCTdw38Cw6jcm0atBPA39a0Q"
      },
      "contentDetails": {
        "videoId": "XH4xIyS9B2I",
        "videoPublishedAt": "2019-09-20T11:11:44Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "Rug6Y2DKHj831Nq7vSSU7DUhPbs",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy4yMDhBMkNBNjRDMjQxQTg1",
      "snippet": {
        "publishedAt": "2021-09-13T13:20:45Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "C++ Project Structure with CMake - Cross Platform Game Engine Development",
        "description": "Learn how I am starting my journey in Cross Platform Game Engine Development using Vulkan, CMake and C++. \n\nIntended as an introduction to CMake for developers with at least some existing exposure to C++.\n\nThis installment sets up the project structure and shows a basic service provider pattern for providing abstraction layers between your engine's external vs internal APIs.\n\nChapters:\n0:00 Intro\n2:12 Project Structure\n3:15 Setup\n23:25 Importing Libraries\n33:35 Engine Services - Service Locator Pattern\n\nBooks mentioned:\nGame Programming Patterns: https://amzn.to/3u2LXfL (affiliate link)\n\nGithub Repository (engine only, use video instructions to import it into your own Cmake project!):\nhttps://github.com/mauville-technologies/youtube-engine\n___\n\nGodot Dragonbones is a custom Godot engine build with the godot_dragonbones module that I am maintaining and distributing. It provides full-featured, 2D Skeletal animation support for the DragonBones API; a free, open source alternative to Spine: 2D Skeletal Animation.\n\nPLEASE SUBSCRIBE!\nhttps://cutt.ly/zdCef9v\n\nJOIN OUR DISCORD:\nhttps://discord.gg/bXMkFsg\n\nDONATE HERE:\nhttps://cutt.ly/zdCnvmj\n\nGET GODOT DRAGONBONES HERE (Windows, Linux, Mac):\nhttp://godotdragonbones.com\n\nGodot-Dragonbones module included with this build of engine:\nhttps://github.com/mauville-technologies/godot-dragonbones\n\nIf you're interested in using this in your projects but would like more guidance, leave a comment letting me know what you'd like me to explain next.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/MHbGmGUvwVg/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/MHbGmGUvwVg/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/MHbGmGUvwVg/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/MHbGmGUvwVg/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/MHbGmGUvwVg/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 134,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "MHbGmGUvwVg"
        },
        "videoOwnerChannelTitle": "Ozzadar",
        "videoOwnerChannelId": "UCFYY9q_zOZYafHK2Gh1iJSQ"
      },
      "contentDetails": {
        "videoId": "MHbGmGUvwVg",
        "videoPublishedAt": "2021-04-29T14:30:17Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "KyjothVvXsnie-cO0MrXeTE2vLo",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy5ENDU4Q0M4RDExNzM1Mjcy",
      "snippet": {
        "publishedAt": "2021-09-13T13:19:06Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "Modules the beginner's guide -  Daniela Engert -  Meeting C++ 2019",
        "description": "Modules the beginner's guide -  Daniela Engert -  Meeting C++ 2019\nSlides: https://meetingcpp.com/mcpp/slides\nSurvey: https://survey.meetingcpp.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/Kqo-jIq4V3I/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/Kqo-jIq4V3I/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/Kqo-jIq4V3I/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/Kqo-jIq4V3I/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/Kqo-jIq4V3I/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 135,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "Kqo-jIq4V3I"
        },
        "videoOwnerChannelTitle": "Meeting Cpp",
        "videoOwnerChannelId": "UCJpMLydEYA08vusDkq3FmjQ"
      },
      "contentDetails": {
        "videoId": "Kqo-jIq4V3I",
        "videoPublishedAt": "2020-05-02T19:59:47Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "wanzmAx3uqNLhiCIhsCsH24SHV0",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy45RTgxNDRBMzUwRjQ0MDhC",
      "snippet": {
        "publishedAt": "2021-09-13T13:18:28Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "CppCon 2019: Nathan Sidwell \u201cConverting to C++20 Modules\u201d",
        "description": "http://CppCon.org\n\u2014\nDiscussion & Comments: https://www.reddit.com/r/cpp/\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2019\n\u2014\nC++20 will have a module system, which provides benefits beyond simple code hygiene. C++20 modules uses new keywords and explicit source-level annotations. How do we get there from here?\n\nI have been implementing this in the GNU compiler, and will talk about the broad strokes of the module specification.\nI will describe how:\n* one may incrementally convert source code,\n* build systems might be augmented,\n\u2014 \nNathan Sidwell\nSoftware Engineer, Facebook\nNathan is a developer of the GNU Compiler Collection, particularly the C++ Front End. His current major project is implementing and influencing the modules TS.\n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/KVsWIEw3TTw/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/KVsWIEw3TTw/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/KVsWIEw3TTw/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/KVsWIEw3TTw/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/KVsWIEw3TTw/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 136,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "KVsWIEw3TTw"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "KVsWIEw3TTw",
        "videoPublishedAt": "2019-10-04T07:00:00Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "mvOPd-jzXYA07mdecu14UW41yvs",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy4yMUQyQTQzMjRDNzMyQTMy",
      "snippet": {
        "publishedAt": "2021-09-13T13:18:19Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "Demo: C++20 Modules",
        "description": "Demo of some central features of C++20 modules, changing a simple header-only library into a module.\n\nLinks:\nhttps://docs.microsoft.com/en-us/cpp/cpp/modules-cpp?view=vs-2019\nhttps://releases.llvm.org/9.0.0/tools/clang/docs/Modules.html\nhttps://gcc.gnu.org/wiki/cxx-modules",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/6SKIUeRaLZE/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/6SKIUeRaLZE/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/6SKIUeRaLZE/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/6SKIUeRaLZE/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/6SKIUeRaLZE/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 137,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "6SKIUeRaLZE"
        },
        "videoOwnerChannelTitle": "Context Free",
        "videoOwnerChannelId": "UCS4FAVeYW_IaZqAbqhlvxlA"
      },
      "contentDetails": {
        "videoId": "6SKIUeRaLZE",
        "videoPublishedAt": "2020-03-30T12:00:02Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "PzFJGx87gZhVGo8OPsN5xxCvoPo",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy41QTY1Q0UxMTVCODczNThE",
      "snippet": {
        "publishedAt": "2021-09-13T13:18:08Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "CppCon 2019: Michael Spencer \u201cBuilding Modules\u201d",
        "description": "http://CppCon.org\n\u2014\nDiscussion & Comments: https://www.reddit.com/r/cpp/\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2019\n\u2014\nC++20 brings us modules, which, for the first time in 40 years, change the fundamental way in which we build code. In this talk we will cover the different ways C++ code using modules can be built, explore some actual build systems supporting modules, and explain the build performance implications of each method. Modules provide isolation between components to a level never before available in C++, and allow us to share the work of parsing interfaces between compile steps. At their core both headers and modules are represented by a dependency graph. Conceptually, headers resolve this graph by duplicating, pruning, and flattening it for each translation unit. Modules can avoid this duplication, but if they do they pay for it with serialization and synchronization overhead. The end result of this trade-off depends on the shape of your build.\n\u2014 \nMichael Spencer\nCompiler Engineer, Apple\n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/L0SHHkBenss/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/L0SHHkBenss/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/L0SHHkBenss/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/L0SHHkBenss/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/L0SHHkBenss/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 138,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "L0SHHkBenss"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "L0SHHkBenss",
        "videoPublishedAt": "2019-10-06T07:00:03Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "g7C5I0McU-gc6XpbI5AcZpgrB_w",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy5EQUE1NTFDRjcwMDg0NEMz",
      "snippet": {
        "publishedAt": "2021-09-13T13:17:58Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "CppCon 2019: Gabriel Dos Reis \u201cProgramming with C++ Modules: Guide for the Working\u201d",
        "description": "http://CppCon.org\n\u2014\nDiscussion & Comments: https://www.reddit.com/r/cpp/\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2019\n\u2014\nModules are coming. The primary objective of this talk is to help the practicing software developer prepare for their effective usage. It examines software architecture requirements for programming in the large and linguistic support offered by the coming C++20 standards. The talk augments the programmer\u2019s toolbox with new programming techniques based on componentization and isolation offered by C++ modules. Finally, it shows how the practitioner can start experimenting with these ideas with in-development compilers such as MSVC, GCC, and Clang.\n\n\u2014 \n\nGabriel Dos Reis\nMicrosoft\nPrincipal Software Engineer\n\nGabriel Dos Reis is a Principal Software Engineer at Microsoft, where he works in the area of large scale software construction, tools, and techniques. He is also a researcher, and a longtime member of the C++ community, author and co-author of numerous extensions to support large scale programming, compile-time and generic programming. His research interests include programming tools for dependable software. Prior to joining Microsoft, he was Assistant Professor at Texas A&M University. Dr. Dos Reis was a recipient of the 2012 National Science Foundation CAREER award for his research in compilers for dependable computational mathematics and educational activities.\n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/tjSuKOz5HK4/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/tjSuKOz5HK4/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/tjSuKOz5HK4/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/tjSuKOz5HK4/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/tjSuKOz5HK4/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 139,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "tjSuKOz5HK4"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "tjSuKOz5HK4",
        "videoPublishedAt": "2019-10-05T07:00:11Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "iHVYvC2Fl85si6qo3ayorOOL4xI",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy41Mzk2QTAxMTkzNDk4MDhF",
      "snippet": {
        "publishedAt": "2021-09-13T13:17:48Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "Practical C++ Modules - Boris Kolpackov - CppCon 2019",
        "description": "http://CppCon.org\n\u2014\nDiscussion & Comments: https://www.reddit.com/r/cpp/\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2019\n\u2014\nModules are merged into the C++20 draft which means we now have a good idea what to expect, functionality-wise. Tooling support is also not far behind with compiler and build system vendors making steady progress. So we've got modules, but what now? How do we start using modules in our projects?\n\nThe aim of this talk is to answer the \"What (& Why)\", \"How\", and \"When\" of C++ Modules: what are modules (& why do we need them), how to apply them to new and existing codebases, as well as when can we start the migration.\n\nWe begin with a brief introduction to modules (structure, partitions, header units, include translation) and their relation to other physical design mechanisms (namespaces, headers, libraries, packages). We will also get a basic understanding of the underlying build mechanics which turns out to be necessary to use modules effectively.\n\nNext we dive into the practical aspects of using modules: should we start with header units or go straight to proper modules? If header units, then should we use explicit import or rely on include translation? And if proper modules, then what is the appropriate module granularity? How to name our modules? Split or not to split (into module interface/implementation units)? And what about module distribution?\n\nWe conclude the talk by discussing the state of compilers, build systems, and (system) headers with regard to modules and whether now is a good time to start a new or modularize an existing project.\n\u2014 \nBoris Kolpackov\nCode Synthesis\nChief Hacking Officer\nSouth Africa\n\nBoris Kolpackov is a founder and CHO (Chief Hacking Officer) at Code Synthesis, a company focusing on the development of open-source tools and libraries for C++. For the past 10 years Boris has been working on solving interesting problems in the context of C++ using domain-specific languages (DSL), C++ parsing, source-to-source translation, and code generation. His notable projects to date include ODB (ORM for C++), XSD and XSD/e (XML Schema to C++ compilers), as well as libstudxml (XML parser/serializer library for C++).\n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/szHV6RdQdg8/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/szHV6RdQdg8/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/szHV6RdQdg8/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/szHV6RdQdg8/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/szHV6RdQdg8/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 140,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "szHV6RdQdg8"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "szHV6RdQdg8",
        "videoPublishedAt": "2019-10-18T07:00:12Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "imUz_3Ym1R6grYKZ0IHvboP11_U",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy4zMDg5MkQ5MEVDMEM1NTg2",
      "snippet": {
        "publishedAt": "2021-09-13T12:08:32Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "July 2021 - Conan Package Manager for C++ in Practice - Jerry Wiltse",
        "description": "Jerry Wiltse joined us to talk about the Conan Package Manager\n\nAbstract\n\nThe Conan package manager for C++ is useful in both simple and advanced development environments. Join the Conan team to see it in action, with a simple demo using OSS libraries and tools from ConanCenter, and a more complete demo showing how to create and upload a package including different binaries for different platforms to a private repository. Also, learn about many other unique and innovative advanced Conan features along the way.\n\nJerry Wiltse, Senior Software Engineer, Conan Team",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/gEtluys31sA/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/gEtluys31sA/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/gEtluys31sA/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/gEtluys31sA/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/gEtluys31sA/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 141,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "gEtluys31sA"
        },
        "videoOwnerChannelTitle": "North Denver Metro CPP Meetup",
        "videoOwnerChannelId": "UCK5v1dZu2AjHfHLIKTG8dPw"
      },
      "contentDetails": {
        "videoId": "gEtluys31sA",
        "videoPublishedAt": "2021-07-13T00:55:44Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "ozq59yh3Jp5BXcIoYwscf52byrg",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy45ODRDNTg0QjA4NkFBNkQy",
      "snippet": {
        "publishedAt": "2021-09-13T12:08:14Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "Deep CMake for Library Authors - Craig Scott - CppCon 2019",
        "description": "http://CppCon.org\n\u2014\nDiscussion & Comments: https://www.reddit.com/r/cpp/\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2019\n\u2014\nThis talk presents a road map for C++ library authors grappling with cross-platform aspects of library development and deployment. It highlights key CMake features that every cross-platform library project should be using and digs deeper into the platform-specific quirks and conventions behind them. The material presented will give library authors more robust control over their API, smoother integration with major platforms and packaging systems, and more convenient inclusion by other projects.\n\nThe presentation will firstly examine how symbol visibility, library versioning and API evolution can be handled coherently across all major platforms and compilers. CMake provides dedicated features for these that are easy to use, but with the deeper understanding provided by this talk, library authors will be able to make these areas work together more seamlessly and avoid future maintenance and compatibility issues.\n\nWe will then explore how platform and vendor differences affect the installed directory layout for projects with libraries. CMake features for transparently handling the different conventions and policies will be presented, including recent CMake improvements which simplify this task. The importance of RPATH/RUNPATH functionality for improved runtime robustness and ease of use will also be explained, along with some associated support CMake provides.\n\nAlong the way, the talk will mention a number of specific things that CMake library projects should do or avoid to make themselves easy for other projects to consume. This will include versioning support for CMake config package files, guidance on defining install components and accounting for the different ways that projects may incorporate yours into their build.\n\n\u2014 \n\nCraig Scott\nCrascit Pty Ltd\nFounder\n\nCraig is a CMake co-maintainer and author of the book \u201cProfessional CMake: A Practical Guide\u201d. He has been developing cross-platform C++ software since 2001, targeting most major platforms and working on large scale frameworks, scientific algorithm development, Qt GUI applications, backend services and embedded devices. He is the company founder of Crascit Pty Ltd, through which he offers consulting services related to CMake, C++ and build/release processes.\n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/m0DwB4OvDXk/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/m0DwB4OvDXk/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/m0DwB4OvDXk/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/m0DwB4OvDXk/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/m0DwB4OvDXk/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 142,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "m0DwB4OvDXk"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "m0DwB4OvDXk",
        "videoPublishedAt": "2019-10-16T07:00:02Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "E1Zyu9NyTRMiV0ppcZYll12h57c",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy5EMEEwRUY5M0RDRTU3NDJC",
      "snippet": {
        "publishedAt": "2021-09-13T12:07:51Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "Keynote: SOLID, Revisited - Tony Van Eerd - [CppNow 2021]",
        "description": "#Boost\u200b #Cpp\u200b #CppNow\u200b \nSlides: https://cppnow.org/history/2021/talks/\nCppNow Website: https://cppnow.org\u200b\nCppNow Twitter: @CppNow\nStreamed & Edited By Digital Medium Ltd: https://events.digital-medium.co.uk\u200b\n------\nHappy 20th Birthday SOLID!\n\nThe SOLID principles were introduced in 2000 (and were around individually long before coalescing into the nice acronym). They quickly became tenets of OOP (Object Oriented Programming).\n\nBut much has changed in these 20 years, and VOP (Value-Oriented Programming) has been pushed by some as the better way (or at least as another tool in the tool box).\nDoes SOLID hold up in the VOP world? Does it still apply?\n\nThis talk will delve into the original (and sometimes forgotten) motivations and goals behind SOLID. It will (of course) explain what each of the letters of SOLID stand for, and how they apply to OOP (and how they have been distorted in OOP). In particular, we will look at how and whether SOLID applies to Value Oriented Programming - how does SOLID fit into modern C++?\n\n------\nTony Van Eerd\nStunt-double for C++ Expert, Christie Digital\n\nTony has been coding for well over 25 years, and hopefully coding well for most of that. Previously at Inscriber, Adobe, and BlackBerry, he now enables Painting with Light at Christie Digital. He is on the C++ Committee. He is a Ninja and a Jedi. @tvaneerd\n------\n\nMay 1, 2022 - May 6, 2022 - Aspen, Colorado\n-------------------------",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/glYq-dvgby4/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/glYq-dvgby4/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/glYq-dvgby4/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/glYq-dvgby4/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/glYq-dvgby4/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 143,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "glYq-dvgby4"
        },
        "videoOwnerChannelTitle": "CppNow",
        "videoOwnerChannelId": "UC5e__RG9K3cHrPotPABnrwg"
      },
      "contentDetails": {
        "videoId": "glYq-dvgby4",
        "videoPublishedAt": "2021-07-05T19:00:13Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "Xvk0eQgr5qkDM3p3l2RymHtR7Js",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy40NzZCMERDMjVEN0RFRThB",
      "snippet": {
        "publishedAt": "2021-09-13T12:07:28Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "C++Now 2017: Daniel Pfeifer \u201cEffective CMake\"",
        "description": "http://cppnow.org\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/boostcon/cppnow_presentations_2017\n\u2014\nWhile CMake has become the de-facto standard buildsystem for C++, it's siblings \nCTest and CPack are less well known. This talk gives a lightspeed introduction into these three tools and then focuses on best practices on building, testing, and packaging. We will learn how to manage dependencies and export our libraries in such a way that they can be easily used by our clients. We will crosscompile for different platforms and run our tests in an emulator. \nWe will analyze code coverage and perform static and dynamic code analysis. \n\u2014 \nDaniel is an Electrical Engineer turned into a Computer Scientist. He works as C++ developer, system architect, trainer and guru for C++ and CMake. Daniel is the founder of the C++ user group in Munich. He is also an active contributor to CMake and knows some undocumented internals.\n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/bsXLMQ6WgIk/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/bsXLMQ6WgIk/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/bsXLMQ6WgIk/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/bsXLMQ6WgIk/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/bsXLMQ6WgIk/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 144,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "bsXLMQ6WgIk"
        },
        "videoOwnerChannelTitle": "CppNow",
        "videoOwnerChannelId": "UC5e__RG9K3cHrPotPABnrwg"
      },
      "contentDetails": {
        "videoId": "bsXLMQ6WgIk",
        "videoPublishedAt": "2017-06-06T20:46:32Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "ItdORc5Cuyf3zI80Z5pEZHztGnY",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy41NkI0NEY2RDEwNTU3Q0M2",
      "snippet": {
        "publishedAt": "2021-09-13T11:10:20Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "CppCon 2018: Mateusz Pusz \u201cGit, CMake, Conan - How to ship and reuse our C++ projects\u201d",
        "description": "http://CppCon.org\n\u2014\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2018\n\u2014\nGit and CMake are already established standards in our community. However, it is uncommon to see them being used in an efficient way. As a result, many C++ projects have big problems with either importing other dependencies or making themselves easy to import by others. It gets even worse when we need to build many different configurations of our package on one machine. \n\nThat presentation lists and addresses the problems of build system and packaging that we have with large, multi-platform, C++ projects that often have many external and internal dependencies. The talk will present how proper use of CMake and Conan package manager can address those use cases. It will also describe current issues with the cooperation of those tools.\n\nIf you've attended or seen my talk at C++Now 2018, that time you can expect much more information on Conan and package creation using that tool. I will also describe how the integration of CMake and Conan changed over the last few months.\n\u2014 \nMateusz Pusz, Epam Systems\nChief Software Engineer\n\nSoftware architect, chief developer, and security champion with more than 14 years of experience in designing, writing and maintaining C++ code for fun and living. C++ consultant, trainer, and evangelist focused on Modern C++. His main areas of interest and expertise are code performance, low latency, stability, and security.\n\nMateusz worked at Intel for 13 years and now he leads C++ Community at EPAM Systems. He is also a founder of Train IT that provides C++ trainings to corporations. Mateusz is an active voting member of the ISO C++ Committee (WG21) where, together with the best C++ experts in the world, he shapes the next official version of the C++ language. He is also a member of WG21 Study Group 14 (SG14) responsible for driving performance and low latency subjects in the Committee. In 2013 Mateusz won \u201cBench Games 2013\u201d \u2013 worldwide competition in the C++ language knowledge.\n\u2014\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com \n\n*-----*\nThe CppCon YouTube Channel Is Sponsored By:\nJetBrains : http://jb.gg/cpptools \nSonarSource:  https://www.sonarsource.com/\n*-----*",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/S4QSKLXdTtA/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/S4QSKLXdTtA/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/S4QSKLXdTtA/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/S4QSKLXdTtA/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/S4QSKLXdTtA/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 145,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "S4QSKLXdTtA"
        },
        "videoOwnerChannelTitle": "CppCon",
        "videoOwnerChannelId": "UCMlGfpWw-RUdWX_JbLCukXg"
      },
      "contentDetails": {
        "videoId": "S4QSKLXdTtA",
        "videoPublishedAt": "2018-10-29T07:00:02Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "QqL7C5D616hNZ2NQnIJrWEeHL9E",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy4wMTcyMDhGQUE4NTIzM0Y5",
      "snippet": {
        "publishedAt": "2021-09-13T11:10:20Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "Using Conan in a real-world complex project - Kristian Jerpetj\u00f8n",
        "description": "At IncludeOS we\u2019re building a library operating system for embedded and servers using conan.\n\nIn this talk we\u2019ll show you how we utilize conan for dependency management when cross-compiling for different target platforms and architectures. We will also cover how to use conan features to edit and maintain both local and 3rd party packages in the overall workflow.\n\nSave the date for NDC TechTown 2020  (31st of August - 3rd of September)\n\nCheck out more of our talks at: \nhttps://ndctechtown.com/\nhttps://www.ndcconferences.com/",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/h_5C_9hZIN0/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/h_5C_9hZIN0/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/h_5C_9hZIN0/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/h_5C_9hZIN0/sddefault.jpg",
            "width": 640,
            "height": 480
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 146,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "h_5C_9hZIN0"
        },
        "videoOwnerChannelTitle": "NDC Conferences",
        "videoOwnerChannelId": "UCTdw38Cw6jcm0atBPA39a0Q"
      },
      "contentDetails": {
        "videoId": "h_5C_9hZIN0",
        "videoPublishedAt": "2019-09-24T13:37:02Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "61fvoQCpRr_ZmyzjFTqJtNf6yic",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy5DQUNERDQ2NkIzRUQxNTY1",
      "snippet": {
        "publishedAt": "2021-09-13T11:10:20Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "Oh No! More Modern CMake - Deniz Bahadir - Meeting C++ 2019",
        "description": "Oh No! More Modern CMake - Deniz Bahadir - Meeting C++ 2019\nHis CMake Talk from last year: https://youtu.be/y7ndUhdQuU8\nSlides: https://meetingcpp.com/mcpp/slides\nSurvey: https://meetingcpp.com/mcpp/survey",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/y9kSr5enrSk/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/y9kSr5enrSk/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/y9kSr5enrSk/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/y9kSr5enrSk/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/y9kSr5enrSk/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 147,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "y9kSr5enrSk"
        },
        "videoOwnerChannelTitle": "Meeting Cpp",
        "videoOwnerChannelId": "UCJpMLydEYA08vusDkq3FmjQ"
      },
      "contentDetails": {
        "videoId": "y9kSr5enrSk",
        "videoPublishedAt": "2020-01-02T21:50:42Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "5hR63TIXS0RjVVql6STfc-DYiyc",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy41MjE1MkI0OTQ2QzJGNzNG",
      "snippet": {
        "publishedAt": "2021-09-13T11:10:20Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "C++ Weekly - Ep 208 - The Ultimate CMake / C++ Quick Start",
        "description": "Biggest episode ever! CMake, sanitizers, clang-tidy, conan, cmake-format, clang-format, cppcheck, doxygen, ctest, catch, {fmt}, and more!\n\nProfessional CMake Book: https://crascit.com/professional-cmake/\n\nSupport this channel and learn something new; buy my C++ Best Practices Book! https://leanpub.com/cppbestpractices\n\nMy Training Classes: http://emptycrate.com/training.html\nSupport these videos: https://www.patreon.com/lefticus \nFollow me on twitter: https://twitter.com/lefticus",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/YbgH7yat-Jo/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/YbgH7yat-Jo/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/YbgH7yat-Jo/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/YbgH7yat-Jo/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/YbgH7yat-Jo/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 148,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "YbgH7yat-Jo"
        },
        "videoOwnerChannelTitle": "C\u1429\u1429 Weekly With Jason Turner",
        "videoOwnerChannelId": "UCxHAlbZQNFU2LgEtiqd2Maw"
      },
      "contentDetails": {
        "videoId": "YbgH7yat-Jo",
        "videoPublishedAt": "2020-02-24T14:35:10Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "3NCh1DGl7Istws4RZeSIstzWNRM",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy4xMkVGQjNCMUM1N0RFNEUx",
      "snippet": {
        "publishedAt": "2021-09-13T11:10:20Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "Cross-platform Qt 6 CMake Project Setup",
        "description": "In this video I show you how to set up Qt 6 and a CMake file which can be used to build your Qt C++ project to be used with Visual Studio 2019 and Qt Creator. This CMake file is usable in Windows, Mac, and Linux.\n\nGitHub Repository: https://github.com/VelazcoJD/Qt6CMake\n\nQt Logging Video: https://youtu.be/2OSXNdrJ3H0\n\n___ Equipment ___\nMicrophone: https://amzn.to/3leXZR4\nTouch Input: https://amzn.to/30Z1Mex\nMonitor: https://amzn.to/3rfwfiQ\nVideo Editing: https://amzn.to/3lgb8Jv\n\n00:00 Introduction\n00:27 Install Qt \n04:31 Setup Qt in Path (Windows)\n06:50 Install CMake\n07:38 CMake File\n13:45 Visual Studio Setup\n16:04 Sample Code\n19:15 Qt Creator Setup\n23:18 Summary\n24:00 Last Remarks",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/XiMplRfuFJc/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/XiMplRfuFJc/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/XiMplRfuFJc/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/XiMplRfuFJc/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/XiMplRfuFJc/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 149,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "XiMplRfuFJc"
        },
        "videoOwnerChannelTitle": "Velcode",
        "videoOwnerChannelId": "UCgwHVfkJ6rlcw8ko4ci0iRQ"
      },
      "contentDetails": {
        "videoId": "XiMplRfuFJc",
        "videoPublishedAt": "2021-01-15T07:21:47Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "y7flNwlnXvGiiclD_QW3geRSw8c",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy4wOTA3OTZBNzVEMTUzOTMy",
      "snippet": {
        "publishedAt": "2021-09-13T11:10:20Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "\"Conan Package Manager for C++ in Practice\" by Jerry Wiltse",
        "description": "Slides: https://jfrog.com/shownote/dublincpp-conan-package-manager-02-2021/\nCode used during the talk: https://github.com/solvingj/conan_cpp_demo\n\nTalk description: The Conan package manager for C++ is useful in both simple and advanced development environments. Join the Conan team to see it in action, with a simple demo using OSS libraries and tools from ConanCenter, and a more complete demo showing how to create and upload a package including different binaries for different platforms to a private repository. Also, learn about many other unique and innovative advanced Conan features along the way.\n\nSpeaker bio: Jerry Wiltse is a Senior Software Engineer of the Conan development team, and has been dedicated to build engineering for C and C++ since 2016. He is an avid open-source enthusiast but also deeply focused on enterprise development environments. He is also the narrator and creator of the Conan learning track on the JFrog Academy.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/0ekPQvSCoXE/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/0ekPQvSCoXE/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/0ekPQvSCoXE/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/0ekPQvSCoXE/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/0ekPQvSCoXE/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 150,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "0ekPQvSCoXE"
        },
        "videoOwnerChannelTitle": "C/C++ Dublin User Group",
        "videoOwnerChannelId": "UCZ4UNE_1IMUFfAhcdq7CMOg"
      },
      "contentDetails": {
        "videoId": "0ekPQvSCoXE",
        "videoPublishedAt": "2021-02-16T09:50:43Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "I3ktAtQrN_g_vyJ8BHgzyP719aI",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy45NDk1REZENzhEMzU5MDQz",
      "snippet": {
        "publishedAt": "2021-09-13T11:10:20Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "Conan Package Manager for C++ in Practice",
        "description": "By Jerry Wiltse, presented at Core C++ [online] meetup, March 2021. The slides can be found at http://bit.ly/ConanDemo, more links to Conan resources at http://bit.ly/ZoomLinksMar21.\n\nThe Conan package manager for C++ is useful in both simple and advanced development environments. Join the Conan team to see it in action, with a simple demo using OSS libraries and tools from ConanCenter, and a more complete demo showing how to create and upload a package including different binaries for different platforms to a private repository. Also, learn about many other unique and innovative advanced Conan features along the way.\n\n*Jerry* is a member of the Conan development team, and has been dedicated to build engineering for C and C++ since 2016. He is an avid open-source enthusiast but also deeply focused on enterprise development environments. He is also the narrator and creator of the Conan learning track on the JFrog Academy.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/vAe9k0NJkw8/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/vAe9k0NJkw8/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/vAe9k0NJkw8/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/vAe9k0NJkw8/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/vAe9k0NJkw8/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 151,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "vAe9k0NJkw8"
        },
        "videoOwnerChannelTitle": "CoreCppIL",
        "videoOwnerChannelId": "UCE14XYFaK1fDTnOTqlOFrrQ"
      },
      "contentDetails": {
        "videoId": "vAe9k0NJkw8",
        "videoPublishedAt": "2021-04-06T18:45:51Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "KjhqKJcQCv40R1wEX8bQe62bmzc",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy41MzJCQjBCNDIyRkJDN0VD",
      "snippet": {
        "publishedAt": "2021-09-13T11:10:20Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "C++ Modules: Year 2021",
        "description": "Check out free documentation and modules on Microsoft Learn: https://docs.microsoft.com/en-us/cpp/?WT.mc_id=purevirtual-21218-cmandell\n\nIn the year 2021, with toolset support for C++ Modules ready for production use, what can we expect? This talk presents the lay of the land, and offers a window into the future of practical semantics tooling of C++.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/YcZntyWpqVQ/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/YcZntyWpqVQ/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/YcZntyWpqVQ/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/YcZntyWpqVQ/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/YcZntyWpqVQ/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 152,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "YcZntyWpqVQ"
        },
        "videoOwnerChannelTitle": "Microsoft Developer",
        "videoOwnerChannelId": "UCsMica-v34Irf9KVTh6xx-g"
      },
      "contentDetails": {
        "videoId": "YcZntyWpqVQ",
        "videoPublishedAt": "2021-05-07T02:54:44Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "3uxfsdm5BEW-HEfxTwD-_YrRSs0",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy5GNjNDRDREMDQxOThCMDQ2",
      "snippet": {
        "publishedAt": "2021-09-13T11:10:20Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "[MUC++] Jerry Wiltse - Conan Package Manager for C++ in Practice",
        "description": "The Conan package manager for C++ is useful in both simple and advanced development environments. Join the Conan team to see it in action, with a simple demo using OSS libraries and tools from ConanCenter, and a more complete demo showing how to create and upload a package including different binaries for different platforms to a private repository. Also, learn about many other unique and innovative advanced Conan features along the way.\n\n\nSlides: http://jfrog.co/MUCpp",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/TXXT9XZ-vok/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/TXXT9XZ-vok/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/TXXT9XZ-vok/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/TXXT9XZ-vok/sddefault.jpg",
            "width": 640,
            "height": 480
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 153,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "TXXT9XZ-vok"
        },
        "videoOwnerChannelTitle": "MUCplusplus",
        "videoOwnerChannelId": "UCf3tX0nf8EFIwmgQBH6PIGw"
      },
      "contentDetails": {
        "videoId": "TXXT9XZ-vok",
        "videoPublishedAt": "2021-05-21T16:56:49Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "1eMplfj9eAOUqNza2OjOiOeib2k",
      "id": "UExJamhmbHVoTmQ5OHRubVg0aGVGVzhsckh2ejFVcjNGVy4yODlGNEE0NkRGMEEzMEQy",
      "snippet": {
        "publishedAt": "2021-09-13T11:10:20Z",
        "channelId": "UCqsUJL5xIWuidR7sIrPLhAw",
        "title": "CMake + Conan: 3 Years Later - Mateusz Pusz - [CppNow 2021]",
        "description": "#Boost\u200b #Cpp\u200b #CppNow\u200b \nSlides: https://cppnow.org/history/2021/talks/\nCppNow Website: https://cppnow.org\u200b\nCppNow Twitter: @CppNow\nStreamed & Edited By Digital Medium Ltd: https://events.digital-medium.co.uk\u200b\n------\nThis lecture is a continuation of my C++Now 2018 \"Git, CMake, Conan: How to Ship and Reuse our C++ Projects\" talk. This time I will share what I've learned and what has changed through the last three years in sharing and reusing C++ projects via CMake and Conan. I will share the updated best practices of packaging C++ projects and the most important highlights of the upcoming Conan 2.0.\n\nIf you are interested in package management in large enterprise projects, you probably do not want to miss this talk.\n------\n\n------\n\nMay 1, 2022 - May 6, 2022 - Aspen, Colorado\n-------------------------",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/mrSwJBJ-0z8/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/mrSwJBJ-0z8/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/mrSwJBJ-0z8/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/mrSwJBJ-0z8/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/mrSwJBJ-0z8/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Donald Thompson",
        "playlistId": "PLIjhfluhNd98tnmX4heFW8lrHvz1Ur3FW",
        "position": 154,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "mrSwJBJ-0z8"
        },
        "videoOwnerChannelTitle": "CppNow",
        "videoOwnerChannelId": "UC5e__RG9K3cHrPotPABnrwg"
      },
      "contentDetails": {
        "videoId": "mrSwJBJ-0z8",
        "videoPublishedAt": "2021-07-08T22:00:11Z"
      }
    }
  ]
}